
LED_matrix_USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000251c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00802000  0000251c  000025b0  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f4  008020fc  008020fc  000026ac  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00002720  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007456  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001acd  00000000  00000000  00009f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f0d  00000000  00000000  0000b9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000085c  00000000  00000000  000118f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002f4c4  00000000  00000000  0001214c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ded  00000000  00000000  00041610  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00044400  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e78  00000000  00000000  00044810  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c1       	rjmp	.+520    	; 0x20a <__ctors_end>
       2:	00 00       	nop
       4:	28 c1       	rjmp	.+592    	; 0x256 <__bad_interrupt>
       6:	00 00       	nop
       8:	26 c1       	rjmp	.+588    	; 0x256 <__bad_interrupt>
       a:	00 00       	nop
       c:	24 c1       	rjmp	.+584    	; 0x256 <__bad_interrupt>
       e:	00 00       	nop
      10:	22 c1       	rjmp	.+580    	; 0x256 <__bad_interrupt>
      12:	00 00       	nop
      14:	20 c1       	rjmp	.+576    	; 0x256 <__bad_interrupt>
      16:	00 00       	nop
      18:	1e c1       	rjmp	.+572    	; 0x256 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1c c1       	rjmp	.+568    	; 0x256 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1a c1       	rjmp	.+564    	; 0x256 <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c1       	rjmp	.+560    	; 0x256 <__bad_interrupt>
      26:	00 00       	nop
      28:	16 c1       	rjmp	.+556    	; 0x256 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	14 c1       	rjmp	.+552    	; 0x256 <__bad_interrupt>
      2e:	00 00       	nop
      30:	12 c1       	rjmp	.+548    	; 0x256 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c1       	rjmp	.+544    	; 0x256 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c1       	rjmp	.+540    	; 0x256 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c c1       	rjmp	.+536    	; 0x256 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0a c1       	rjmp	.+532    	; 0x256 <__bad_interrupt>
      42:	00 00       	nop
      44:	08 c1       	rjmp	.+528    	; 0x256 <__bad_interrupt>
      46:	00 00       	nop
      48:	06 c1       	rjmp	.+524    	; 0x256 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	04 c1       	rjmp	.+520    	; 0x256 <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c1       	rjmp	.+516    	; 0x256 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c1       	rjmp	.+512    	; 0x256 <__bad_interrupt>
      56:	00 00       	nop
      58:	fe c0       	rjmp	.+508    	; 0x256 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fc c0       	rjmp	.+504    	; 0x256 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fa c0       	rjmp	.+500    	; 0x256 <__bad_interrupt>
      62:	00 00       	nop
      64:	f8 c0       	rjmp	.+496    	; 0x256 <__bad_interrupt>
      66:	00 00       	nop
      68:	f6 c0       	rjmp	.+492    	; 0x256 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	f4 c0       	rjmp	.+488    	; 0x256 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f2 c0       	rjmp	.+484    	; 0x256 <__bad_interrupt>
      72:	00 00       	nop
      74:	f0 c0       	rjmp	.+480    	; 0x256 <__bad_interrupt>
      76:	00 00       	nop
      78:	ee c0       	rjmp	.+476    	; 0x256 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ec c0       	rjmp	.+472    	; 0x256 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ea c0       	rjmp	.+468    	; 0x256 <__bad_interrupt>
      82:	00 00       	nop
      84:	e8 c0       	rjmp	.+464    	; 0x256 <__bad_interrupt>
      86:	00 00       	nop
      88:	e6 c0       	rjmp	.+460    	; 0x256 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e4 c0       	rjmp	.+456    	; 0x256 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e2 c0       	rjmp	.+452    	; 0x256 <__bad_interrupt>
      92:	00 00       	nop
      94:	e0 c0       	rjmp	.+448    	; 0x256 <__bad_interrupt>
      96:	00 00       	nop
      98:	de c0       	rjmp	.+444    	; 0x256 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	dc c0       	rjmp	.+440    	; 0x256 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	da c0       	rjmp	.+436    	; 0x256 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d8 c0       	rjmp	.+432    	; 0x256 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d6 c0       	rjmp	.+428    	; 0x256 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d4 c0       	rjmp	.+424    	; 0x256 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	d2 c0       	rjmp	.+420    	; 0x256 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	d0 c0       	rjmp	.+416    	; 0x256 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ce c0       	rjmp	.+412    	; 0x256 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	cc c0       	rjmp	.+408    	; 0x256 <__bad_interrupt>
      be:	00 00       	nop
      c0:	ca c0       	rjmp	.+404    	; 0x256 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c8 c0       	rjmp	.+400    	; 0x256 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c6 c0       	rjmp	.+396    	; 0x256 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	c4 c0       	rjmp	.+392    	; 0x256 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	c2 c0       	rjmp	.+388    	; 0x256 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	c0 c0       	rjmp	.+384    	; 0x256 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	be c0       	rjmp	.+380    	; 0x256 <__bad_interrupt>
      da:	00 00       	nop
      dc:	bc c0       	rjmp	.+376    	; 0x256 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ba c0       	rjmp	.+372    	; 0x256 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b8 c0       	rjmp	.+368    	; 0x256 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b6 c0       	rjmp	.+364    	; 0x256 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	b4 c0       	rjmp	.+360    	; 0x256 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	b2 c0       	rjmp	.+356    	; 0x256 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	b0 c0       	rjmp	.+352    	; 0x256 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ae c0       	rjmp	.+348    	; 0x256 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	ac c0       	rjmp	.+344    	; 0x256 <__bad_interrupt>
      fe:	00 00       	nop
     100:	aa c0       	rjmp	.+340    	; 0x256 <__bad_interrupt>
     102:	00 00       	nop
     104:	a8 c0       	rjmp	.+336    	; 0x256 <__bad_interrupt>
     106:	00 00       	nop
     108:	a6 c0       	rjmp	.+332    	; 0x256 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	a4 c0       	rjmp	.+328    	; 0x256 <__bad_interrupt>
     10e:	00 00       	nop
     110:	a2 c0       	rjmp	.+324    	; 0x256 <__bad_interrupt>
     112:	00 00       	nop
     114:	a0 c0       	rjmp	.+320    	; 0x256 <__bad_interrupt>
     116:	00 00       	nop
     118:	9e c0       	rjmp	.+316    	; 0x256 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	9c c0       	rjmp	.+312    	; 0x256 <__bad_interrupt>
     11e:	00 00       	nop
     120:	9a c0       	rjmp	.+308    	; 0x256 <__bad_interrupt>
     122:	00 00       	nop
     124:	98 c0       	rjmp	.+304    	; 0x256 <__bad_interrupt>
     126:	00 00       	nop
     128:	96 c0       	rjmp	.+300    	; 0x256 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	94 c0       	rjmp	.+296    	; 0x256 <__bad_interrupt>
     12e:	00 00       	nop
     130:	92 c0       	rjmp	.+292    	; 0x256 <__bad_interrupt>
     132:	00 00       	nop
     134:	90 c0       	rjmp	.+288    	; 0x256 <__bad_interrupt>
     136:	00 00       	nop
     138:	8e c0       	rjmp	.+284    	; 0x256 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	8c c0       	rjmp	.+280    	; 0x256 <__bad_interrupt>
     13e:	00 00       	nop
     140:	8a c0       	rjmp	.+276    	; 0x256 <__bad_interrupt>
     142:	00 00       	nop
     144:	88 c0       	rjmp	.+272    	; 0x256 <__bad_interrupt>
     146:	00 00       	nop
     148:	86 c0       	rjmp	.+268    	; 0x256 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	84 c0       	rjmp	.+264    	; 0x256 <__bad_interrupt>
     14e:	00 00       	nop
     150:	82 c0       	rjmp	.+260    	; 0x256 <__bad_interrupt>
     152:	00 00       	nop
     154:	80 c0       	rjmp	.+256    	; 0x256 <__bad_interrupt>
     156:	00 00       	nop
     158:	7e c0       	rjmp	.+252    	; 0x256 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	7c c0       	rjmp	.+248    	; 0x256 <__bad_interrupt>
     15e:	00 00       	nop
     160:	7a c0       	rjmp	.+244    	; 0x256 <__bad_interrupt>
     162:	00 00       	nop
     164:	78 c0       	rjmp	.+240    	; 0x256 <__bad_interrupt>
     166:	00 00       	nop
     168:	76 c0       	rjmp	.+236    	; 0x256 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	74 c0       	rjmp	.+232    	; 0x256 <__bad_interrupt>
     16e:	00 00       	nop
     170:	72 c0       	rjmp	.+228    	; 0x256 <__bad_interrupt>
     172:	00 00       	nop
     174:	70 c0       	rjmp	.+224    	; 0x256 <__bad_interrupt>
     176:	00 00       	nop
     178:	6e c0       	rjmp	.+220    	; 0x256 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	6c c0       	rjmp	.+216    	; 0x256 <__bad_interrupt>
     17e:	00 00       	nop
     180:	6a c0       	rjmp	.+212    	; 0x256 <__bad_interrupt>
     182:	00 00       	nop
     184:	68 c0       	rjmp	.+208    	; 0x256 <__bad_interrupt>
     186:	00 00       	nop
     188:	66 c0       	rjmp	.+204    	; 0x256 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	64 c0       	rjmp	.+200    	; 0x256 <__bad_interrupt>
     18e:	00 00       	nop
     190:	62 c0       	rjmp	.+196    	; 0x256 <__bad_interrupt>
     192:	00 00       	nop
     194:	60 c0       	rjmp	.+192    	; 0x256 <__bad_interrupt>
     196:	00 00       	nop
     198:	5e c0       	rjmp	.+188    	; 0x256 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	5c c0       	rjmp	.+184    	; 0x256 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	5a c0       	rjmp	.+180    	; 0x256 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	58 c0       	rjmp	.+176    	; 0x256 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	56 c0       	rjmp	.+172    	; 0x256 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	54 c0       	rjmp	.+168    	; 0x256 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	52 c0       	rjmp	.+164    	; 0x256 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	50 c0       	rjmp	.+160    	; 0x256 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	4e c0       	rjmp	.+156    	; 0x256 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	4c c0       	rjmp	.+152    	; 0x256 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	4a c0       	rjmp	.+148    	; 0x256 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	48 c0       	rjmp	.+144    	; 0x256 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	46 c0       	rjmp	.+140    	; 0x256 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	44 c0       	rjmp	.+136    	; 0x256 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	42 c0       	rjmp	.+132    	; 0x256 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	40 c0       	rjmp	.+128    	; 0x256 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	3e c0       	rjmp	.+124    	; 0x256 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	3c c0       	rjmp	.+120    	; 0x256 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	3a c0       	rjmp	.+116    	; 0x256 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	38 c0       	rjmp	.+112    	; 0x256 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	36 c0       	rjmp	.+108    	; 0x256 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	34 c0       	rjmp	.+104    	; 0x256 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	32 c0       	rjmp	.+100    	; 0x256 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <__vector_125>
     1f8:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__vector_126>
     1fc:	cd 06       	cpc	r12, r29
     1fe:	d0 06       	cpc	r13, r16
     200:	d3 06       	cpc	r13, r19
     202:	d6 06       	cpc	r13, r22
     204:	d9 06       	cpc	r13, r25
     206:	dc 06       	cpc	r13, r28
     208:	df 06       	cpc	r13, r31

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	cd bf       	out	0x3d, r28	; 61
     212:	df e3       	ldi	r29, 0x3F	; 63
     214:	de bf       	out	0x3e, r29	; 62
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0c bf       	out	0x3c, r16	; 60
     21a:	18 be       	out	0x38, r1	; 56
     21c:	19 be       	out	0x39, r1	; 57
     21e:	1a be       	out	0x3a, r1	; 58
     220:	1b be       	out	0x3b, r1	; 59

00000222 <__do_copy_data>:
     222:	10 e2       	ldi	r17, 0x20	; 32
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b0 e2       	ldi	r27, 0x20	; 32
     228:	ec e1       	ldi	r30, 0x1C	; 28
     22a:	f5 e2       	ldi	r31, 0x25	; 37
     22c:	00 e0       	ldi	r16, 0x00	; 0
     22e:	0b bf       	out	0x3b, r16	; 59
     230:	02 c0       	rjmp	.+4      	; 0x236 <__do_copy_data+0x14>
     232:	07 90       	elpm	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	ac 3f       	cpi	r26, 0xFC	; 252
     238:	b1 07       	cpc	r27, r17
     23a:	d9 f7       	brne	.-10     	; 0x232 <__do_copy_data+0x10>
     23c:	1b be       	out	0x3b, r1	; 59

0000023e <__do_clear_bss>:
     23e:	24 e2       	ldi	r18, 0x24	; 36
     240:	ac ef       	ldi	r26, 0xFC	; 252
     242:	b0 e2       	ldi	r27, 0x20	; 32
     244:	01 c0       	rjmp	.+2      	; 0x248 <.do_clear_bss_start>

00000246 <.do_clear_bss_loop>:
     246:	1d 92       	st	X+, r1

00000248 <.do_clear_bss_start>:
     248:	a0 3f       	cpi	r26, 0xF0	; 240
     24a:	b2 07       	cpc	r27, r18
     24c:	e1 f7       	brne	.-8      	; 0x246 <.do_clear_bss_loop>
     24e:	0e 94 08 10 	call	0x2010	; 0x2010 <main>
     252:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <_exit>

00000256 <__bad_interrupt>:
     256:	d4 ce       	rjmp	.-600    	; 0x0 <__vectors>

00000258 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
void spi_master_init(SPI_t *spi)
{
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	ec 01       	movw	r28, r24
	if ((uint16_t)spi == (uint16_t)&SPIB) {
		sysclk_enable_module(SYSCLK_PORT_B, PR_SPI_bm);
	}
#endif
#ifdef SPIC
	if ((uint16_t)spi == (uint16_t)&SPIC) {
     25e:	c0 3c       	cpi	r28, 0xC0	; 192
     260:	28 e0       	ldi	r18, 0x08	; 8
     262:	d2 07       	cpc	r29, r18
     264:	29 f4       	brne	.+10     	; 0x270 <spi_master_init+0x18>
		sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
     266:	68 e0       	ldi	r22, 0x08	; 8
     268:	83 e0       	ldi	r24, 0x03	; 3
     26a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <sysclk_enable_module>
     26e:	07 c0       	rjmp	.+14     	; 0x27e <spi_master_init+0x26>
	}
#endif
#ifdef SPID
	if ((uint16_t)spi == (uint16_t)&SPID) {
     270:	80 3c       	cpi	r24, 0xC0	; 192
     272:	99 40       	sbci	r25, 0x09	; 9
     274:	21 f4       	brne	.+8      	; 0x27e <spi_master_init+0x26>
		sysclk_enable_module(SYSCLK_PORT_D, PR_SPI_bm);
     276:	68 e0       	ldi	r22, 0x08	; 8
     278:	84 e0       	ldi	r24, 0x04	; 4
     27a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <sysclk_enable_module>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     27e:	88 81       	ld	r24, Y
     280:	80 61       	ori	r24, 0x10	; 16
     282:	88 83       	st	Y, r24
	if ((uint16_t)spi == (uint16_t)&SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, PR_SPI_bm);
	}
#endif
	spi_enable_master_mode(spi);
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <spi_master_setup_device>:
 * \param sel_id    Board specific select id
 */
void spi_master_setup_device(SPI_t *spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate,
		board_spi_select_id_t sel_id)
{
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	7c 01       	movw	r14, r24
     296:	c4 2f       	mov	r28, r20
     298:	b9 01       	movw	r22, r18
     29a:	a8 01       	movw	r20, r16
	if (spi_xmega_set_baud_div(spi, baud_rate, sysclk_get_cpu_hz()) < 0) {
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	16 e3       	ldi	r17, 0x36	; 54
     2a0:	2e e6       	ldi	r18, 0x6E	; 110
     2a2:	31 e0       	ldi	r19, 0x01	; 1
     2a4:	41 d4       	rcall	.+2178   	; 0xb28 <spi_xmega_set_baud_div>
     2a6:	88 23       	and	r24, r24
     2a8:	44 f0       	brlt	.+16     	; 0x2ba <spi_master_setup_device+0x30>
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2aa:	f7 01       	movw	r30, r14
     2ac:	90 81       	ld	r25, Z
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
     2ae:	cc 0f       	add	r28, r28
     2b0:	cc 0f       	add	r28, r28
		Assert(false);
		return;
	}

	/* Clear any set SPI mode flags and set them to the user-specified mode */
	spi->CTRL = (spi->CTRL & ~SPI_MODE_gm) |
     2b2:	cc 70       	andi	r28, 0x0C	; 12
     2b4:	93 7f       	andi	r25, 0xF3	; 243
     2b6:	c9 2b       	or	r28, r25
     2b8:	c0 83       	st	Z, r28
			((flags << SPI_MODE_gp) & SPI_MODE_gm);
}
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	08 95       	ret

000002c6 <spi_write_packet>:
 * \param len    Length of data
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
     2c6:	fc 01       	movw	r30, r24
     2c8:	db 01       	movw	r26, r22
     2ca:	46 0f       	add	r20, r22
     2cc:	57 1f       	adc	r21, r23
	while (len--) {
     2ce:	05 c0       	rjmp	.+10     	; 0x2da <spi_write_packet+0x14>
		spi_write_single(spi, *data++);
     2d0:	8d 91       	ld	r24, X+
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(SPI_t *spi, uint8_t data)
{
	spi->DATA = data;
     2d2:	83 83       	std	Z+3, r24	; 0x03
 *
 * \return \c 1 if the SPI Receive Holding Register is full, otherwise \c 0.
 */
static inline bool spi_is_tx_ok(SPI_t *spi)
{
	return spi->STATUS & SPI_IF_bm ? true : false;
     2d4:	92 81       	ldd	r25, Z+2	; 0x02
		
		while (!spi_is_rx_full(spi)) {
     2d6:	99 23       	and	r25, r25
     2d8:	ec f7       	brge	.-6      	; 0x2d4 <spi_write_packet+0xe>
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
status_code_t spi_write_packet(SPI_t *spi, const uint8_t *data, size_t len)
{
	while (len--) {
     2da:	a4 17       	cp	r26, r20
     2dc:	b5 07       	cpc	r27, r21
     2de:	c1 f7       	brne	.-16     	; 0x2d0 <spi_write_packet+0xa>
		while (!spi_is_rx_full(spi)) {
		}
	}
	
	return STATUS_OK;
}
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <udi_hid_generic_getsetting>:
		iram_size_t nb_sent, udd_ep_id_t ep)
{
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	08 95       	ret

000002e8 <udi_hid_generic_setreport>:
     2e8:	30 91 dc 24 	lds	r19, 0x24DC
     2ec:	20 91 dd 24 	lds	r18, 0x24DD
     2f0:	82 2f       	mov	r24, r18
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	03 97       	sbiw	r24, 0x03	; 3
     2f6:	c1 f4       	brne	.+48     	; 0x328 <udi_hid_generic_setreport+0x40>
     2f8:	31 11       	cpse	r19, r1
     2fa:	18 c0       	rjmp	.+48     	; 0x32c <udi_hid_generic_setreport+0x44>
     2fc:	80 91 e0 24 	lds	r24, 0x24E0
     300:	90 91 e1 24 	lds	r25, 0x24E1
     304:	04 97       	sbiw	r24, 0x04	; 4
     306:	a1 f4       	brne	.+40     	; 0x330 <udi_hid_generic_setreport+0x48>
     308:	ea ed       	ldi	r30, 0xDA	; 218
     30a:	f4 e2       	ldi	r31, 0x24	; 36
     30c:	8c ef       	ldi	r24, 0xFC	; 252
     30e:	90 e2       	ldi	r25, 0x20	; 32
     310:	80 87       	std	Z+8, r24	; 0x08
     312:	91 87       	std	Z+9, r25	; 0x09
     314:	8a e9       	ldi	r24, 0x9A	; 154
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	84 87       	std	Z+12, r24	; 0x0c
     31a:	95 87       	std	Z+13, r25	; 0x0d
     31c:	84 e0       	ldi	r24, 0x04	; 4
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	82 87       	std	Z+10, r24	; 0x0a
     322:	93 87       	std	Z+11, r25	; 0x0b
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	08 95       	ret
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	08 95       	ret
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	08 95       	ret
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	08 95       	ret

00000334 <udi_hid_generic_setfeature_valid>:
     334:	08 95       	ret

00000336 <udi_hid_generic_report_out_enable>:
	udi_hid_generic_report_out_enable();
}


static bool udi_hid_generic_report_out_enable(void)
{
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
	return udd_ep_run(UDI_HID_GENERIC_EP_OUT,
     33a:	06 eb       	ldi	r16, 0xB6	; 182
     33c:	11 e0       	ldi	r17, 0x01	; 1
     33e:	21 e9       	ldi	r18, 0x91	; 145
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	51 e2       	ldi	r21, 0x21	; 33
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <udd_ep_run>
							false,
							(uint8_t *) & udi_hid_generic_report_out,
							sizeof(udi_hid_generic_report_out),
							udi_hid_generic_report_out_received);
}
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <udi_hid_generic_enable>:
//------ Interface for UDI HID level

bool udi_hid_generic_enable(void)
{
	// Initialize internal values
	udi_hid_generic_rate = 0;
     354:	10 92 96 21 	sts	0x2196, r1
	udi_hid_generic_protocol = 0;
     358:	10 92 94 21 	sts	0x2194, r1
	udi_hid_generic_b_report_in_free = true;
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	80 93 92 21 	sts	0x2192, r24
	if (!udi_hid_generic_report_out_enable())
     362:	e9 df       	rcall	.-46     	; 0x336 <udi_hid_generic_report_out_enable>
     364:	81 11       	cpse	r24, r1
		return false;
	return UDI_HID_GENERIC_ENABLE_EXT();
     366:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <hid_cb_enable>
}
     36a:	08 95       	ret

0000036c <udi_hid_generic_report_out_received>:

static void udi_hid_generic_report_out_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status)
     36c:	81 11       	cpse	r24, r1
     36e:	08 c0       	rjmp	.+16     	; 0x380 <udi_hid_generic_report_out_received+0x14>
		return;	// Abort reception

	if (sizeof(udi_hid_generic_report_out) == nb_received) {
     370:	61 39       	cpi	r22, 0x91	; 145
     372:	71 05       	cpc	r23, r1
     374:	21 f4       	brne	.+8      	; 0x37e <udi_hid_generic_report_out_received+0x12>
		UDI_HID_GENERIC_REPORT_OUT(udi_hid_generic_report_out);
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	91 e2       	ldi	r25, 0x21	; 33
     37a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <hid_cb_report_out>
	}
	udi_hid_generic_report_out_enable();
     37e:	db cf       	rjmp	.-74     	; 0x336 <udi_hid_generic_report_out_enable>
     380:	08 95       	ret

00000382 <udi_hid_generic_disable>:
}


void udi_hid_generic_disable(void)
{
	UDI_HID_GENERIC_DISABLE_EXT();
     382:	0c 94 d9 0f 	jmp	0x1fb2	; 0x1fb2 <hid_cb_disable>
     386:	08 95       	ret

00000388 <udi_hid_generic_setup>:
}


bool udi_hid_generic_setup(void)
{
	return udi_hid_setup(&udi_hid_generic_rate,
     388:	24 e7       	ldi	r18, 0x74	; 116
     38a:	31 e0       	ldi	r19, 0x01	; 1
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	50 e2       	ldi	r21, 0x20	; 32
     390:	64 e9       	ldi	r22, 0x94	; 148
     392:	71 e2       	ldi	r23, 0x21	; 33
     394:	86 e9       	ldi	r24, 0x96	; 150
     396:	91 e2       	ldi	r25, 0x21	; 33
     398:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <udi_hid_setup>
								&udi_hid_generic_protocol,
								(uint8_t *) &udi_hid_generic_report_desc,
								udi_hid_generic_setreport);
}
     39c:	08 95       	ret

0000039e <udc_next_desc_in_iface>:
/*! \brief Stop the USB Device stack
 */
void udc_stop(void)
{
	udd_disable();
	udc_reset();
     39e:	e0 91 9c 21 	lds	r30, 0x219C
     3a2:	f0 91 9d 21 	lds	r31, 0x219D
     3a6:	01 90       	ld	r0, Z+
     3a8:	f0 81       	ld	r31, Z
     3aa:	e0 2d       	mov	r30, r0
     3ac:	22 81       	ldd	r18, Z+2	; 0x02
     3ae:	33 81       	ldd	r19, Z+3	; 0x03
     3b0:	2e 0f       	add	r18, r30
     3b2:	3f 1f       	adc	r19, r31
     3b4:	fc 01       	movw	r30, r24
     3b6:	40 81       	ld	r20, Z
     3b8:	e4 0f       	add	r30, r20
     3ba:	f1 1d       	adc	r31, r1
     3bc:	e2 17       	cp	r30, r18
     3be:	f3 07       	cpc	r31, r19
     3c0:	b8 f4       	brcc	.+46     	; 0x3f0 <udc_next_desc_in_iface+0x52>
     3c2:	81 81       	ldd	r24, Z+1	; 0x01
     3c4:	84 30       	cpi	r24, 0x04	; 4
     3c6:	b9 f0       	breq	.+46     	; 0x3f6 <udc_next_desc_in_iface+0x58>
     3c8:	86 13       	cpse	r24, r22
     3ca:	09 c0       	rjmp	.+18     	; 0x3de <udc_next_desc_in_iface+0x40>
     3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <udc_next_desc_in_iface+0x3a>
     3ce:	81 81       	ldd	r24, Z+1	; 0x01
     3d0:	84 30       	cpi	r24, 0x04	; 4
     3d2:	a1 f0       	breq	.+40     	; 0x3fc <udc_next_desc_in_iface+0x5e>
     3d4:	86 13       	cpse	r24, r22
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <udc_next_desc_in_iface+0x40>
     3d8:	8e 2f       	mov	r24, r30
     3da:	9f 2f       	mov	r25, r31
     3dc:	08 95       	ret
     3de:	80 81       	ld	r24, Z
     3e0:	e8 0f       	add	r30, r24
     3e2:	f1 1d       	adc	r31, r1
     3e4:	e2 17       	cp	r30, r18
     3e6:	f3 07       	cpc	r31, r19
     3e8:	90 f3       	brcs	.-28     	; 0x3ce <udc_next_desc_in_iface+0x30>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	08 95       	ret
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	08 95       	ret
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	08 95       	ret
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	08 95       	ret

00000402 <udc_valid_address>:
     402:	80 91 dc 24 	lds	r24, 0x24DC
     406:	8f 77       	andi	r24, 0x7F	; 127
     408:	82 c7       	rjmp	.+3844   	; 0x130e <udd_set_address>
     40a:	08 95       	ret

0000040c <udc_update_iface_desc>:
     40c:	90 91 9e 21 	lds	r25, 0x219E
     410:	99 23       	and	r25, r25
     412:	81 f1       	breq	.+96     	; 0x474 <udc_update_iface_desc+0x68>
     414:	e0 91 9c 21 	lds	r30, 0x219C
     418:	f0 91 9d 21 	lds	r31, 0x219D
     41c:	01 90       	ld	r0, Z+
     41e:	f0 81       	ld	r31, Z
     420:	e0 2d       	mov	r30, r0
     422:	94 81       	ldd	r25, Z+4	; 0x04
     424:	89 17       	cp	r24, r25
     426:	40 f5       	brcc	.+80     	; 0x478 <udc_update_iface_desc+0x6c>
     428:	e0 93 9a 21 	sts	0x219A, r30
     42c:	f0 93 9b 21 	sts	0x219B, r31
     430:	22 81       	ldd	r18, Z+2	; 0x02
     432:	33 81       	ldd	r19, Z+3	; 0x03
     434:	2e 0f       	add	r18, r30
     436:	3f 1f       	adc	r19, r31
     438:	e2 17       	cp	r30, r18
     43a:	f3 07       	cpc	r31, r19
     43c:	f8 f4       	brcc	.+62     	; 0x47c <udc_update_iface_desc+0x70>
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	94 30       	cpi	r25, 0x04	; 4
     442:	61 f4       	brne	.+24     	; 0x45c <udc_update_iface_desc+0x50>
     444:	92 81       	ldd	r25, Z+2	; 0x02
     446:	98 13       	cpse	r25, r24
     448:	09 c0       	rjmp	.+18     	; 0x45c <udc_update_iface_desc+0x50>
     44a:	93 81       	ldd	r25, Z+3	; 0x03
     44c:	96 13       	cpse	r25, r22
     44e:	06 c0       	rjmp	.+12     	; 0x45c <udc_update_iface_desc+0x50>
     450:	e0 93 9a 21 	sts	0x219A, r30
     454:	f0 93 9b 21 	sts	0x219B, r31
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	08 95       	ret
     45c:	90 81       	ld	r25, Z
     45e:	e9 0f       	add	r30, r25
     460:	f1 1d       	adc	r31, r1
     462:	e2 17       	cp	r30, r18
     464:	f3 07       	cpc	r31, r19
     466:	58 f3       	brcs	.-42     	; 0x43e <udc_update_iface_desc+0x32>
     468:	e0 93 9a 21 	sts	0x219A, r30
     46c:	f0 93 9b 21 	sts	0x219B, r31
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	08 95       	ret
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	08 95       	ret
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 95       	ret
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	08 95       	ret

00000480 <udc_iface_disable>:
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	c8 2f       	mov	r28, r24
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	be df       	rcall	.-132    	; 0x40c <udc_update_iface_desc>
     490:	18 2f       	mov	r17, r24
     492:	88 23       	and	r24, r24
     494:	81 f1       	breq	.+96     	; 0x4f6 <udc_iface_disable+0x76>
     496:	a0 91 9c 21 	lds	r26, 0x219C
     49a:	b0 91 9d 21 	lds	r27, 0x219D
     49e:	ec 2f       	mov	r30, r28
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	12 96       	adiw	r26, 0x02	; 2
     4a8:	8d 91       	ld	r24, X+
     4aa:	9c 91       	ld	r25, X
     4ac:	13 97       	sbiw	r26, 0x03	; 3
     4ae:	e8 0f       	add	r30, r24
     4b0:	f9 1f       	adc	r31, r25
     4b2:	e0 80       	ld	r14, Z
     4b4:	f1 80       	ldd	r15, Z+1	; 0x01
     4b6:	d7 01       	movw	r26, r14
     4b8:	16 96       	adiw	r26, 0x06	; 6
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	17 97       	sbiw	r26, 0x07	; 7
     4c0:	19 95       	eicall
     4c2:	68 2f       	mov	r22, r24
     4c4:	8c 2f       	mov	r24, r28
     4c6:	a2 df       	rcall	.-188    	; 0x40c <udc_update_iface_desc>
     4c8:	18 2f       	mov	r17, r24
     4ca:	88 23       	and	r24, r24
     4cc:	a1 f0       	breq	.+40     	; 0x4f6 <udc_iface_disable+0x76>
     4ce:	c0 91 9a 21 	lds	r28, 0x219A
     4d2:	d0 91 9b 21 	lds	r29, 0x219B
     4d6:	65 e0       	ldi	r22, 0x05	; 5
     4d8:	ce 01       	movw	r24, r28
     4da:	61 df       	rcall	.-318    	; 0x39e <udc_next_desc_in_iface>
     4dc:	ec 01       	movw	r28, r24
     4de:	89 2b       	or	r24, r25
     4e0:	21 f0       	breq	.+8      	; 0x4ea <udc_iface_disable+0x6a>
     4e2:	8a 81       	ldd	r24, Y+2	; 0x02
     4e4:	0e 94 6f 0b 	call	0x16de	; 0x16de <udd_ep_free>
     4e8:	f6 cf       	rjmp	.-20     	; 0x4d6 <udc_iface_disable+0x56>
     4ea:	d7 01       	movw	r26, r14
     4ec:	12 96       	adiw	r26, 0x02	; 2
     4ee:	ed 91       	ld	r30, X+
     4f0:	fc 91       	ld	r31, X
     4f2:	13 97       	sbiw	r26, 0x03	; 3
     4f4:	19 95       	eicall
     4f6:	81 2f       	mov	r24, r17
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	08 95       	ret

00000504 <udc_iface_enable>:
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	18 2f       	mov	r17, r24
     50c:	7f df       	rcall	.-258    	; 0x40c <udc_update_iface_desc>
     50e:	88 23       	and	r24, r24
     510:	39 f1       	breq	.+78     	; 0x560 <udc_iface_enable+0x5c>
     512:	c0 91 9a 21 	lds	r28, 0x219A
     516:	d0 91 9b 21 	lds	r29, 0x219B
     51a:	65 e0       	ldi	r22, 0x05	; 5
     51c:	ce 01       	movw	r24, r28
     51e:	3f df       	rcall	.-386    	; 0x39e <udc_next_desc_in_iface>
     520:	ec 01       	movw	r28, r24
     522:	89 2b       	or	r24, r25
     524:	41 f0       	breq	.+16     	; 0x536 <udc_iface_enable+0x32>
     526:	4c 81       	ldd	r20, Y+4	; 0x04
     528:	5d 81       	ldd	r21, Y+5	; 0x05
     52a:	6b 81       	ldd	r22, Y+3	; 0x03
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	fc d6       	rcall	.+3576   	; 0x1328 <udd_ep_alloc>
     530:	81 11       	cpse	r24, r1
     532:	f3 cf       	rjmp	.-26     	; 0x51a <udc_iface_enable+0x16>
     534:	15 c0       	rjmp	.+42     	; 0x560 <udc_iface_enable+0x5c>
     536:	a0 91 9c 21 	lds	r26, 0x219C
     53a:	b0 91 9d 21 	lds	r27, 0x219D
     53e:	e1 2f       	mov	r30, r17
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	ee 0f       	add	r30, r30
     544:	ff 1f       	adc	r31, r31
     546:	12 96       	adiw	r26, 0x02	; 2
     548:	8d 91       	ld	r24, X+
     54a:	9c 91       	ld	r25, X
     54c:	13 97       	sbiw	r26, 0x03	; 3
     54e:	e8 0f       	add	r30, r24
     550:	f9 1f       	adc	r31, r25
     552:	01 90       	ld	r0, Z+
     554:	f0 81       	ld	r31, Z
     556:	e0 2d       	mov	r30, r0
     558:	01 90       	ld	r0, Z+
     55a:	f0 81       	ld	r31, Z
     55c:	e0 2d       	mov	r30, r0
     55e:	19 95       	eicall
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	08 95       	ret

00000568 <udc_get_interface_desc>:
     568:	80 91 9a 21 	lds	r24, 0x219A
     56c:	90 91 9b 21 	lds	r25, 0x219B
     570:	08 95       	ret

00000572 <udc_start>:
     572:	5b c6       	rjmp	.+3254   	; 0x122a <udd_enable>
     574:	08 95       	ret

00000576 <udc_reset>:
     576:	cf 93       	push	r28
     578:	80 91 9e 21 	lds	r24, 0x219E
     57c:	88 23       	and	r24, r24
     57e:	c1 f0       	breq	.+48     	; 0x5b0 <udc_reset+0x3a>
     580:	e0 91 9c 21 	lds	r30, 0x219C
     584:	f0 91 9d 21 	lds	r31, 0x219D
     588:	01 90       	ld	r0, Z+
     58a:	f0 81       	ld	r31, Z
     58c:	e0 2d       	mov	r30, r0
     58e:	84 81       	ldd	r24, Z+4	; 0x04
     590:	88 23       	and	r24, r24
     592:	71 f0       	breq	.+28     	; 0x5b0 <udc_reset+0x3a>
     594:	c0 e0       	ldi	r28, 0x00	; 0
     596:	8c 2f       	mov	r24, r28
     598:	73 df       	rcall	.-282    	; 0x480 <udc_iface_disable>
     59a:	cf 5f       	subi	r28, 0xFF	; 255
     59c:	e0 91 9c 21 	lds	r30, 0x219C
     5a0:	f0 91 9d 21 	lds	r31, 0x219D
     5a4:	01 90       	ld	r0, Z+
     5a6:	f0 81       	ld	r31, Z
     5a8:	e0 2d       	mov	r30, r0
     5aa:	84 81       	ldd	r24, Z+4	; 0x04
     5ac:	c8 17       	cp	r28, r24
     5ae:	98 f3       	brcs	.-26     	; 0x596 <udc_reset+0x20>
     5b0:	10 92 9e 21 	sts	0x219E, r1
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	80 93 a2 21 	sts	0x21A2, r24
     5bc:	90 93 a3 21 	sts	0x21A3, r25
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
     5c4:	cf 93       	push	r28
	uint8_t iface_num;

	if (udc_num_configuration) {
     5c6:	80 91 9e 21 	lds	r24, 0x219E
     5ca:	88 23       	and	r24, r24
     5cc:	49 f1       	breq	.+82     	; 0x620 <udc_sof_notify+0x5c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     5ce:	a0 91 9c 21 	lds	r26, 0x219C
     5d2:	b0 91 9d 21 	lds	r27, 0x219D
     5d6:	ed 91       	ld	r30, X+
     5d8:	fc 91       	ld	r31, X
     5da:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     5dc:	84 81       	ldd	r24, Z+4	; 0x04
     5de:	88 23       	and	r24, r24
     5e0:	f9 f0       	breq	.+62     	; 0x620 <udc_sof_notify+0x5c>
     5e2:	c0 e0       	ldi	r28, 0x00	; 0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
     5e4:	ec 2f       	mov	r30, r28
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	12 96       	adiw	r26, 0x02	; 2
     5ee:	8d 91       	ld	r24, X+
     5f0:	9c 91       	ld	r25, X
     5f2:	13 97       	sbiw	r26, 0x03	; 3
     5f4:	e8 0f       	add	r30, r24
     5f6:	f9 1f       	adc	r31, r25
     5f8:	01 90       	ld	r0, Z+
     5fa:	f0 81       	ld	r31, Z
     5fc:	e0 2d       	mov	r30, r0
     5fe:	00 84       	ldd	r0, Z+8	; 0x08
     600:	f1 85       	ldd	r31, Z+9	; 0x09
     602:	e0 2d       	mov	r30, r0
     604:	30 97       	sbiw	r30, 0x00	; 0
     606:	09 f0       	breq	.+2      	; 0x60a <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
     608:	19 95       	eicall
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
     60a:	cf 5f       	subi	r28, 0xFF	; 255
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
     60c:	a0 91 9c 21 	lds	r26, 0x219C
     610:	b0 91 9d 21 	lds	r27, 0x219D
     614:	ed 91       	ld	r30, X+
     616:	fc 91       	ld	r31, X
     618:	11 97       	sbiw	r26, 0x01	; 1
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
     61a:	84 81       	ldd	r24, Z+4	; 0x04
     61c:	c8 17       	cp	r28, r24
     61e:	10 f3       	brcs	.-60     	; 0x5e4 <udc_sof_notify+0x20>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
     62c:	ea ed       	ldi	r30, 0xDA	; 218
     62e:	f4 e2       	ldi	r31, 0x24	; 36
     630:	12 86       	std	Z+10, r1	; 0x0a
     632:	13 86       	std	Z+11, r1	; 0x0b
	udd_g_ctrlreq.callback = NULL;
     634:	14 86       	std	Z+12, r1	; 0x0c
     636:	15 86       	std	Z+13, r1	; 0x0d
	udd_g_ctrlreq.over_under_run = NULL;
     638:	16 86       	std	Z+14, r1	; 0x0e
     63a:	17 86       	std	Z+15, r1	; 0x0f

	if (Udd_setup_is_in()) {
     63c:	80 81       	ld	r24, Z
     63e:	88 23       	and	r24, r24
     640:	0c f0       	brlt	.+2      	; 0x644 <udc_process_setup+0x20>
     642:	63 c2       	rjmp	.+1222   	; 0xb0a <udc_process_setup+0x4e6>
		if (udd_g_ctrlreq.req.wLength == 0) {
     644:	20 91 e0 24 	lds	r18, 0x24E0
     648:	30 91 e1 24 	lds	r19, 0x24E1
     64c:	21 15       	cp	r18, r1
     64e:	31 05       	cpc	r19, r1
     650:	09 f0       	breq	.+2      	; 0x654 <udc_process_setup+0x30>
     652:	56 c2       	rjmp	.+1196   	; 0xb00 <udc_process_setup+0x4dc>
     654:	51 c2       	rjmp	.+1186   	; 0xaf8 <udc_process_setup+0x4d4>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     656:	8f 71       	andi	r24, 0x1F	; 31
     658:	09 f0       	breq	.+2      	; 0x65c <udc_process_setup+0x38>
     65a:	a7 c0       	rjmp	.+334    	; 0x7aa <udc_process_setup+0x186>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     65c:	90 91 db 24 	lds	r25, 0x24DB
     660:	96 30       	cpi	r25, 0x06	; 6
     662:	79 f0       	breq	.+30     	; 0x682 <udc_process_setup+0x5e>
     664:	98 30       	cpi	r25, 0x08	; 8
     666:	09 f4       	brne	.+2      	; 0x66a <udc_process_setup+0x46>
     668:	96 c0       	rjmp	.+300    	; 0x796 <udc_process_setup+0x172>
     66a:	91 11       	cpse	r25, r1
     66c:	9e c0       	rjmp	.+316    	; 0x7aa <udc_process_setup+0x186>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
     66e:	22 30       	cpi	r18, 0x02	; 2
     670:	31 05       	cpc	r19, r1
     672:	09 f0       	breq	.+2      	; 0x676 <udc_process_setup+0x52>
     674:	ca c1       	rjmp	.+916    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
     676:	62 e0       	ldi	r22, 0x02	; 2
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	82 ea       	ldi	r24, 0xA2	; 162
     67c:	91 e2       	ldi	r25, 0x21	; 33
     67e:	4d d6       	rcall	.+3226   	; 0x131a <udd_set_setup_payload>
     680:	4d c2       	rjmp	.+1178   	; 0xb1c <udc_process_setup+0x4f8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
     682:	80 91 dc 24 	lds	r24, 0x24DC
     686:	90 91 dd 24 	lds	r25, 0x24DD

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
     68a:	29 2f       	mov	r18, r25
     68c:	33 27       	eor	r19, r19
     68e:	22 30       	cpi	r18, 0x02	; 2
     690:	31 05       	cpc	r19, r1
     692:	a9 f0       	breq	.+42     	; 0x6be <udc_process_setup+0x9a>
     694:	24 f4       	brge	.+8      	; 0x69e <udc_process_setup+0x7a>
     696:	21 30       	cpi	r18, 0x01	; 1
     698:	31 05       	cpc	r19, r1
     69a:	41 f0       	breq	.+16     	; 0x6ac <udc_process_setup+0x88>
     69c:	ad c1       	rjmp	.+858    	; 0x9f8 <udc_process_setup+0x3d4>
     69e:	23 30       	cpi	r18, 0x03	; 3
     6a0:	31 05       	cpc	r19, r1
     6a2:	d9 f1       	breq	.+118    	; 0x71a <udc_process_setup+0xf6>
     6a4:	2f 30       	cpi	r18, 0x0F	; 15
     6a6:	31 05       	cpc	r19, r1
     6a8:	51 f1       	breq	.+84     	; 0x6fe <udc_process_setup+0xda>
     6aa:	a6 c1       	rjmp	.+844    	; 0x9f8 <udc_process_setup+0x3d4>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
     6ac:	80 91 90 20 	lds	r24, 0x2090
     6b0:	90 91 91 20 	lds	r25, 0x2091
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
     6b4:	dc 01       	movw	r26, r24
     6b6:	6c 91       	ld	r22, X
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	2f d6       	rcall	.+3166   	; 0x131a <udd_set_setup_payload>
     6bc:	5d c0       	rjmp	.+186    	; 0x778 <udc_process_setup+0x154>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
     6be:	e0 91 90 20 	lds	r30, 0x2090
     6c2:	f0 91 91 20 	lds	r31, 0x2091
     6c6:	21 89       	ldd	r18, Z+17	; 0x11
     6c8:	82 17       	cp	r24, r18
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <udc_process_setup+0xaa>
     6cc:	9e c1       	rjmp	.+828    	; 0xa0a <udc_process_setup+0x3e6>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
     6ce:	99 27       	eor	r25, r25
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	e0 91 92 20 	lds	r30, 0x2092
     6dc:	f0 91 93 20 	lds	r31, 0x2093
     6e0:	e8 0f       	add	r30, r24
     6e2:	f9 1f       	adc	r31, r25
     6e4:	80 81       	ld	r24, Z
     6e6:	91 81       	ldd	r25, Z+1	; 0x01
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
     6e8:	fc 01       	movw	r30, r24
     6ea:	62 81       	ldd	r22, Z+2	; 0x02
     6ec:	73 81       	ldd	r23, Z+3	; 0x03
     6ee:	15 d6       	rcall	.+3114   	; 0x131a <udd_set_setup_payload>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
     6f0:	e0 91 e2 24 	lds	r30, 0x24E2
     6f4:	f0 91 e3 24 	lds	r31, 0x24E3
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	81 83       	std	Z+1, r24	; 0x01
     6fc:	3d c0       	rjmp	.+122    	; 0x778 <udc_process_setup+0x154>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
     6fe:	80 91 94 20 	lds	r24, 0x2094
     702:	90 91 95 20 	lds	r25, 0x2095
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	09 f4       	brne	.+2      	; 0x70c <udc_process_setup+0xe8>
     70a:	7f c1       	rjmp	.+766    	; 0xa0a <udc_process_setup+0x3e6>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
     70c:	dc 01       	movw	r26, r24
     70e:	12 96       	adiw	r26, 0x02	; 2
     710:	6d 91       	ld	r22, X+
     712:	7c 91       	ld	r23, X
     714:	13 97       	sbiw	r26, 0x03	; 3
     716:	01 d6       	rcall	.+3074   	; 0x131a <udd_set_setup_payload>
     718:	2f c0       	rjmp	.+94     	; 0x778 <udc_process_setup+0x154>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
     71a:	99 27       	eor	r25, r25
     71c:	81 30       	cpi	r24, 0x01	; 1
     71e:	91 05       	cpc	r25, r1
     720:	91 f0       	breq	.+36     	; 0x746 <udc_process_setup+0x122>
     722:	58 f0       	brcs	.+22     	; 0x73a <udc_process_setup+0x116>
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	91 05       	cpc	r25, r1
     728:	09 f4       	brne	.+2      	; 0x72c <udc_process_setup+0x108>
     72a:	f4 c1       	rjmp	.+1000   	; 0xb14 <udc_process_setup+0x4f0>
     72c:	03 97       	sbiw	r24, 0x03	; 3
     72e:	09 f0       	breq	.+2      	; 0x732 <udc_process_setup+0x10e>
     730:	6c c1       	rjmp	.+728    	; 0xa0a <udc_process_setup+0x3e6>
		str = udc_string_product_name;
		break;
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
     732:	29 e0       	ldi	r18, 0x09	; 9
		str = udc_get_string_serial_name();
     734:	8c ed       	ldi	r24, 0xDC	; 220
     736:	90 e2       	ldi	r25, 0x20	; 32
     738:	09 c0       	rjmp	.+18     	; 0x74c <udc_process_setup+0x128>
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
     73a:	64 e0       	ldi	r22, 0x04	; 4
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	8c e8       	ldi	r24, 0x8C	; 140
     740:	90 e2       	ldi	r25, 0x20	; 32
     742:	eb d5       	rcall	.+3030   	; 0x131a <udd_set_setup_payload>
     744:	19 c0       	rjmp	.+50     	; 0x778 <udc_process_setup+0x154>
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
		str = udc_string_manufacturer_name;
     746:	8f e7       	ldi	r24, 0x7F	; 127
     748:	90 e2       	ldi	r25, 0x20	; 32
				sizeof(udc_string_desc_languageid));
		break;

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
     74a:	2b e0       	ldi	r18, 0x0B	; 11
     74c:	38 2f       	mov	r19, r24
     74e:	a2 e4       	ldi	r26, 0x42	; 66
     750:	b0 e2       	ldi	r27, 0x20	; 32
     752:	e8 2f       	mov	r30, r24
     754:	f9 2f       	mov	r31, r25
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
     756:	81 91       	ld	r24, Z+
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	8d 93       	st	X+, r24
     75c:	9d 93       	st	X+, r25
     75e:	8e 2f       	mov	r24, r30
     760:	83 1b       	sub	r24, r19
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
     762:	82 17       	cp	r24, r18
     764:	c0 f3       	brcs	.-16     	; 0x756 <udc_process_setup+0x132>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
     766:	62 2f       	mov	r22, r18
     768:	66 0f       	add	r22, r22
     76a:	6e 5f       	subi	r22, 0xFE	; 254
     76c:	60 93 40 20 	sts	0x2040, r22
		udd_set_setup_payload(
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e4       	ldi	r24, 0x40	; 64
     774:	90 e2       	ldi	r25, 0x20	; 32
     776:	d1 d5       	rcall	.+2978   	; 0x131a <udd_set_setup_payload>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
     778:	ea ed       	ldi	r30, 0xDA	; 218
     77a:	f4 e2       	ldi	r31, 0x24	; 36
     77c:	86 81       	ldd	r24, Z+6	; 0x06
     77e:	97 81       	ldd	r25, Z+7	; 0x07
     780:	22 85       	ldd	r18, Z+10	; 0x0a
     782:	33 85       	ldd	r19, Z+11	; 0x0b
     784:	82 17       	cp	r24, r18
     786:	93 07       	cpc	r25, r19
     788:	08 f0       	brcs	.+2      	; 0x78c <udc_process_setup+0x168>
     78a:	c8 c1       	rjmp	.+912    	; 0xb1c <udc_process_setup+0x4f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
     78c:	80 93 e4 24 	sts	0x24E4, r24
     790:	90 93 e5 24 	sts	0x24E5, r25
     794:	c3 c1       	rjmp	.+902    	; 0xb1c <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
     796:	21 30       	cpi	r18, 0x01	; 1
     798:	31 05       	cpc	r19, r1
     79a:	09 f0       	breq	.+2      	; 0x79e <udc_process_setup+0x17a>
     79c:	36 c1       	rjmp	.+620    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	8e e9       	ldi	r24, 0x9E	; 158
     7a4:	91 e2       	ldi	r25, 0x21	; 33
     7a6:	b9 d5       	rcall	.+2930   	; 0x131a <udd_set_setup_payload>
     7a8:	b9 c1       	rjmp	.+882    	; 0xb1c <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	e1 f5       	brne	.+120    	; 0x826 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     7ae:	90 91 db 24 	lds	r25, 0x24DB
     7b2:	9a 30       	cpi	r25, 0x0A	; 10
     7b4:	c1 f5       	brne	.+112    	; 0x826 <udc_process_setup+0x202>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
     7b6:	21 30       	cpi	r18, 0x01	; 1
     7b8:	31 05       	cpc	r19, r1
     7ba:	09 f0       	breq	.+2      	; 0x7be <udc_process_setup+0x19a>
     7bc:	26 c1       	rjmp	.+588    	; 0xa0a <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     7be:	80 91 9e 21 	lds	r24, 0x219E
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <udc_process_setup+0x1a4>
     7c6:	21 c1       	rjmp	.+578    	; 0xa0a <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     7c8:	c0 91 de 24 	lds	r28, 0x24DE
     7cc:	d0 91 df 24 	lds	r29, 0x24DF
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     7d0:	00 91 9c 21 	lds	r16, 0x219C
     7d4:	10 91 9d 21 	lds	r17, 0x219D
     7d8:	d8 01       	movw	r26, r16
     7da:	ed 91       	ld	r30, X+
     7dc:	fc 91       	ld	r31, X
     7de:	84 81       	ldd	r24, Z+4	; 0x04
     7e0:	c8 17       	cp	r28, r24
     7e2:	08 f0       	brcs	.+2      	; 0x7e6 <udc_process_setup+0x1c2>
     7e4:	12 c1       	rjmp	.+548    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	8c 2f       	mov	r24, r28
     7ea:	10 de       	rcall	.-992    	; 0x40c <udc_update_iface_desc>
     7ec:	88 23       	and	r24, r24
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <udc_process_setup+0x1ce>
     7f0:	0c c1       	rjmp	.+536    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     7f2:	ce 01       	movw	r24, r28
     7f4:	99 27       	eor	r25, r25
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	d8 01       	movw	r26, r16
     7fc:	12 96       	adiw	r26, 0x02	; 2
     7fe:	ed 91       	ld	r30, X+
     800:	fc 91       	ld	r31, X
     802:	13 97       	sbiw	r26, 0x03	; 3
     804:	e8 0f       	add	r30, r24
     806:	f9 1f       	adc	r31, r25
	udc_iface_setting = udi_api->getsetting();
     808:	01 90       	ld	r0, Z+
     80a:	f0 81       	ld	r31, Z
     80c:	e0 2d       	mov	r30, r0
     80e:	86 81       	ldd	r24, Z+6	; 0x06
     810:	97 81       	ldd	r25, Z+7	; 0x07
     812:	fc 01       	movw	r30, r24
     814:	19 95       	eicall
     816:	80 93 a0 21 	sts	0x21A0, r24

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	91 e2       	ldi	r25, 0x21	; 33
     822:	7b d5       	rcall	.+2806   	; 0x131a <udd_set_setup_payload>
     824:	7b c1       	rjmp	.+758    	; 0xb1c <udc_process_setup+0x4f8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	09 f0       	breq	.+2      	; 0x82c <udc_process_setup+0x208>
     82a:	ef c0       	rjmp	.+478    	; 0xa0a <udc_process_setup+0x3e6>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     82c:	80 91 db 24 	lds	r24, 0x24DB
     830:	81 11       	cpse	r24, r1
     832:	e4 c0       	rjmp	.+456    	; 0x9fc <udc_process_setup+0x3d8>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
     834:	22 30       	cpi	r18, 0x02	; 2
     836:	31 05       	cpc	r19, r1
     838:	09 f0       	breq	.+2      	; 0x83c <udc_process_setup+0x218>
     83a:	e7 c0       	rjmp	.+462    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
     83c:	80 91 de 24 	lds	r24, 0x24DE
     840:	fb d5       	rcall	.+3062   	; 0x1438 <udd_ep_is_halted>
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	80 93 98 21 	sts	0x2198, r24
     848:	90 93 99 21 	sts	0x2199, r25
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
     84c:	62 e0       	ldi	r22, 0x02	; 2
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	88 e9       	ldi	r24, 0x98	; 152
     852:	91 e2       	ldi	r25, 0x21	; 33
     854:	62 d5       	rcall	.+2756   	; 0x131a <udd_set_setup_payload>
     856:	62 c1       	rjmp	.+708    	; 0xb1c <udc_process_setup+0x4f8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
     858:	8f 71       	andi	r24, 0x1F	; 31
     85a:	09 f0       	breq	.+2      	; 0x85e <udc_process_setup+0x23a>
     85c:	83 c0       	rjmp	.+262    	; 0x964 <udc_process_setup+0x340>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
     85e:	90 91 db 24 	lds	r25, 0x24DB
     862:	93 30       	cpi	r25, 0x03	; 3
     864:	09 f4       	brne	.+2      	; 0x868 <udc_process_setup+0x244>
     866:	cc c0       	rjmp	.+408    	; 0xa00 <udc_process_setup+0x3dc>
     868:	18 f4       	brcc	.+6      	; 0x870 <udc_process_setup+0x24c>
     86a:	91 30       	cpi	r25, 0x01	; 1
     86c:	a1 f0       	breq	.+40     	; 0x896 <udc_process_setup+0x272>
     86e:	7a c0       	rjmp	.+244    	; 0x964 <udc_process_setup+0x340>
     870:	95 30       	cpi	r25, 0x05	; 5
     872:	19 f0       	breq	.+6      	; 0x87a <udc_process_setup+0x256>
     874:	99 30       	cpi	r25, 0x09	; 9
     876:	39 f1       	breq	.+78     	; 0x8c6 <udc_process_setup+0x2a2>
     878:	75 c0       	rjmp	.+234    	; 0x964 <udc_process_setup+0x340>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     87a:	80 91 e0 24 	lds	r24, 0x24E0
     87e:	90 91 e1 24 	lds	r25, 0x24E1
     882:	89 2b       	or	r24, r25
     884:	09 f0       	breq	.+2      	; 0x888 <udc_process_setup+0x264>
     886:	c1 c0       	rjmp	.+386    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	92 e0       	ldi	r25, 0x02	; 2
     88c:	80 93 e6 24 	sts	0x24E6, r24
     890:	90 93 e7 24 	sts	0x24E7, r25
     894:	43 c1       	rjmp	.+646    	; 0xb1c <udc_process_setup+0x4f8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     896:	80 91 e0 24 	lds	r24, 0x24E0
     89a:	90 91 e1 24 	lds	r25, 0x24E1
     89e:	89 2b       	or	r24, r25
     8a0:	09 f0       	breq	.+2      	; 0x8a4 <udc_process_setup+0x280>
     8a2:	b3 c0       	rjmp	.+358    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
     8a4:	80 91 dc 24 	lds	r24, 0x24DC
     8a8:	90 91 dd 24 	lds	r25, 0x24DD
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <udc_process_setup+0x28e>
     8b0:	ac c0       	rjmp	.+344    	; 0xa0a <udc_process_setup+0x3e6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
     8b2:	80 91 a2 21 	lds	r24, 0x21A2
     8b6:	90 91 a3 21 	lds	r25, 0x21A3
     8ba:	8d 7f       	andi	r24, 0xFD	; 253
     8bc:	80 93 a2 21 	sts	0x21A2, r24
     8c0:	90 93 a3 21 	sts	0x21A3, r25
     8c4:	2b c1       	rjmp	.+598    	; 0xb1c <udc_process_setup+0x4f8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
     8c6:	80 91 e0 24 	lds	r24, 0x24E0
     8ca:	90 91 e1 24 	lds	r25, 0x24E1
     8ce:	89 2b       	or	r24, r25
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <udc_process_setup+0x2b0>
     8d2:	9b c0       	rjmp	.+310    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
     8d4:	1f d5       	rcall	.+2622   	; 0x1314 <udd_getaddress>
     8d6:	88 23       	and	r24, r24
     8d8:	09 f4       	brne	.+2      	; 0x8dc <udc_process_setup+0x2b8>
     8da:	97 c0       	rjmp	.+302    	; 0xa0a <udc_process_setup+0x3e6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     8dc:	20 91 dc 24 	lds	r18, 0x24DC
     8e0:	30 91 dd 24 	lds	r19, 0x24DD
     8e4:	33 27       	eor	r19, r19
				udc_config.confdev_lsfs->bNumConfigurations) {
     8e6:	e0 91 90 20 	lds	r30, 0x2090
     8ea:	f0 91 91 20 	lds	r31, 0x2091
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
     8ee:	81 89       	ldd	r24, Z+17	; 0x11
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	08 f4       	brcc	.+2      	; 0x8fa <udc_process_setup+0x2d6>
     8f8:	88 c0       	rjmp	.+272    	; 0xa0a <udc_process_setup+0x3e6>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
     8fa:	3d de       	rcall	.-902    	; 0x576 <udc_reset>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
     8fc:	80 91 dc 24 	lds	r24, 0x24DC
     900:	90 91 dd 24 	lds	r25, 0x24DD
     904:	80 93 9e 21 	sts	0x219E, r24
	if (udc_num_configuration == 0) {
     908:	88 23       	and	r24, r24
     90a:	09 f4       	brne	.+2      	; 0x90e <udc_process_setup+0x2ea>
     90c:	07 c1       	rjmp	.+526    	; 0xb1c <udc_process_setup+0x4f8>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
     90e:	99 27       	eor	r25, r25
     910:	81 50       	subi	r24, 0x01	; 1
     912:	90 4c       	sbci	r25, 0xC0	; 192
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	e0 91 92 20 	lds	r30, 0x2092
     920:	f0 91 93 20 	lds	r31, 0x2093
     924:	e8 0f       	add	r30, r24
     926:	f9 1f       	adc	r31, r25
     928:	e0 93 9c 21 	sts	0x219C, r30
     92c:	f0 93 9d 21 	sts	0x219D, r31
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     930:	01 90       	ld	r0, Z+
     932:	f0 81       	ld	r31, Z
     934:	e0 2d       	mov	r30, r0
     936:	84 81       	ldd	r24, Z+4	; 0x04
     938:	88 23       	and	r24, r24
     93a:	09 f4       	brne	.+2      	; 0x93e <udc_process_setup+0x31a>
     93c:	ef c0       	rjmp	.+478    	; 0xb1c <udc_process_setup+0x4f8>
     93e:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	8c 2f       	mov	r24, r28
     944:	df dd       	rcall	.-1090   	; 0x504 <udc_iface_enable>
     946:	88 23       	and	r24, r24
     948:	09 f4       	brne	.+2      	; 0x94c <udc_process_setup+0x328>
     94a:	5f c0       	rjmp	.+190    	; 0xa0a <udc_process_setup+0x3e6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     94c:	cf 5f       	subi	r28, 0xFF	; 255
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     94e:	e0 91 9c 21 	lds	r30, 0x219C
     952:	f0 91 9d 21 	lds	r31, 0x219D
     956:	01 90       	ld	r0, Z+
     958:	f0 81       	ld	r31, Z
     95a:	e0 2d       	mov	r30, r0
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	c8 17       	cp	r28, r24
     960:	78 f3       	brcs	.-34     	; 0x940 <udc_process_setup+0x31c>
     962:	dc c0       	rjmp	.+440    	; 0xb1c <udc_process_setup+0x4f8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	e1 f4       	brne	.+56     	; 0x9a0 <udc_process_setup+0x37c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
     968:	90 91 db 24 	lds	r25, 0x24DB
     96c:	9b 30       	cpi	r25, 0x0B	; 11
     96e:	c1 f4       	brne	.+48     	; 0x9a0 <udc_process_setup+0x37c>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
     970:	80 91 e0 24 	lds	r24, 0x24E0
     974:	90 91 e1 24 	lds	r25, 0x24E1
     978:	89 2b       	or	r24, r25
     97a:	09 f0       	breq	.+2      	; 0x97e <udc_process_setup+0x35a>
     97c:	46 c0       	rjmp	.+140    	; 0xa0a <udc_process_setup+0x3e6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
     97e:	80 91 9e 21 	lds	r24, 0x219E
     982:	88 23       	and	r24, r24
     984:	09 f4       	brne	.+2      	; 0x988 <udc_process_setup+0x364>
     986:	41 c0       	rjmp	.+130    	; 0xa0a <udc_process_setup+0x3e6>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     988:	ea ed       	ldi	r30, 0xDA	; 218
     98a:	f4 e2       	ldi	r31, 0x24	; 36
     98c:	c4 81       	ldd	r28, Z+4	; 0x04
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
     98e:	d2 81       	ldd	r29, Z+2	; 0x02

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
     990:	8c 2f       	mov	r24, r28
     992:	76 dd       	rcall	.-1300   	; 0x480 <udc_iface_disable>
     994:	88 23       	and	r24, r24
     996:	c9 f1       	breq	.+114    	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
     998:	6d 2f       	mov	r22, r29
     99a:	8c 2f       	mov	r24, r28
     99c:	b3 dd       	rcall	.-1178   	; 0x504 <udc_iface_enable>
     99e:	33 c0       	rjmp	.+102    	; 0xa06 <udc_process_setup+0x3e2>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
     9a0:	82 30       	cpi	r24, 0x02	; 2
     9a2:	99 f5       	brne	.+102    	; 0xa0a <udc_process_setup+0x3e6>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
     9a4:	80 91 db 24 	lds	r24, 0x24DB
     9a8:	81 30       	cpi	r24, 0x01	; 1
     9aa:	19 f0       	breq	.+6      	; 0x9b2 <udc_process_setup+0x38e>
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	89 f0       	breq	.+34     	; 0x9d2 <udc_process_setup+0x3ae>
     9b0:	29 c0       	rjmp	.+82     	; 0xa04 <udc_process_setup+0x3e0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     9b2:	80 91 e0 24 	lds	r24, 0x24E0
     9b6:	90 91 e1 24 	lds	r25, 0x24E1
     9ba:	89 2b       	or	r24, r25
     9bc:	31 f5       	brne	.+76     	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     9be:	80 91 dc 24 	lds	r24, 0x24DC
     9c2:	90 91 dd 24 	lds	r25, 0x24DD
     9c6:	89 2b       	or	r24, r25
     9c8:	01 f5       	brne	.+64     	; 0xa0a <udc_process_setup+0x3e6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     9ca:	80 91 de 24 	lds	r24, 0x24DE
     9ce:	4f d5       	rcall	.+2718   	; 0x146e <udd_ep_clear_halt>
     9d0:	1a c0       	rjmp	.+52     	; 0xa06 <udc_process_setup+0x3e2>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
     9d2:	80 91 e0 24 	lds	r24, 0x24E0
     9d6:	90 91 e1 24 	lds	r25, 0x24E1
     9da:	89 2b       	or	r24, r25
     9dc:	b1 f4       	brne	.+44     	; 0xa0a <udc_process_setup+0x3e6>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
     9de:	80 91 dc 24 	lds	r24, 0x24DC
     9e2:	90 91 dd 24 	lds	r25, 0x24DD
     9e6:	89 2b       	or	r24, r25
     9e8:	81 f4       	brne	.+32     	; 0xa0a <udc_process_setup+0x3e6>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
     9ea:	ca ed       	ldi	r28, 0xDA	; 218
     9ec:	d4 e2       	ldi	r29, 0x24	; 36
     9ee:	8c 81       	ldd	r24, Y+4	; 0x04
     9f0:	2d d6       	rcall	.+3162   	; 0x164c <udd_ep_abort>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
     9f2:	8c 81       	ldd	r24, Y+4	; 0x04
     9f4:	90 d6       	rcall	.+3360   	; 0x1716 <udd_ep_set_halt>
     9f6:	07 c0       	rjmp	.+14     	; 0xa06 <udc_process_setup+0x3e2>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <udc_process_setup+0x3e2>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <udc_process_setup+0x3e2>
				break;
			}
		}
#endif
	}
	return false;
     a04:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
     a06:	81 11       	cpse	r24, r1
     a08:	8a c0       	rjmp	.+276    	; 0xb1e <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
     a0a:	80 91 da 24 	lds	r24, 0x24DA
     a0e:	8f 71       	andi	r24, 0x1F	; 31
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	71 f5       	brne	.+92     	; 0xa70 <udc_process_setup+0x44c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     a14:	80 91 9e 21 	lds	r24, 0x219E
     a18:	88 23       	and	r24, r24
     a1a:	51 f1       	breq	.+84     	; 0xa70 <udc_process_setup+0x44c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
     a1c:	00 91 de 24 	lds	r16, 0x24DE
     a20:	10 91 df 24 	lds	r17, 0x24DF
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     a24:	c0 91 9c 21 	lds	r28, 0x219C
     a28:	d0 91 9d 21 	lds	r29, 0x219D
     a2c:	e8 81       	ld	r30, Y
     a2e:	f9 81       	ldd	r31, Y+1	; 0x01
     a30:	84 81       	ldd	r24, Z+4	; 0x04
     a32:	08 17       	cp	r16, r24
     a34:	e8 f4       	brcc	.+58     	; 0xa70 <udc_process_setup+0x44c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	80 2f       	mov	r24, r16
     a3a:	e8 dc       	rcall	.-1584   	; 0x40c <udc_update_iface_desc>
     a3c:	88 23       	and	r24, r24
     a3e:	c1 f0       	breq	.+48     	; 0xa70 <udc_process_setup+0x44c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
     a40:	f8 01       	movw	r30, r16
     a42:	ff 27       	eor	r31, r31
     a44:	cf 01       	movw	r24, r30
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	ea 81       	ldd	r30, Y+2	; 0x02
     a4c:	fb 81       	ldd	r31, Y+3	; 0x03
     a4e:	e8 0f       	add	r30, r24
     a50:	f9 1f       	adc	r31, r25
     a52:	c0 81       	ld	r28, Z
     a54:	d1 81       	ldd	r29, Z+1	; 0x01
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     a56:	ee 81       	ldd	r30, Y+6	; 0x06
     a58:	ff 81       	ldd	r31, Y+7	; 0x07
     a5a:	19 95       	eicall
     a5c:	68 2f       	mov	r22, r24
     a5e:	80 2f       	mov	r24, r16
     a60:	d5 dc       	rcall	.-1622   	; 0x40c <udc_update_iface_desc>
     a62:	88 23       	and	r24, r24
     a64:	29 f0       	breq	.+10     	; 0xa70 <udc_process_setup+0x44c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
     a66:	ec 81       	ldd	r30, Y+4	; 0x04
     a68:	fd 81       	ldd	r31, Y+5	; 0x05
     a6a:	19 95       	eicall
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
     a6c:	81 11       	cpse	r24, r1
     a6e:	57 c0       	rjmp	.+174    	; 0xb1e <udc_process_setup+0x4fa>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
     a70:	80 91 da 24 	lds	r24, 0x24DA
     a74:	8f 71       	andi	r24, 0x1F	; 31
     a76:	82 30       	cpi	r24, 0x02	; 2
     a78:	09 f0       	breq	.+2      	; 0xa7c <udc_process_setup+0x458>
     a7a:	40 c0       	rjmp	.+128    	; 0xafc <udc_process_setup+0x4d8>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
     a7c:	80 91 9e 21 	lds	r24, 0x219E
     a80:	88 23       	and	r24, r24
     a82:	b1 f1       	breq	.+108    	; 0xaf0 <udc_process_setup+0x4cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     a84:	a0 91 9c 21 	lds	r26, 0x219C
     a88:	b0 91 9d 21 	lds	r27, 0x219D
     a8c:	ed 91       	ld	r30, X+
     a8e:	fc 91       	ld	r31, X
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	84 81       	ldd	r24, Z+4	; 0x04
     a94:	88 23       	and	r24, r24
     a96:	71 f1       	breq	.+92     	; 0xaf4 <udc_process_setup+0x4d0>
     a98:	c0 e0       	ldi	r28, 0x00	; 0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
     a9a:	ec 2f       	mov	r30, r28
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	ee 0f       	add	r30, r30
     aa0:	ff 1f       	adc	r31, r31
     aa2:	12 96       	adiw	r26, 0x02	; 2
     aa4:	8d 91       	ld	r24, X+
     aa6:	9c 91       	ld	r25, X
     aa8:	13 97       	sbiw	r26, 0x03	; 3
     aaa:	e8 0f       	add	r30, r24
     aac:	f9 1f       	adc	r31, r25
     aae:	00 81       	ld	r16, Z
     ab0:	11 81       	ldd	r17, Z+1	; 0x01
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
     ab2:	d8 01       	movw	r26, r16
     ab4:	16 96       	adiw	r26, 0x06	; 6
     ab6:	ed 91       	ld	r30, X+
     ab8:	fc 91       	ld	r31, X
     aba:	17 97       	sbiw	r26, 0x07	; 7
     abc:	19 95       	eicall
     abe:	68 2f       	mov	r22, r24
     ac0:	8c 2f       	mov	r24, r28
     ac2:	a4 dc       	rcall	.-1720   	; 0x40c <udc_update_iface_desc>
     ac4:	88 23       	and	r24, r24
     ac6:	59 f1       	breq	.+86     	; 0xb1e <udc_process_setup+0x4fa>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
     ac8:	d8 01       	movw	r26, r16
     aca:	14 96       	adiw	r26, 0x04	; 4
     acc:	ed 91       	ld	r30, X+
     ace:	fc 91       	ld	r31, X
     ad0:	15 97       	sbiw	r26, 0x05	; 5
     ad2:	19 95       	eicall
     ad4:	81 11       	cpse	r24, r1
     ad6:	23 c0       	rjmp	.+70     	; 0xb1e <udc_process_setup+0x4fa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
     ad8:	cf 5f       	subi	r28, 0xFF	; 255
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
     ada:	a0 91 9c 21 	lds	r26, 0x219C
     ade:	b0 91 9d 21 	lds	r27, 0x219D
     ae2:	ed 91       	ld	r30, X+
     ae4:	fc 91       	ld	r31, X
     ae6:	11 97       	sbiw	r26, 0x01	; 1
     ae8:	94 81       	ldd	r25, Z+4	; 0x04
     aea:	c9 17       	cp	r28, r25
     aec:	b0 f2       	brcs	.-84     	; 0xa9a <udc_process_setup+0x476>
     aee:	17 c0       	rjmp	.+46     	; 0xb1e <udc_process_setup+0x4fa>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	15 c0       	rjmp	.+42     	; 0xb1e <udc_process_setup+0x4fa>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	13 c0       	rjmp	.+38     	; 0xb1e <udc_process_setup+0x4fa>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	11 c0       	rjmp	.+34     	; 0xb1e <udc_process_setup+0x4fa>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0f c0       	rjmp	.+30     	; 0xb1e <udc_process_setup+0x4fa>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
     b00:	98 2f       	mov	r25, r24
     b02:	90 76       	andi	r25, 0x60	; 96
     b04:	09 f0       	breq	.+2      	; 0xb08 <udc_process_setup+0x4e4>
     b06:	81 cf       	rjmp	.-254    	; 0xa0a <udc_process_setup+0x3e6>
     b08:	a6 cd       	rjmp	.-1204   	; 0x656 <udc_process_setup+0x32>
     b0a:	98 2f       	mov	r25, r24
     b0c:	90 76       	andi	r25, 0x60	; 96
     b0e:	09 f0       	breq	.+2      	; 0xb12 <udc_process_setup+0x4ee>
     b10:	7c cf       	rjmp	.-264    	; 0xa0a <udc_process_setup+0x3e6>
     b12:	a2 ce       	rjmp	.-700    	; 0x858 <udc_process_setup+0x234>
		str = udc_string_manufacturer_name;
		break;
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
     b14:	24 e1       	ldi	r18, 0x14	; 20
		str = udc_string_product_name;
     b16:	8a e6       	ldi	r24, 0x6A	; 106
     b18:	90 e2       	ldi	r25, 0x20	; 32
     b1a:	18 ce       	rjmp	.-976    	; 0x74c <udc_process_setup+0x128>
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
			return true;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	ec 01       	movw	r28, r24
     b3a:	6a 01       	movw	r12, r20
     b3c:	7b 01       	movw	r14, r22
     b3e:	db 01       	movw	r26, r22
     b40:	ca 01       	movw	r24, r20
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	a1 09       	sbc	r26, r1
     b46:	b1 09       	sbc	r27, r1

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
     b48:	bc 01       	movw	r22, r24
     b4a:	cd 01       	movw	r24, r26
     b4c:	60 0f       	add	r22, r16
     b4e:	71 1f       	adc	r23, r17
     b50:	82 1f       	adc	r24, r18
     b52:	93 1f       	adc	r25, r19
     b54:	a7 01       	movw	r20, r14
     b56:	96 01       	movw	r18, r12
     b58:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <__udivmodsi4>

	if (divisor > 128) {
     b5c:	21 38       	cpi	r18, 0x81	; 129
     b5e:	31 05       	cpc	r19, r1
     b60:	41 05       	cpc	r20, r1
     b62:	51 05       	cpc	r21, r1
     b64:	f8 f4       	brcc	.+62     	; 0xba4 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
     b66:	21 34       	cpi	r18, 0x41	; 65
     b68:	60 f4       	brcc	.+24     	; 0xb82 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
     b6a:	21 32       	cpi	r18, 0x21	; 33
     b6c:	60 f4       	brcc	.+24     	; 0xb86 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
     b6e:	21 31       	cpi	r18, 0x11	; 17
     b70:	60 f4       	brcc	.+24     	; 0xb8a <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
     b72:	29 30       	cpi	r18, 0x09	; 9
     b74:	60 f4       	brcc	.+24     	; 0xb8e <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
     b76:	25 30       	cpi	r18, 0x05	; 5
     b78:	60 f4       	brcc	.+24     	; 0xb92 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
     b7a:	23 30       	cpi	r18, 0x03	; 3
     b7c:	60 f4       	brcc	.+24     	; 0xb96 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
     b7e:	80 e8       	ldi	r24, 0x80	; 128
     b80:	0b c0       	rjmp	.+22     	; 0xb98 <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	09 c0       	rjmp	.+18     	; 0xb98 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	07 c0       	rjmp	.+14     	; 0xb98 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
     b8a:	82 e8       	ldi	r24, 0x82	; 130
     b8c:	05 c0       	rjmp	.+10     	; 0xb98 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
     b92:	81 e8       	ldi	r24, 0x81	; 129
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
     b96:	80 e0       	ldi	r24, 0x00	; 0
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
     b98:	98 81       	ld	r25, Y
     b9a:	9c 77       	andi	r25, 0x7C	; 124
     b9c:	98 2b       	or	r25, r24
     b9e:	98 83       	st	Y, r25

	return 1;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
     ba4:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	0f 91       	pop	r16
     bae:	ff 90       	pop	r15
     bb0:	ef 90       	pop	r14
     bb2:	df 90       	pop	r13
     bb4:	cf 90       	pop	r12
     bb6:	08 95       	ret

00000bb8 <udd_sleep_mode>:
	} else {
		// endpoint not halted then call directly callback
		callback();
	}
	return true;
}
     bb8:	81 11       	cpse	r24, r1
     bba:	22 c0       	rjmp	.+68     	; 0xc00 <udd_sleep_mode+0x48>
     bbc:	90 91 98 22 	lds	r25, 0x2298
     bc0:	99 23       	and	r25, r25
     bc2:	d9 f0       	breq	.+54     	; 0xbfa <udd_sleep_mode+0x42>
     bc4:	90 91 eb 24 	lds	r25, 0x24EB
     bc8:	91 11       	cpse	r25, r1
     bca:	01 c0       	rjmp	.+2      	; 0xbce <udd_sleep_mode+0x16>
     bcc:	ff cf       	rjmp	.-2      	; 0xbcc <udd_sleep_mode+0x14>
     bce:	2f b7       	in	r18, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	ea ee       	ldi	r30, 0xEA	; 234
     bd4:	f4 e2       	ldi	r31, 0x24	; 36
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	91 50       	subi	r25, 0x01	; 1
     bda:	91 83       	std	Z+1, r25	; 0x01
     bdc:	2f bf       	out	0x3f, r18	; 63
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <udd_sleep_mode+0x42>
     be0:	90 91 eb 24 	lds	r25, 0x24EB
     be4:	9f 3f       	cpi	r25, 0xFF	; 255
     be6:	09 f4       	brne	.+2      	; 0xbea <udd_sleep_mode+0x32>
     be8:	ff cf       	rjmp	.-2      	; 0xbe8 <udd_sleep_mode+0x30>
     bea:	2f b7       	in	r18, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	ea ee       	ldi	r30, 0xEA	; 234
     bf0:	f4 e2       	ldi	r31, 0x24	; 36
     bf2:	91 81       	ldd	r25, Z+1	; 0x01
     bf4:	9f 5f       	subi	r25, 0xFF	; 255
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	2f bf       	out	0x3f, r18	; 63
     bfa:	80 93 98 22 	sts	0x2298, r24
     bfe:	08 95       	ret
     c00:	90 91 98 22 	lds	r25, 0x2298
     c04:	99 23       	and	r25, r25
     c06:	61 f3       	breq	.-40     	; 0xbe0 <udd_sleep_mode+0x28>
     c08:	f8 cf       	rjmp	.-16     	; 0xbfa <udd_sleep_mode+0x42>

00000c0a <udd_ctrl_init>:
     c0a:	0f 93       	push	r16
     c0c:	e8 ec       	ldi	r30, 0xC8	; 200
     c0e:	f4 e0       	ldi	r31, 0x04	; 4
     c10:	80 81       	ld	r24, Z
     c12:	8f 7d       	andi	r24, 0xDF	; 223
     c14:	80 83       	st	Z, r24
     c16:	80 81       	ld	r24, Z
     c18:	8f 7d       	andi	r24, 0xDF	; 223
     c1a:	80 83       	st	Z, r24
     c1c:	ec e6       	ldi	r30, 0x6C	; 108
     c1e:	f2 e2       	ldi	r31, 0x22	; 34
     c20:	02 e0       	ldi	r16, 0x02	; 2
     c22:	05 93       	las	Z, r16
     c24:	10 92 6e 22 	sts	0x226E, r1
     c28:	10 92 6f 22 	sts	0x226F, r1
     c2c:	00 e2       	ldi	r16, 0x20	; 32
     c2e:	06 93       	lac	Z, r16
     c30:	00 e4       	ldi	r16, 0x40	; 64
     c32:	06 93       	lac	Z, r16
     c34:	e4 e6       	ldi	r30, 0x64	; 100
     c36:	f2 e2       	ldi	r31, 0x22	; 34
     c38:	00 e2       	ldi	r16, 0x20	; 32
     c3a:	06 93       	lac	Z, r16
     c3c:	00 e4       	ldi	r16, 0x40	; 64
     c3e:	06 93       	lac	Z, r16
     c40:	ea ed       	ldi	r30, 0xDA	; 218
     c42:	f4 e2       	ldi	r31, 0x24	; 36
     c44:	14 86       	std	Z+12, r1	; 0x0c
     c46:	15 86       	std	Z+13, r1	; 0x0d
     c48:	16 86       	std	Z+14, r1	; 0x0e
     c4a:	17 86       	std	Z+15, r1	; 0x0f
     c4c:	12 86       	std	Z+10, r1	; 0x0a
     c4e:	13 86       	std	Z+11, r1	; 0x0b
     c50:	10 92 55 22 	sts	0x2255, r1
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <udd_ctrl_stall_data>:
     c58:	0f 93       	push	r16
     c5a:	85 e0       	ldi	r24, 0x05	; 5
     c5c:	80 93 55 22 	sts	0x2255, r24
     c60:	ed e6       	ldi	r30, 0x6D	; 109
     c62:	f2 e2       	ldi	r31, 0x22	; 34
     c64:	04 e0       	ldi	r16, 0x04	; 4
     c66:	05 93       	las	Z, r16
     c68:	e5 e6       	ldi	r30, 0x65	; 101
     c6a:	f2 e2       	ldi	r31, 0x22	; 34
     c6c:	04 e0       	ldi	r16, 0x04	; 4
     c6e:	05 93       	las	Z, r16
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <udd_ctrl_send_zlp_in>:
     c74:	0f 93       	push	r16
     c76:	83 e0       	ldi	r24, 0x03	; 3
     c78:	80 93 55 22 	sts	0x2255, r24
     c7c:	10 92 6e 22 	sts	0x226E, r1
     c80:	10 92 6f 22 	sts	0x226F, r1
     c84:	ec e6       	ldi	r30, 0x6C	; 108
     c86:	f2 e2       	ldi	r31, 0x22	; 34
     c88:	02 e0       	ldi	r16, 0x02	; 2
     c8a:	06 93       	lac	Z, r16
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <udd_ctrl_endofrequest>:
     c90:	e0 91 e6 24 	lds	r30, 0x24E6
     c94:	f0 91 e7 24 	lds	r31, 0x24E7
     c98:	30 97       	sbiw	r30, 0x00	; 0
     c9a:	09 f0       	breq	.+2      	; 0xc9e <udd_ctrl_endofrequest+0xe>
     c9c:	19 95       	eicall
     c9e:	08 95       	ret

00000ca0 <udd_ctrl_in_sent>:
     ca0:	0f 93       	push	r16
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	80 91 55 22 	lds	r24, 0x2255
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	19 f4       	brne	.+6      	; 0xcb4 <udd_ctrl_in_sent+0x14>
     cae:	f0 df       	rcall	.-32     	; 0xc90 <udd_ctrl_endofrequest>
     cb0:	ac df       	rcall	.-168    	; 0xc0a <udd_ctrl_init>
     cb2:	5e c0       	rjmp	.+188    	; 0xd70 <udd_ctrl_in_sent+0xd0>
     cb4:	80 91 51 22 	lds	r24, 0x2251
     cb8:	90 91 52 22 	lds	r25, 0x2252
     cbc:	c0 91 e4 24 	lds	r28, 0x24E4
     cc0:	d0 91 e5 24 	lds	r29, 0x24E5
     cc4:	c8 1b       	sub	r28, r24
     cc6:	d9 0b       	sbc	r29, r25
     cc8:	71 f5       	brne	.+92     	; 0xd26 <udd_ctrl_in_sent+0x86>
     cca:	20 91 53 22 	lds	r18, 0x2253
     cce:	30 91 54 22 	lds	r19, 0x2254
     cd2:	82 0f       	add	r24, r18
     cd4:	93 1f       	adc	r25, r19
     cd6:	80 93 53 22 	sts	0x2253, r24
     cda:	90 93 54 22 	sts	0x2254, r25
     cde:	20 91 e0 24 	lds	r18, 0x24E0
     ce2:	30 91 e1 24 	lds	r19, 0x24E1
     ce6:	82 17       	cp	r24, r18
     ce8:	93 07       	cpc	r25, r19
     cea:	21 f0       	breq	.+8      	; 0xcf4 <udd_ctrl_in_sent+0x54>
     cec:	80 91 a4 21 	lds	r24, 0x21A4
     cf0:	88 23       	and	r24, r24
     cf2:	41 f0       	breq	.+16     	; 0xd04 <udd_ctrl_in_sent+0x64>
     cf4:	84 e0       	ldi	r24, 0x04	; 4
     cf6:	80 93 55 22 	sts	0x2255, r24
     cfa:	e4 e6       	ldi	r30, 0x64	; 100
     cfc:	f2 e2       	ldi	r31, 0x22	; 34
     cfe:	02 e0       	ldi	r16, 0x02	; 2
     d00:	06 93       	lac	Z, r16
     d02:	36 c0       	rjmp	.+108    	; 0xd70 <udd_ctrl_in_sent+0xd0>
     d04:	e0 91 e8 24 	lds	r30, 0x24E8
     d08:	f0 91 e9 24 	lds	r31, 0x24E9
     d0c:	30 97       	sbiw	r30, 0x00	; 0
     d0e:	99 f0       	breq	.+38     	; 0xd36 <udd_ctrl_in_sent+0x96>
     d10:	19 95       	eicall
     d12:	88 23       	and	r24, r24
     d14:	81 f0       	breq	.+32     	; 0xd36 <udd_ctrl_in_sent+0x96>
     d16:	10 92 51 22 	sts	0x2251, r1
     d1a:	10 92 52 22 	sts	0x2252, r1
     d1e:	c0 91 e4 24 	lds	r28, 0x24E4
     d22:	d0 91 e5 24 	lds	r29, 0x24E5
     d26:	c8 30       	cpi	r28, 0x08	; 8
     d28:	d1 05       	cpc	r29, r1
     d2a:	28 f0       	brcs	.+10     	; 0xd36 <udd_ctrl_in_sent+0x96>
     d2c:	10 92 a4 21 	sts	0x21A4, r1
     d30:	c8 e0       	ldi	r28, 0x08	; 8
     d32:	d0 e0       	ldi	r29, 0x00	; 0
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <udd_ctrl_in_sent+0x9c>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 a4 21 	sts	0x21A4, r24
     d3c:	e8 e5       	ldi	r30, 0x58	; 88
     d3e:	f2 e2       	ldi	r31, 0x22	; 34
     d40:	c6 8b       	std	Z+22, r28	; 0x16
     d42:	d7 8b       	std	Z+23, r29	; 0x17
     d44:	80 91 51 22 	lds	r24, 0x2251
     d48:	90 91 52 22 	lds	r25, 0x2252
     d4c:	20 91 e2 24 	lds	r18, 0x24E2
     d50:	30 91 e3 24 	lds	r19, 0x24E3
     d54:	28 0f       	add	r18, r24
     d56:	39 1f       	adc	r19, r25
     d58:	20 8f       	std	Z+24, r18	; 0x18
     d5a:	31 8f       	std	Z+25, r19	; 0x19
     d5c:	c8 0f       	add	r28, r24
     d5e:	d9 1f       	adc	r29, r25
     d60:	c0 93 51 22 	sts	0x2251, r28
     d64:	d0 93 52 22 	sts	0x2252, r29
     d68:	ec e6       	ldi	r30, 0x6C	; 108
     d6a:	f2 e2       	ldi	r31, 0x22	; 34
     d6c:	02 e0       	ldi	r16, 0x02	; 2
     d6e:	06 93       	lac	Z, r16
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <udd_ep_get_size>:
     d78:	fc 01       	movw	r30, r24
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	e8 2f       	mov	r30, r24
     d7e:	e7 70       	andi	r30, 0x07	; 7
     d80:	8e 2f       	mov	r24, r30
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	fc 01       	movw	r30, r24
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	e7 30       	cpi	r30, 0x07	; 7
     d8a:	f1 05       	cpc	r31, r1
     d8c:	d8 f4       	brcc	.+54     	; 0xdc4 <udd_ep_get_size+0x4c>
     d8e:	88 27       	eor	r24, r24
     d90:	e2 50       	subi	r30, 0x02	; 2
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__tablejump2__>
     d9a:	80 e1       	ldi	r24, 0x10	; 16
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	08 95       	ret
     da0:	80 e2       	ldi	r24, 0x20	; 32
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	08 95       	ret
     da6:	80 e4       	ldi	r24, 0x40	; 64
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	08 95       	ret
     dac:	80 e8       	ldi	r24, 0x80	; 128
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	08 95       	ret
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	08 95       	ret
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	92 e0       	ldi	r25, 0x02	; 2
     dbc:	08 95       	ret
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	08 95       	ret
     dc4:	88 e0       	ldi	r24, 0x08	; 8
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	08 95       	ret

00000dca <udd_ep_get_job>:
     dca:	28 2f       	mov	r18, r24
     dcc:	2f 70       	andi	r18, 0x0F	; 15
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	08 2e       	mov	r0, r24
     dd6:	00 0c       	add	r0, r0
     dd8:	99 0b       	sbc	r25, r25
     dda:	88 27       	eor	r24, r24
     ddc:	99 0f       	add	r25, r25
     dde:	88 1f       	adc	r24, r24
     de0:	99 27       	eor	r25, r25
     de2:	82 0f       	add	r24, r18
     de4:	93 1f       	adc	r25, r19
     de6:	02 97       	sbiw	r24, 0x02	; 2
     de8:	9c 01       	movw	r18, r24
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	82 0f       	add	r24, r18
     df8:	93 1f       	adc	r25, r19
     dfa:	8b 5d       	subi	r24, 0xDB	; 219
     dfc:	9d 4d       	sbci	r25, 0xDD	; 221
     dfe:	08 95       	ret

00000e00 <udd_ctrl_interrupt_tc_setup>:
     e00:	0f 93       	push	r16
     e02:	cf 93       	push	r28
     e04:	80 91 cc 04 	lds	r24, 0x04CC
     e08:	80 ff       	sbrs	r24, 0
     e0a:	62 c0       	rjmp	.+196    	; 0xed0 <udd_ctrl_interrupt_tc_setup+0xd0>
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	80 93 cc 04 	sts	0x04CC, r24
     e12:	e4 e6       	ldi	r30, 0x64	; 100
     e14:	f2 e2       	ldi	r31, 0x22	; 34
     e16:	00 e8       	ldi	r16, 0x80	; 128
     e18:	06 93       	lac	Z, r16
     e1a:	ec e6       	ldi	r30, 0x6C	; 108
     e1c:	f2 e2       	ldi	r31, 0x22	; 34
     e1e:	00 e8       	ldi	r16, 0x80	; 128
     e20:	06 93       	lac	Z, r16
     e22:	80 93 ca 04 	sts	0x04CA, r24
     e26:	e4 e6       	ldi	r30, 0x64	; 100
     e28:	f2 e2       	ldi	r31, 0x22	; 34
     e2a:	00 e1       	ldi	r16, 0x10	; 16
     e2c:	06 93       	lac	Z, r16
     e2e:	80 91 55 22 	lds	r24, 0x2255
     e32:	88 23       	and	r24, r24
     e34:	29 f0       	breq	.+10     	; 0xe40 <udd_ctrl_interrupt_tc_setup+0x40>
     e36:	83 50       	subi	r24, 0x03	; 3
     e38:	82 30       	cpi	r24, 0x02	; 2
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <udd_ctrl_interrupt_tc_setup+0x3e>
     e3c:	29 df       	rcall	.-430    	; 0xc90 <udd_ctrl_endofrequest>
     e3e:	e5 de       	rcall	.-566    	; 0xc0a <udd_ctrl_init>
     e40:	80 91 66 22 	lds	r24, 0x2266
     e44:	90 91 67 22 	lds	r25, 0x2267
     e48:	08 97       	sbiw	r24, 0x08	; 8
     e4a:	09 f0       	breq	.+2      	; 0xe4e <udd_ctrl_interrupt_tc_setup+0x4e>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <udd_ctrl_interrupt_tc_setup+0xd4>
     e4e:	88 e0       	ldi	r24, 0x08	; 8
     e50:	e9 e4       	ldi	r30, 0x49	; 73
     e52:	f2 e2       	ldi	r31, 0x22	; 34
     e54:	aa ed       	ldi	r26, 0xDA	; 218
     e56:	b4 e2       	ldi	r27, 0x24	; 36
     e58:	01 90       	ld	r0, Z+
     e5a:	0d 92       	st	X+, r0
     e5c:	8a 95       	dec	r24
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <udd_ctrl_interrupt_tc_setup+0x58>
     e60:	e8 ec       	ldi	r30, 0xC8	; 200
     e62:	f4 e0       	ldi	r31, 0x04	; 4
     e64:	80 81       	ld	r24, Z
     e66:	80 62       	ori	r24, 0x20	; 32
     e68:	80 83       	st	Z, r24
     e6a:	80 81       	ld	r24, Z
     e6c:	80 62       	ori	r24, 0x20	; 32
     e6e:	80 83       	st	Z, r24
     e70:	d9 db       	rcall	.-2126   	; 0x624 <udc_process_setup>
     e72:	c8 2f       	mov	r28, r24
     e74:	81 11       	cpse	r24, r1
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <udd_ctrl_interrupt_tc_setup+0x7e>
     e78:	ef de       	rcall	.-546    	; 0xc58 <udd_ctrl_stall_data>
     e7a:	c1 e0       	ldi	r28, 0x01	; 1
     e7c:	2c c0       	rjmp	.+88     	; 0xed6 <udd_ctrl_interrupt_tc_setup+0xd6>
     e7e:	80 91 da 24 	lds	r24, 0x24DA
     e82:	88 23       	and	r24, r24
     e84:	6c f4       	brge	.+26     	; 0xea0 <udd_ctrl_interrupt_tc_setup+0xa0>
     e86:	10 92 53 22 	sts	0x2253, r1
     e8a:	10 92 54 22 	sts	0x2254, r1
     e8e:	10 92 51 22 	sts	0x2251, r1
     e92:	10 92 52 22 	sts	0x2252, r1
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	80 93 55 22 	sts	0x2255, r24
     e9c:	01 df       	rcall	.-510    	; 0xca0 <udd_ctrl_in_sent>
     e9e:	1b c0       	rjmp	.+54     	; 0xed6 <udd_ctrl_interrupt_tc_setup+0xd6>
     ea0:	80 91 e0 24 	lds	r24, 0x24E0
     ea4:	90 91 e1 24 	lds	r25, 0x24E1
     ea8:	89 2b       	or	r24, r25
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <udd_ctrl_interrupt_tc_setup+0xb0>
     eac:	e3 de       	rcall	.-570    	; 0xc74 <udd_ctrl_send_zlp_in>
     eae:	13 c0       	rjmp	.+38     	; 0xed6 <udd_ctrl_interrupt_tc_setup+0xd6>
     eb0:	10 92 53 22 	sts	0x2253, r1
     eb4:	10 92 54 22 	sts	0x2254, r1
     eb8:	10 92 51 22 	sts	0x2251, r1
     ebc:	10 92 52 22 	sts	0x2252, r1
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 55 22 	sts	0x2255, r24
     ec6:	e4 e6       	ldi	r30, 0x64	; 100
     ec8:	f2 e2       	ldi	r31, 0x22	; 34
     eca:	02 e0       	ldi	r16, 0x02	; 2
     ecc:	06 93       	lac	Z, r16
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <udd_ctrl_interrupt_tc_setup+0xd6>
     ed0:	c0 e0       	ldi	r28, 0x00	; 0
     ed2:	01 c0       	rjmp	.+2      	; 0xed6 <udd_ctrl_interrupt_tc_setup+0xd6>
     ed4:	c1 e0       	ldi	r28, 0x01	; 1
     ed6:	8c 2f       	mov	r24, r28
     ed8:	cf 91       	pop	r28
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <udd_ep_trans_complet>:
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	df 92       	push	r13
     ee8:	ef 92       	push	r14
     eea:	ff 92       	push	r15
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	d8 2e       	mov	r13, r24
     ef6:	69 df       	rcall	.-302    	; 0xdca <udd_ep_get_job>
     ef8:	8c 01       	movw	r16, r24
     efa:	bd 2c       	mov	r11, r13
     efc:	bb 1c       	adc	r11, r11
     efe:	bb 24       	eor	r11, r11
     f00:	bb 1c       	adc	r11, r11
     f02:	cd 2d       	mov	r28, r13
     f04:	cf 70       	andi	r28, 0x0F	; 15
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	cc 0f       	add	r28, r28
     f0a:	dd 1f       	adc	r29, r29
     f0c:	cb 0d       	add	r28, r11
     f0e:	d1 1d       	adc	r29, r1
     f10:	ce 01       	movw	r24, r28
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	9c 01       	movw	r18, r24
     f20:	2c 59       	subi	r18, 0x9C	; 156
     f22:	3d 4d       	sbci	r19, 0xDD	; 221
     f24:	79 01       	movw	r14, r18
     f26:	c9 01       	movw	r24, r18
     f28:	27 df       	rcall	.-434    	; 0xd78 <udd_ep_get_size>
     f2a:	4c 01       	movw	r8, r24
     f2c:	bb 20       	and	r11, r11
     f2e:	09 f4       	brne	.+2      	; 0xf32 <udd_ep_trans_complet+0x54>
     f30:	7b c0       	rjmp	.+246    	; 0x1028 <udd_ep_trans_complet+0x14a>
     f32:	fe 01       	movw	r30, r28
     f34:	ee 0f       	add	r30, r30
     f36:	ff 1f       	adc	r31, r31
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	ee 0f       	add	r30, r30
     f3e:	ff 1f       	adc	r31, r31
     f40:	e8 5a       	subi	r30, 0xA8	; 168
     f42:	fd 4d       	sbci	r31, 0xDD	; 221
     f44:	22 89       	ldd	r18, Z+18	; 0x12
     f46:	33 89       	ldd	r19, Z+19	; 0x13
     f48:	d8 01       	movw	r26, r16
     f4a:	15 96       	adiw	r26, 0x05	; 5
     f4c:	8d 91       	ld	r24, X+
     f4e:	9c 91       	ld	r25, X
     f50:	16 97       	sbiw	r26, 0x06	; 6
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	15 96       	adiw	r26, 0x05	; 5
     f58:	8d 93       	st	X+, r24
     f5a:	9c 93       	st	X, r25
     f5c:	16 97       	sbiw	r26, 0x06	; 6
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	2d 91       	ld	r18, X+
     f62:	3c 91       	ld	r19, X
     f64:	14 97       	sbiw	r26, 0x04	; 4
     f66:	82 17       	cp	r24, r18
     f68:	93 07       	cpc	r25, r19
     f6a:	09 f4       	brne	.+2      	; 0xf6e <udd_ep_trans_complet+0x90>
     f6c:	47 c0       	rjmp	.+142    	; 0xffc <udd_ep_trans_complet+0x11e>
     f6e:	28 1b       	sub	r18, r24
     f70:	39 0b       	sbc	r19, r25
     f72:	21 15       	cp	r18, r1
     f74:	b4 e0       	ldi	r27, 0x04	; 4
     f76:	3b 07       	cpc	r19, r27
     f78:	40 f0       	brcs	.+16     	; 0xf8a <udd_ep_trans_complet+0xac>
     f7a:	2f ef       	ldi	r18, 0xFF	; 255
     f7c:	33 e0       	ldi	r19, 0x03	; 3
     f7e:	c9 01       	movw	r24, r18
     f80:	b4 01       	movw	r22, r8
     f82:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodhi4>
     f86:	28 1b       	sub	r18, r24
     f88:	39 0b       	sbc	r19, r25
     f8a:	f8 01       	movw	r30, r16
     f8c:	80 81       	ld	r24, Z
     f8e:	81 ff       	sbrs	r24, 1
     f90:	0a c0       	rjmp	.+20     	; 0xfa6 <udd_ep_trans_complet+0xc8>
     f92:	c9 01       	movw	r24, r18
     f94:	b4 01       	movw	r22, r8
     f96:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodhi4>
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	89 2b       	or	r24, r25
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <udd_ep_trans_complet+0xc4>
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	84 2f       	mov	r24, r20
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <udd_ep_trans_complet+0xca>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	d8 01       	movw	r26, r16
     faa:	9c 91       	ld	r25, X
     fac:	80 fb       	bst	r24, 0
     fae:	91 f9       	bld	r25, 1
     fb0:	9c 93       	st	X, r25
     fb2:	fe 01       	movw	r30, r28
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	e8 5a       	subi	r30, 0xA8	; 168
     fc2:	fd 4d       	sbci	r31, 0xDD	; 221
     fc4:	12 8a       	std	Z+18, r1	; 0x12
     fc6:	13 8a       	std	Z+19, r1	; 0x13
     fc8:	26 87       	std	Z+14, r18	; 0x0e
     fca:	37 87       	std	Z+15, r19	; 0x0f
     fcc:	11 96       	adiw	r26, 0x01	; 1
     fce:	2d 91       	ld	r18, X+
     fd0:	3c 91       	ld	r19, X
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	15 96       	adiw	r26, 0x05	; 5
     fd6:	8d 91       	ld	r24, X+
     fd8:	9c 91       	ld	r25, X
     fda:	16 97       	sbiw	r26, 0x06	; 6
     fdc:	82 0f       	add	r24, r18
     fde:	93 1f       	adc	r25, r19
     fe0:	cc 0f       	add	r28, r28
     fe2:	dd 1f       	adc	r29, r29
     fe4:	cc 0f       	add	r28, r28
     fe6:	dd 1f       	adc	r29, r29
     fe8:	cc 0f       	add	r28, r28
     fea:	dd 1f       	adc	r29, r29
     fec:	c8 59       	subi	r28, 0x98	; 152
     fee:	dd 4d       	sbci	r29, 0xDD	; 221
     ff0:	88 83       	st	Y, r24
     ff2:	99 83       	std	Y+1, r25	; 0x01
     ff4:	f7 01       	movw	r30, r14
     ff6:	02 e0       	ldi	r16, 0x02	; 2
     ff8:	06 93       	lac	Z, r16
     ffa:	e8 c0       	rjmp	.+464    	; 0x11cc <udd_ep_trans_complet+0x2ee>
     ffc:	d8 01       	movw	r26, r16
     ffe:	8c 91       	ld	r24, X
    1000:	81 ff       	sbrs	r24, 1
    1002:	d1 c0       	rjmp	.+418    	; 0x11a6 <udd_ep_trans_complet+0x2c8>
    1004:	8d 7f       	andi	r24, 0xFD	; 253
    1006:	8c 93       	st	X, r24
    1008:	cc 0f       	add	r28, r28
    100a:	dd 1f       	adc	r29, r29
    100c:	cc 0f       	add	r28, r28
    100e:	dd 1f       	adc	r29, r29
    1010:	cc 0f       	add	r28, r28
    1012:	dd 1f       	adc	r29, r29
    1014:	c8 5a       	subi	r28, 0xA8	; 168
    1016:	dd 4d       	sbci	r29, 0xDD	; 221
    1018:	1a 8a       	std	Y+18, r1	; 0x12
    101a:	1b 8a       	std	Y+19, r1	; 0x13
    101c:	1e 86       	std	Y+14, r1	; 0x0e
    101e:	1f 86       	std	Y+15, r1	; 0x0f
    1020:	f7 01       	movw	r30, r14
    1022:	02 e0       	ldi	r16, 0x02	; 2
    1024:	06 93       	lac	Z, r16
    1026:	d2 c0       	rjmp	.+420    	; 0x11cc <udd_ep_trans_complet+0x2ee>
    1028:	fe 01       	movw	r30, r28
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	ee 0f       	add	r30, r30
    1034:	ff 1f       	adc	r31, r31
    1036:	e8 5a       	subi	r30, 0xA8	; 168
    1038:	fd 4d       	sbci	r31, 0xDD	; 221
    103a:	a6 84       	ldd	r10, Z+14	; 0x0e
    103c:	b7 84       	ldd	r11, Z+15	; 0x0f
    103e:	d8 01       	movw	r26, r16
    1040:	8c 91       	ld	r24, X
    1042:	82 ff       	sbrs	r24, 2
    1044:	1b c0       	rjmp	.+54     	; 0x107c <udd_ep_trans_complet+0x19e>
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	ed 91       	ld	r30, X+
    104a:	fc 91       	ld	r31, X
    104c:	12 97       	sbiw	r26, 0x02	; 2
    104e:	15 96       	adiw	r26, 0x05	; 5
    1050:	2d 91       	ld	r18, X+
    1052:	3c 91       	ld	r19, X
    1054:	16 97       	sbiw	r26, 0x06	; 6
    1056:	13 96       	adiw	r26, 0x03	; 3
    1058:	8d 91       	ld	r24, X+
    105a:	9c 91       	ld	r25, X
    105c:	14 97       	sbiw	r26, 0x04	; 4
    105e:	b4 01       	movw	r22, r8
    1060:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodhi4>
    1064:	b0 e4       	ldi	r27, 0x40	; 64
    1066:	db 9e       	mul	r13, r27
    1068:	b0 01       	movw	r22, r0
    106a:	11 24       	eor	r1, r1
    106c:	6b 59       	subi	r22, 0x9B	; 155
    106e:	7e 4d       	sbci	r23, 0xDE	; 222
    1070:	ac 01       	movw	r20, r24
    1072:	cf 01       	movw	r24, r30
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	0e 94 83 12 	call	0x2506	; 0x2506 <memcpy>
    107c:	f8 01       	movw	r30, r16
    107e:	25 81       	ldd	r18, Z+5	; 0x05
    1080:	36 81       	ldd	r19, Z+6	; 0x06
    1082:	2a 0d       	add	r18, r10
    1084:	3b 1d       	adc	r19, r11
    1086:	25 83       	std	Z+5, r18	; 0x05
    1088:	36 83       	std	Z+6, r19	; 0x06
    108a:	83 81       	ldd	r24, Z+3	; 0x03
    108c:	94 81       	ldd	r25, Z+4	; 0x04
    108e:	82 17       	cp	r24, r18
    1090:	93 07       	cpc	r25, r19
    1092:	68 f4       	brcc	.+26     	; 0x10ae <udd_ep_trans_complet+0x1d0>
    1094:	85 83       	std	Z+5, r24	; 0x05
    1096:	96 83       	std	Z+6, r25	; 0x06
    1098:	cc 0f       	add	r28, r28
    109a:	dd 1f       	adc	r29, r29
    109c:	cc 0f       	add	r28, r28
    109e:	dd 1f       	adc	r29, r29
    10a0:	cc 0f       	add	r28, r28
    10a2:	dd 1f       	adc	r29, r29
    10a4:	c8 5a       	subi	r28, 0xA8	; 168
    10a6:	dd 4d       	sbci	r29, 0xDD	; 221
    10a8:	8a 89       	ldd	r24, Y+18	; 0x12
    10aa:	9b 89       	ldd	r25, Y+19	; 0x13
    10ac:	7c c0       	rjmp	.+248    	; 0x11a6 <udd_ep_trans_complet+0x2c8>
    10ae:	fe 01       	movw	r30, r28
    10b0:	ee 0f       	add	r30, r30
    10b2:	ff 1f       	adc	r31, r31
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e8 5a       	subi	r30, 0xA8	; 168
    10be:	fd 4d       	sbci	r31, 0xDD	; 221
    10c0:	42 89       	ldd	r20, Z+18	; 0x12
    10c2:	53 89       	ldd	r21, Z+19	; 0x13
    10c4:	4a 15       	cp	r20, r10
    10c6:	5b 05       	cpc	r21, r11
    10c8:	09 f0       	breq	.+2      	; 0x10cc <udd_ep_trans_complet+0x1ee>
    10ca:	6d c0       	rjmp	.+218    	; 0x11a6 <udd_ep_trans_complet+0x2c8>
    10cc:	28 17       	cp	r18, r24
    10ce:	39 07       	cpc	r19, r25
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <udd_ep_trans_complet+0x1f6>
    10d2:	69 c0       	rjmp	.+210    	; 0x11a6 <udd_ep_trans_complet+0x2c8>
    10d4:	ac 01       	movw	r20, r24
    10d6:	42 1b       	sub	r20, r18
    10d8:	53 0b       	sbc	r21, r19
    10da:	9a 01       	movw	r18, r20
    10dc:	21 15       	cp	r18, r1
    10de:	54 e0       	ldi	r21, 0x04	; 4
    10e0:	35 07       	cpc	r19, r21
    10e2:	58 f0       	brcs	.+22     	; 0x10fa <udd_ep_trans_complet+0x21c>
    10e4:	2f ef       	ldi	r18, 0xFF	; 255
    10e6:	33 e0       	ldi	r19, 0x03	; 3
    10e8:	c9 01       	movw	r24, r18
    10ea:	b4 01       	movw	r22, r8
    10ec:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodhi4>
    10f0:	d9 01       	movw	r26, r18
    10f2:	a8 1b       	sub	r26, r24
    10f4:	b9 0b       	sbc	r27, r25
    10f6:	cd 01       	movw	r24, r26
    10f8:	08 c0       	rjmp	.+16     	; 0x110a <udd_ep_trans_complet+0x22c>
    10fa:	c9 01       	movw	r24, r18
    10fc:	b4 01       	movw	r22, r8
    10fe:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <__udivmodhi4>
    1102:	f9 01       	movw	r30, r18
    1104:	e8 1b       	sub	r30, r24
    1106:	f9 0b       	sbc	r31, r25
    1108:	cf 01       	movw	r24, r30
    110a:	fe 01       	movw	r30, r28
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	e8 5a       	subi	r30, 0xA8	; 168
    111a:	fd 4d       	sbci	r31, 0xDD	; 221
    111c:	16 86       	std	Z+14, r1	; 0x0e
    111e:	17 86       	std	Z+15, r1	; 0x0f
    1120:	88 15       	cp	r24, r8
    1122:	99 05       	cpc	r25, r9
    1124:	00 f5       	brcc	.+64     	; 0x1166 <udd_ep_trans_complet+0x288>
    1126:	d8 01       	movw	r26, r16
    1128:	8c 91       	ld	r24, X
    112a:	84 60       	ori	r24, 0x04	; 4
    112c:	8c 93       	st	X, r24
    112e:	b0 e4       	ldi	r27, 0x40	; 64
    1130:	db 9e       	mul	r13, r27
    1132:	c0 01       	movw	r24, r0
    1134:	11 24       	eor	r1, r1
    1136:	8b 59       	subi	r24, 0x9B	; 155
    1138:	9e 4d       	sbci	r25, 0xDE	; 222
    113a:	fe 01       	movw	r30, r28
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	ee 0f       	add	r30, r30
    1142:	ff 1f       	adc	r31, r31
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	e8 59       	subi	r30, 0x98	; 152
    114a:	fd 4d       	sbci	r31, 0xDD	; 221
    114c:	80 83       	st	Z, r24
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	cc 0f       	add	r28, r28
    1152:	dd 1f       	adc	r29, r29
    1154:	cc 0f       	add	r28, r28
    1156:	dd 1f       	adc	r29, r29
    1158:	cc 0f       	add	r28, r28
    115a:	dd 1f       	adc	r29, r29
    115c:	c8 5a       	subi	r28, 0xA8	; 168
    115e:	dd 4d       	sbci	r29, 0xDD	; 221
    1160:	8a 8a       	std	Y+18, r8	; 0x12
    1162:	9b 8a       	std	Y+19, r9	; 0x13
    1164:	1c c0       	rjmp	.+56     	; 0x119e <udd_ep_trans_complet+0x2c0>
    1166:	f8 01       	movw	r30, r16
    1168:	41 81       	ldd	r20, Z+1	; 0x01
    116a:	52 81       	ldd	r21, Z+2	; 0x02
    116c:	25 81       	ldd	r18, Z+5	; 0x05
    116e:	36 81       	ldd	r19, Z+6	; 0x06
    1170:	24 0f       	add	r18, r20
    1172:	35 1f       	adc	r19, r21
    1174:	fe 01       	movw	r30, r28
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	ee 0f       	add	r30, r30
    117c:	ff 1f       	adc	r31, r31
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	e8 59       	subi	r30, 0x98	; 152
    1184:	fd 4d       	sbci	r31, 0xDD	; 221
    1186:	20 83       	st	Z, r18
    1188:	31 83       	std	Z+1, r19	; 0x01
    118a:	cc 0f       	add	r28, r28
    118c:	dd 1f       	adc	r29, r29
    118e:	cc 0f       	add	r28, r28
    1190:	dd 1f       	adc	r29, r29
    1192:	cc 0f       	add	r28, r28
    1194:	dd 1f       	adc	r29, r29
    1196:	c8 5a       	subi	r28, 0xA8	; 168
    1198:	dd 4d       	sbci	r29, 0xDD	; 221
    119a:	8a 8b       	std	Y+18, r24	; 0x12
    119c:	9b 8b       	std	Y+19, r25	; 0x13
    119e:	f7 01       	movw	r30, r14
    11a0:	02 e0       	ldi	r16, 0x02	; 2
    11a2:	06 93       	lac	Z, r16
    11a4:	13 c0       	rjmp	.+38     	; 0x11cc <udd_ep_trans_complet+0x2ee>
    11a6:	d8 01       	movw	r26, r16
    11a8:	8c 91       	ld	r24, X
    11aa:	80 ff       	sbrs	r24, 0
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <udd_ep_trans_complet+0x2ee>
    11ae:	8e 7f       	andi	r24, 0xFE	; 254
    11b0:	8c 93       	st	X, r24
    11b2:	17 96       	adiw	r26, 0x07	; 7
    11b4:	ed 91       	ld	r30, X+
    11b6:	fc 91       	ld	r31, X
    11b8:	18 97       	sbiw	r26, 0x08	; 8
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	39 f0       	breq	.+14     	; 0x11cc <udd_ep_trans_complet+0x2ee>
    11be:	15 96       	adiw	r26, 0x05	; 5
    11c0:	6d 91       	ld	r22, X+
    11c2:	7c 91       	ld	r23, X
    11c4:	16 97       	sbiw	r26, 0x06	; 6
    11c6:	4d 2d       	mov	r20, r13
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	19 95       	eicall
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	ff 90       	pop	r15
    11d6:	ef 90       	pop	r14
    11d8:	df 90       	pop	r13
    11da:	bf 90       	pop	r11
    11dc:	af 90       	pop	r10
    11de:	9f 90       	pop	r9
    11e0:	8f 90       	pop	r8
    11e2:	08 95       	ret

000011e4 <udd_attach>:
    11e4:	cf 93       	push	r28
    11e6:	cf b7       	in	r28, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	e5 dc       	rcall	.-1590   	; 0xbb8 <udd_sleep_mode>
    11ee:	ea ec       	ldi	r30, 0xCA	; 202
    11f0:	f4 e0       	ldi	r31, 0x04	; 4
    11f2:	80 e4       	ldi	r24, 0x40	; 64
    11f4:	80 83       	st	Z, r24
    11f6:	80 e2       	ldi	r24, 0x20	; 32
    11f8:	80 83       	st	Z, r24
    11fa:	e1 ec       	ldi	r30, 0xC1	; 193
    11fc:	f4 e0       	ldi	r31, 0x04	; 4
    11fe:	80 81       	ld	r24, Z
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 83       	st	Z, r24
    1204:	a9 ec       	ldi	r26, 0xC9	; 201
    1206:	b4 e0       	ldi	r27, 0x04	; 4
    1208:	8c 91       	ld	r24, X
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	8c 93       	st	X, r24
    120e:	e8 ec       	ldi	r30, 0xC8	; 200
    1210:	f4 e0       	ldi	r31, 0x04	; 4
    1212:	80 81       	ld	r24, Z
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	80 83       	st	Z, r24
    1218:	8c 91       	ld	r24, X
    121a:	81 60       	ori	r24, 0x01	; 1
    121c:	8c 93       	st	X, r24
    121e:	80 81       	ld	r24, Z
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	80 83       	st	Z, r24
    1224:	cf bf       	out	0x3f, r28	; 63
    1226:	cf 91       	pop	r28
    1228:	08 95       	ret

0000122a <udd_enable>:
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	c0 e6       	ldi	r28, 0x60	; 96
    1230:	d0 e0       	ldi	r29, 0x00	; 0
    1232:	18 82       	st	Y, r1
    1234:	80 e3       	ldi	r24, 0x30	; 48
    1236:	7f d5       	rcall	.+2814   	; 0x1d36 <sysclk_enable_usb>
    1238:	e0 ec       	ldi	r30, 0xC0	; 192
    123a:	f4 e0       	ldi	r31, 0x04	; 4
    123c:	80 81       	ld	r24, Z
    123e:	80 64       	ori	r24, 0x40	; 64
    1240:	80 83       	st	Z, r24
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	88 83       	st	Y, r24
    1246:	cf b7       	in	r28, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	e8 e5       	ldi	r30, 0x58	; 88
    124c:	f2 e2       	ldi	r31, 0x22	; 34
    124e:	15 86       	std	Z+13, r1	; 0x0d
    1250:	15 8a       	std	Z+21, r1	; 0x15
    1252:	15 8e       	std	Z+29, r1	; 0x1d
    1254:	15 a2       	std	Z+37, r1	; 0x25
    1256:	15 a6       	std	Z+45, r1	; 0x2d
    1258:	15 aa       	std	Z+53, r1	; 0x35
    125a:	e5 e2       	ldi	r30, 0x25	; 37
    125c:	f2 e2       	ldi	r31, 0x22	; 34
    125e:	80 81       	ld	r24, Z
    1260:	8e 7f       	andi	r24, 0xFE	; 254
    1262:	80 83       	st	Z, r24
    1264:	ee e2       	ldi	r30, 0x2E	; 46
    1266:	f2 e2       	ldi	r31, 0x22	; 34
    1268:	80 81       	ld	r24, Z
    126a:	8e 7f       	andi	r24, 0xFE	; 254
    126c:	80 83       	st	Z, r24
    126e:	e7 e3       	ldi	r30, 0x37	; 55
    1270:	f2 e2       	ldi	r31, 0x22	; 34
    1272:	80 81       	ld	r24, Z
    1274:	8e 7f       	andi	r24, 0xFE	; 254
    1276:	80 83       	st	Z, r24
    1278:	e0 e4       	ldi	r30, 0x40	; 64
    127a:	f2 e2       	ldi	r31, 0x22	; 34
    127c:	80 81       	ld	r24, Z
    127e:	8e 7f       	andi	r24, 0xFE	; 254
    1280:	80 83       	st	Z, r24
    1282:	6a e1       	ldi	r22, 0x1A	; 26
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	8d d5       	rcall	.+2842   	; 0x1da4 <nvm_read_byte>
    128a:	8f 3f       	cpi	r24, 0xFF	; 255
    128c:	19 f0       	breq	.+6      	; 0x1294 <udd_enable+0x6a>
    128e:	80 93 fa 04 	sts	0x04FA, r24
    1292:	03 c0       	rjmp	.+6      	; 0x129a <udd_enable+0x70>
    1294:	8f e1       	ldi	r24, 0x1F	; 31
    1296:	80 93 fa 04 	sts	0x04FA, r24
    129a:	6b e1       	ldi	r22, 0x1B	; 27
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	81 d5       	rcall	.+2818   	; 0x1da4 <nvm_read_byte>
    12a2:	8f 3f       	cpi	r24, 0xFF	; 255
    12a4:	19 f0       	breq	.+6      	; 0x12ac <udd_enable+0x82>
    12a6:	80 93 fb 04 	sts	0x04FB, r24
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <udd_enable+0x88>
    12ac:	8f e1       	ldi	r24, 0x1F	; 31
    12ae:	80 93 fb 04 	sts	0x04FB, r24
    12b2:	e0 ec       	ldi	r30, 0xC0	; 192
    12b4:	f4 e0       	ldi	r31, 0x04	; 4
    12b6:	80 81       	ld	r24, Z
    12b8:	82 60       	ori	r24, 0x02	; 2
    12ba:	80 83       	st	Z, r24
    12bc:	80 81       	ld	r24, Z
    12be:	80 68       	ori	r24, 0x80	; 128
    12c0:	80 83       	st	Z, r24
    12c2:	80 81       	ld	r24, Z
    12c4:	80 61       	ori	r24, 0x10	; 16
    12c6:	80 83       	st	Z, r24
    12c8:	84 e6       	ldi	r24, 0x64	; 100
    12ca:	92 e2       	ldi	r25, 0x22	; 34
    12cc:	86 83       	std	Z+6, r24	; 0x06
    12ce:	97 83       	std	Z+7, r25	; 0x07
    12d0:	80 81       	ld	r24, Z
    12d2:	80 62       	ori	r24, 0x20	; 32
    12d4:	80 83       	st	Z, r24
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	80 93 c5 04 	sts	0x04C5, r24
    12dc:	e8 ec       	ldi	r30, 0xC8	; 200
    12de:	f4 e0       	ldi	r31, 0x04	; 4
    12e0:	80 81       	ld	r24, Z
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	80 83       	st	Z, r24
    12e6:	10 92 98 22 	sts	0x2298, r1
    12ea:	80 91 ef 24 	lds	r24, 0x24EF
    12ee:	8f 3f       	cpi	r24, 0xFF	; 255
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <udd_enable+0xca>
    12f2:	ff cf       	rjmp	.-2      	; 0x12f2 <udd_enable+0xc8>
    12f4:	9f b7       	in	r25, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	ea ee       	ldi	r30, 0xEA	; 234
    12fa:	f4 e2       	ldi	r31, 0x24	; 36
    12fc:	85 81       	ldd	r24, Z+5	; 0x05
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	85 83       	std	Z+5, r24	; 0x05
    1302:	9f bf       	out	0x3f, r25	; 63
    1304:	6f df       	rcall	.-290    	; 0x11e4 <udd_attach>
    1306:	cf bf       	out	0x3f, r28	; 63
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <udd_set_address>:
    130e:	80 93 c3 04 	sts	0x04C3, r24
    1312:	08 95       	ret

00001314 <udd_getaddress>:
    1314:	80 91 c3 04 	lds	r24, 0x04C3
    1318:	08 95       	ret

0000131a <udd_set_setup_payload>:
    131a:	ea ed       	ldi	r30, 0xDA	; 218
    131c:	f4 e2       	ldi	r31, 0x24	; 36
    131e:	80 87       	std	Z+8, r24	; 0x08
    1320:	91 87       	std	Z+9, r25	; 0x09
    1322:	62 87       	std	Z+10, r22	; 0x0a
    1324:	73 87       	std	Z+11, r23	; 0x0b
    1326:	08 95       	ret

00001328 <udd_ep_alloc>:
    1328:	28 2f       	mov	r18, r24
    132a:	2f 70       	andi	r18, 0x0F	; 15
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	08 2e       	mov	r0, r24
    1334:	00 0c       	add	r0, r0
    1336:	99 0b       	sbc	r25, r25
    1338:	88 27       	eor	r24, r24
    133a:	99 0f       	add	r25, r25
    133c:	88 1f       	adc	r24, r24
    133e:	99 27       	eor	r25, r25
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	fc 01       	movw	r30, r24
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	ee 0f       	add	r30, r30
    1350:	ff 1f       	adc	r31, r31
    1352:	e8 5a       	subi	r30, 0xA8	; 168
    1354:	fd 4d       	sbci	r31, 0xDD	; 221
    1356:	25 85       	ldd	r18, Z+13	; 0x0d
    1358:	20 7c       	andi	r18, 0xC0	; 192
    135a:	09 f0       	breq	.+2      	; 0x135e <udd_ep_alloc+0x36>
    135c:	69 c0       	rjmp	.+210    	; 0x1430 <udd_ep_alloc+0x108>
    135e:	63 70       	andi	r22, 0x03	; 3
    1360:	61 30       	cpi	r22, 0x01	; 1
    1362:	11 f0       	breq	.+4      	; 0x1368 <udd_ep_alloc+0x40>
    1364:	18 f4       	brcc	.+6      	; 0x136c <udd_ep_alloc+0x44>
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <udd_ep_alloc+0x48>
    1368:	20 ec       	ldi	r18, 0xC0	; 192
    136a:	03 c0       	rjmp	.+6      	; 0x1372 <udd_ep_alloc+0x4a>
    136c:	20 e8       	ldi	r18, 0x80	; 128
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <udd_ep_alloc+0x4a>
    1370:	20 e4       	ldi	r18, 0x40	; 64
    1372:	40 38       	cpi	r20, 0x80	; 128
    1374:	51 05       	cpc	r21, r1
    1376:	e9 f0       	breq	.+58     	; 0x13b2 <udd_ep_alloc+0x8a>
    1378:	50 f4       	brcc	.+20     	; 0x138e <udd_ep_alloc+0x66>
    137a:	40 32       	cpi	r20, 0x20	; 32
    137c:	51 05       	cpc	r21, r1
    137e:	a9 f0       	breq	.+42     	; 0x13aa <udd_ep_alloc+0x82>
    1380:	40 34       	cpi	r20, 0x40	; 64
    1382:	51 05       	cpc	r21, r1
    1384:	a1 f0       	breq	.+40     	; 0x13ae <udd_ep_alloc+0x86>
    1386:	40 31       	cpi	r20, 0x10	; 16
    1388:	51 05       	cpc	r21, r1
    138a:	d9 f4       	brne	.+54     	; 0x13c2 <udd_ep_alloc+0x9a>
    138c:	0c c0       	rjmp	.+24     	; 0x13a6 <udd_ep_alloc+0x7e>
    138e:	41 15       	cp	r20, r1
    1390:	32 e0       	ldi	r19, 0x02	; 2
    1392:	53 07       	cpc	r21, r19
    1394:	91 f0       	breq	.+36     	; 0x13ba <udd_ep_alloc+0x92>
    1396:	4f 3f       	cpi	r20, 0xFF	; 255
    1398:	33 e0       	ldi	r19, 0x03	; 3
    139a:	53 07       	cpc	r21, r19
    139c:	81 f0       	breq	.+32     	; 0x13be <udd_ep_alloc+0x96>
    139e:	41 15       	cp	r20, r1
    13a0:	51 40       	sbci	r21, 0x01	; 1
    13a2:	79 f4       	brne	.+30     	; 0x13c2 <udd_ep_alloc+0x9a>
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <udd_ep_alloc+0x8e>
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	0d c0       	rjmp	.+26     	; 0x13c4 <udd_ep_alloc+0x9c>
    13aa:	42 e0       	ldi	r20, 0x02	; 2
    13ac:	0b c0       	rjmp	.+22     	; 0x13c4 <udd_ep_alloc+0x9c>
    13ae:	43 e0       	ldi	r20, 0x03	; 3
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <udd_ep_alloc+0x9c>
    13b2:	44 e0       	ldi	r20, 0x04	; 4
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <udd_ep_alloc+0x9c>
    13b6:	45 e0       	ldi	r20, 0x05	; 5
    13b8:	05 c0       	rjmp	.+10     	; 0x13c4 <udd_ep_alloc+0x9c>
    13ba:	46 e0       	ldi	r20, 0x06	; 6
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <udd_ep_alloc+0x9c>
    13be:	47 e0       	ldi	r20, 0x07	; 7
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <udd_ep_alloc+0x9c>
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	fc 01       	movw	r30, r24
    13c6:	ee 0f       	add	r30, r30
    13c8:	ff 1f       	adc	r31, r31
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	e8 5a       	subi	r30, 0xA8	; 168
    13d4:	fd 4d       	sbci	r31, 0xDD	; 221
    13d6:	15 86       	std	Z+13, r1	; 0x0d
    13d8:	36 e0       	ldi	r19, 0x06	; 6
    13da:	34 87       	std	Z+12, r19	; 0x0c
    13dc:	24 2b       	or	r18, r20
    13de:	25 87       	std	Z+13, r18	; 0x0d
    13e0:	fc 01       	movw	r30, r24
    13e2:	ee 0f       	add	r30, r30
    13e4:	ff 1f       	adc	r31, r31
    13e6:	ee 0f       	add	r30, r30
    13e8:	ff 1f       	adc	r31, r31
    13ea:	ee 0f       	add	r30, r30
    13ec:	ff 1f       	adc	r31, r31
    13ee:	e8 5a       	subi	r30, 0xA8	; 168
    13f0:	fd 4d       	sbci	r31, 0xDD	; 221
    13f2:	25 85       	ldd	r18, Z+13	; 0x0d
    13f4:	20 7c       	andi	r18, 0xC0	; 192
    13f6:	20 3c       	cpi	r18, 0xC0	; 192
    13f8:	69 f4       	brne	.+26     	; 0x1414 <udd_ep_alloc+0xec>
    13fa:	fc 01       	movw	r30, r24
    13fc:	ee 0f       	add	r30, r30
    13fe:	ff 1f       	adc	r31, r31
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	e8 5a       	subi	r30, 0xA8	; 168
    140a:	fd 4d       	sbci	r31, 0xDD	; 221
    140c:	25 85       	ldd	r18, Z+13	; 0x0d
    140e:	27 70       	andi	r18, 0x07	; 7
    1410:	27 30       	cpi	r18, 0x07	; 7
    1412:	81 f0       	breq	.+32     	; 0x1434 <udd_ep_alloc+0x10c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	fc 01       	movw	r30, r24
    1422:	e8 5a       	subi	r30, 0xA8	; 168
    1424:	fd 4d       	sbci	r31, 0xDD	; 221
    1426:	85 85       	ldd	r24, Z+13	; 0x0d
    1428:	80 62       	ori	r24, 0x20	; 32
    142a:	85 87       	std	Z+13, r24	; 0x0d
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	08 95       	ret
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	08 95       	ret

00001438 <udd_ep_is_halted>:
    1438:	e8 2f       	mov	r30, r24
    143a:	ef 70       	andi	r30, 0x0F	; 15
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	ee 0f       	add	r30, r30
    1440:	ff 1f       	adc	r31, r31
    1442:	08 2e       	mov	r0, r24
    1444:	00 0c       	add	r0, r0
    1446:	99 0b       	sbc	r25, r25
    1448:	88 27       	eor	r24, r24
    144a:	99 0f       	add	r25, r25
    144c:	88 1f       	adc	r24, r24
    144e:	99 27       	eor	r25, r25
    1450:	e8 0f       	add	r30, r24
    1452:	f9 1f       	adc	r31, r25
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	e8 5a       	subi	r30, 0xA8	; 168
    1462:	fd 4d       	sbci	r31, 0xDD	; 221
    1464:	85 85       	ldd	r24, Z+13	; 0x0d
    1466:	82 fb       	bst	r24, 2
    1468:	88 27       	eor	r24, r24
    146a:	80 f9       	bld	r24, 0
    146c:	08 95       	ret

0000146e <udd_ep_clear_halt>:
    146e:	28 2f       	mov	r18, r24
    1470:	2f 70       	andi	r18, 0x0F	; 15
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	a9 01       	movw	r20, r18
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	28 2f       	mov	r18, r24
    147c:	08 2e       	mov	r0, r24
    147e:	00 0c       	add	r0, r0
    1480:	33 0b       	sbc	r19, r19
    1482:	22 27       	eor	r18, r18
    1484:	33 0f       	add	r19, r19
    1486:	22 1f       	adc	r18, r18
    1488:	33 27       	eor	r19, r19
    148a:	24 0f       	add	r18, r20
    148c:	35 1f       	adc	r19, r21
    148e:	f9 01       	movw	r30, r18
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	e8 5a       	subi	r30, 0xA8	; 168
    149e:	fd 4d       	sbci	r31, 0xDD	; 221
    14a0:	95 85       	ldd	r25, Z+13	; 0x0d
    14a2:	92 ff       	sbrs	r25, 2
    14a4:	17 c0       	rjmp	.+46     	; 0x14d4 <udd_ep_clear_halt+0x66>
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	f9 01       	movw	r30, r18
    14b4:	e8 5a       	subi	r30, 0xA8	; 168
    14b6:	fd 4d       	sbci	r31, 0xDD	; 221
    14b8:	95 85       	ldd	r25, Z+13	; 0x0d
    14ba:	9b 7f       	andi	r25, 0xFB	; 251
    14bc:	95 87       	std	Z+13, r25	; 0x0d
    14be:	85 dc       	rcall	.-1782   	; 0xdca <udd_ep_get_job>
    14c0:	fc 01       	movw	r30, r24
    14c2:	80 81       	ld	r24, Z
    14c4:	80 ff       	sbrs	r24, 0
    14c6:	06 c0       	rjmp	.+12     	; 0x14d4 <udd_ep_clear_halt+0x66>
    14c8:	8e 7f       	andi	r24, 0xFE	; 254
    14ca:	80 83       	st	Z, r24
    14cc:	07 80       	ldd	r0, Z+7	; 0x07
    14ce:	f0 85       	ldd	r31, Z+8	; 0x08
    14d0:	e0 2d       	mov	r30, r0
    14d2:	19 95       	eicall
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	08 95       	ret

000014d8 <udd_ep_run>:
    14d8:	7f 92       	push	r7
    14da:	8f 92       	push	r8
    14dc:	9f 92       	push	r9
    14de:	af 92       	push	r10
    14e0:	bf 92       	push	r11
    14e2:	cf 92       	push	r12
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	98 2e       	mov	r9, r24
    14f4:	86 2e       	mov	r8, r22
    14f6:	6a 01       	movw	r12, r20
    14f8:	79 01       	movw	r14, r18
    14fa:	67 dc       	rcall	.-1842   	; 0xdca <udd_ep_get_job>
    14fc:	5c 01       	movw	r10, r24
    14fe:	79 2c       	mov	r7, r9
    1500:	77 1c       	adc	r7, r7
    1502:	77 24       	eor	r7, r7
    1504:	77 1c       	adc	r7, r7
    1506:	c9 2d       	mov	r28, r9
    1508:	cf 70       	andi	r28, 0x0F	; 15
    150a:	d0 e0       	ldi	r29, 0x00	; 0
    150c:	cc 0f       	add	r28, r28
    150e:	dd 1f       	adc	r29, r29
    1510:	c7 0d       	add	r28, r7
    1512:	d1 1d       	adc	r29, r1
    1514:	fe 01       	movw	r30, r28
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	e8 5a       	subi	r30, 0xA8	; 168
    1524:	fd 4d       	sbci	r31, 0xDD	; 221
    1526:	85 85       	ldd	r24, Z+13	; 0x0d
    1528:	80 7c       	andi	r24, 0xC0	; 192
    152a:	09 f4       	brne	.+2      	; 0x152e <udd_ep_run+0x56>
    152c:	7d c0       	rjmp	.+250    	; 0x1628 <udd_ep_run+0x150>
    152e:	fe 01       	movw	r30, r28
    1530:	ee 0f       	add	r30, r30
    1532:	ff 1f       	adc	r31, r31
    1534:	ee 0f       	add	r30, r30
    1536:	ff 1f       	adc	r31, r31
    1538:	ee 0f       	add	r30, r30
    153a:	ff 1f       	adc	r31, r31
    153c:	e8 5a       	subi	r30, 0xA8	; 168
    153e:	fd 4d       	sbci	r31, 0xDD	; 221
    1540:	85 85       	ldd	r24, Z+13	; 0x0d
    1542:	80 7c       	andi	r24, 0xC0	; 192
    1544:	80 3c       	cpi	r24, 0xC0	; 192
    1546:	61 f0       	breq	.+24     	; 0x1560 <udd_ep_run+0x88>
    1548:	fe 01       	movw	r30, r28
    154a:	ee 0f       	add	r30, r30
    154c:	ff 1f       	adc	r31, r31
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	e8 5a       	subi	r30, 0xA8	; 168
    1558:	fd 4d       	sbci	r31, 0xDD	; 221
    155a:	85 85       	ldd	r24, Z+13	; 0x0d
    155c:	82 fd       	sbrc	r24, 2
    155e:	66 c0       	rjmp	.+204    	; 0x162c <udd_ep_run+0x154>
    1560:	8f b7       	in	r24, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	f5 01       	movw	r30, r10
    1566:	90 81       	ld	r25, Z
    1568:	90 ff       	sbrs	r25, 0
    156a:	03 c0       	rjmp	.+6      	; 0x1572 <udd_ep_run+0x9a>
    156c:	8f bf       	out	0x3f, r24	; 63
    156e:	71 2c       	mov	r7, r1
    1570:	5e c0       	rjmp	.+188    	; 0x162e <udd_ep_run+0x156>
    1572:	f5 01       	movw	r30, r10
    1574:	90 81       	ld	r25, Z
    1576:	91 60       	ori	r25, 0x01	; 1
    1578:	90 83       	st	Z, r25
    157a:	8f bf       	out	0x3f, r24	; 63
    157c:	c1 82       	std	Z+1, r12	; 0x01
    157e:	d2 82       	std	Z+2, r13	; 0x02
    1580:	e3 82       	std	Z+3, r14	; 0x03
    1582:	f4 82       	std	Z+4, r15	; 0x04
    1584:	15 82       	std	Z+5, r1	; 0x05
    1586:	16 82       	std	Z+6, r1	; 0x06
    1588:	07 83       	std	Z+7, r16	; 0x07
    158a:	10 87       	std	Z+8, r17	; 0x08
    158c:	81 10       	cpse	r8, r1
    158e:	06 c0       	rjmp	.+12     	; 0x159c <udd_ep_run+0xc4>
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	e1 14       	cp	r14, r1
    1594:	f1 04       	cpc	r15, r1
    1596:	19 f0       	breq	.+6      	; 0x159e <udd_ep_run+0xc6>
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	01 c0       	rjmp	.+2      	; 0x159e <udd_ep_run+0xc6>
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	f5 01       	movw	r30, r10
    15a0:	80 81       	ld	r24, Z
    15a2:	90 fb       	bst	r25, 0
    15a4:	81 f9       	bld	r24, 1
    15a6:	8b 7f       	andi	r24, 0xFB	; 251
    15a8:	80 83       	st	Z, r24
    15aa:	77 20       	and	r7, r7
    15ac:	59 f0       	breq	.+22     	; 0x15c4 <udd_ep_run+0xec>
    15ae:	cc 0f       	add	r28, r28
    15b0:	dd 1f       	adc	r29, r29
    15b2:	cc 0f       	add	r28, r28
    15b4:	dd 1f       	adc	r29, r29
    15b6:	cc 0f       	add	r28, r28
    15b8:	dd 1f       	adc	r29, r29
    15ba:	c8 5a       	subi	r28, 0xA8	; 168
    15bc:	dd 4d       	sbci	r29, 0xDD	; 221
    15be:	1a 8a       	std	Y+18, r1	; 0x12
    15c0:	1b 8a       	std	Y+19, r1	; 0x13
    15c2:	2d c0       	rjmp	.+90     	; 0x161e <udd_ep_run+0x146>
    15c4:	fe 01       	movw	r30, r28
    15c6:	ee 0f       	add	r30, r30
    15c8:	ff 1f       	adc	r31, r31
    15ca:	ee 0f       	add	r30, r30
    15cc:	ff 1f       	adc	r31, r31
    15ce:	ee 0f       	add	r30, r30
    15d0:	ff 1f       	adc	r31, r31
    15d2:	e8 5a       	subi	r30, 0xA8	; 168
    15d4:	fd 4d       	sbci	r31, 0xDD	; 221
    15d6:	85 85       	ldd	r24, Z+13	; 0x0d
    15d8:	80 7c       	andi	r24, 0xC0	; 192
    15da:	80 3c       	cpi	r24, 0xC0	; 192
    15dc:	a1 f4       	brne	.+40     	; 0x1606 <udd_ep_run+0x12e>
    15de:	ce 01       	movw	r24, r28
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	8c 59       	subi	r24, 0x9C	; 156
    15ee:	9d 4d       	sbci	r25, 0xDD	; 221
    15f0:	c3 db       	rcall	.-2170   	; 0xd78 <udd_ep_get_size>
    15f2:	bc 01       	movw	r22, r24
    15f4:	c7 01       	movw	r24, r14
    15f6:	e8 d6       	rcall	.+3536   	; 0x23c8 <__udivmodhi4>
    15f8:	89 2b       	or	r24, r25
    15fa:	29 f0       	breq	.+10     	; 0x1606 <udd_ep_run+0x12e>
    15fc:	f5 01       	movw	r30, r10
    15fe:	80 81       	ld	r24, Z
    1600:	8e 7f       	andi	r24, 0xFE	; 254
    1602:	80 83       	st	Z, r24
    1604:	14 c0       	rjmp	.+40     	; 0x162e <udd_ep_run+0x156>
    1606:	cc 0f       	add	r28, r28
    1608:	dd 1f       	adc	r29, r29
    160a:	cc 0f       	add	r28, r28
    160c:	dd 1f       	adc	r29, r29
    160e:	cc 0f       	add	r28, r28
    1610:	dd 1f       	adc	r29, r29
    1612:	c8 5a       	subi	r28, 0xA8	; 168
    1614:	dd 4d       	sbci	r29, 0xDD	; 221
    1616:	1e 86       	std	Y+14, r1	; 0x0e
    1618:	1f 86       	std	Y+15, r1	; 0x0f
    161a:	1a 8a       	std	Y+18, r1	; 0x12
    161c:	1b 8a       	std	Y+19, r1	; 0x13
    161e:	89 2d       	mov	r24, r9
    1620:	5e dc       	rcall	.-1860   	; 0xede <udd_ep_trans_complet>
    1622:	77 24       	eor	r7, r7
    1624:	73 94       	inc	r7
    1626:	03 c0       	rjmp	.+6      	; 0x162e <udd_ep_run+0x156>
    1628:	71 2c       	mov	r7, r1
    162a:	01 c0       	rjmp	.+2      	; 0x162e <udd_ep_run+0x156>
    162c:	71 2c       	mov	r7, r1
    162e:	87 2d       	mov	r24, r7
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	7f 90       	pop	r7
    164a:	08 95       	ret

0000164c <udd_ep_abort>:
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	18 2f       	mov	r17, r24
    1658:	f8 2e       	mov	r15, r24
    165a:	ff 1c       	adc	r15, r15
    165c:	ff 24       	eor	r15, r15
    165e:	ff 1c       	adc	r15, r15
    1660:	c8 2f       	mov	r28, r24
    1662:	cf 70       	andi	r28, 0x0F	; 15
    1664:	d0 e0       	ldi	r29, 0x00	; 0
    1666:	cc 0f       	add	r28, r28
    1668:	dd 1f       	adc	r29, r29
    166a:	cf 0d       	add	r28, r15
    166c:	d1 1d       	adc	r29, r1
    166e:	ad db       	rcall	.-2214   	; 0xdca <udd_ep_get_job>
    1670:	dc 01       	movw	r26, r24
    1672:	fe 01       	movw	r30, r28
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	ec 59       	subi	r30, 0x9C	; 156
    1682:	fd 4d       	sbci	r31, 0xDD	; 221
    1684:	02 e0       	ldi	r16, 0x02	; 2
    1686:	05 93       	las	Z, r16
    1688:	8c 91       	ld	r24, X
    168a:	80 ff       	sbrs	r24, 0
    168c:	22 c0       	rjmp	.+68     	; 0x16d2 <udd_ep_abort+0x86>
    168e:	8e 7f       	andi	r24, 0xFE	; 254
    1690:	8c 93       	st	X, r24
    1692:	17 96       	adiw	r26, 0x07	; 7
    1694:	ed 91       	ld	r30, X+
    1696:	fc 91       	ld	r31, X
    1698:	18 97       	sbiw	r26, 0x08	; 8
    169a:	30 97       	sbiw	r30, 0x00	; 0
    169c:	d1 f0       	breq	.+52     	; 0x16d2 <udd_ep_abort+0x86>
    169e:	ff 20       	and	r15, r15
    16a0:	59 f0       	breq	.+22     	; 0x16b8 <udd_ep_abort+0x6c>
    16a2:	cc 0f       	add	r28, r28
    16a4:	dd 1f       	adc	r29, r29
    16a6:	cc 0f       	add	r28, r28
    16a8:	dd 1f       	adc	r29, r29
    16aa:	cc 0f       	add	r28, r28
    16ac:	dd 1f       	adc	r29, r29
    16ae:	c8 5a       	subi	r28, 0xA8	; 168
    16b0:	dd 4d       	sbci	r29, 0xDD	; 221
    16b2:	6a 89       	ldd	r22, Y+18	; 0x12
    16b4:	7b 89       	ldd	r23, Y+19	; 0x13
    16b6:	0a c0       	rjmp	.+20     	; 0x16cc <udd_ep_abort+0x80>
    16b8:	cc 0f       	add	r28, r28
    16ba:	dd 1f       	adc	r29, r29
    16bc:	cc 0f       	add	r28, r28
    16be:	dd 1f       	adc	r29, r29
    16c0:	cc 0f       	add	r28, r28
    16c2:	dd 1f       	adc	r29, r29
    16c4:	c8 5a       	subi	r28, 0xA8	; 168
    16c6:	dd 4d       	sbci	r29, 0xDD	; 221
    16c8:	6e 85       	ldd	r22, Y+14	; 0x0e
    16ca:	7f 85       	ldd	r23, Y+15	; 0x0f
    16cc:	41 2f       	mov	r20, r17
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	19 95       	eicall
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	08 95       	ret

000016de <udd_ep_free>:
    16de:	cf 93       	push	r28
    16e0:	c8 2f       	mov	r28, r24
    16e2:	b4 df       	rcall	.-152    	; 0x164c <udd_ep_abort>
    16e4:	ec 2f       	mov	r30, r28
    16e6:	ef 70       	andi	r30, 0x0F	; 15
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	8c 2f       	mov	r24, r28
    16f0:	cc 0f       	add	r28, r28
    16f2:	99 0b       	sbc	r25, r25
    16f4:	88 27       	eor	r24, r24
    16f6:	99 0f       	add	r25, r25
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 27       	eor	r25, r25
    16fc:	e8 0f       	add	r30, r24
    16fe:	f9 1f       	adc	r31, r25
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	ee 0f       	add	r30, r30
    1706:	ff 1f       	adc	r31, r31
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	e8 5a       	subi	r30, 0xA8	; 168
    170e:	fd 4d       	sbci	r31, 0xDD	; 221
    1710:	15 86       	std	Z+13, r1	; 0x0d
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <udd_ep_set_halt>:
    1716:	0f 93       	push	r16
    1718:	e8 2f       	mov	r30, r24
    171a:	ef 70       	andi	r30, 0x0F	; 15
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	28 2f       	mov	r18, r24
    1724:	08 2e       	mov	r0, r24
    1726:	00 0c       	add	r0, r0
    1728:	33 0b       	sbc	r19, r19
    172a:	22 27       	eor	r18, r18
    172c:	33 0f       	add	r19, r19
    172e:	22 1f       	adc	r18, r18
    1730:	33 27       	eor	r19, r19
    1732:	e2 0f       	add	r30, r18
    1734:	f3 1f       	adc	r31, r19
    1736:	ee 0f       	add	r30, r30
    1738:	ff 1f       	adc	r31, r31
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	df 01       	movw	r26, r30
    1744:	a8 5a       	subi	r26, 0xA8	; 168
    1746:	bd 4d       	sbci	r27, 0xDD	; 221
    1748:	1d 96       	adiw	r26, 0x0d	; 13
    174a:	9c 91       	ld	r25, X
    174c:	1d 97       	sbiw	r26, 0x0d	; 13
    174e:	94 60       	ori	r25, 0x04	; 4
    1750:	1d 96       	adiw	r26, 0x0d	; 13
    1752:	9c 93       	st	X, r25
    1754:	ec 59       	subi	r30, 0x9C	; 156
    1756:	fd 4d       	sbci	r31, 0xDD	; 221
    1758:	01 e0       	ldi	r16, 0x01	; 1
    175a:	06 93       	lac	Z, r16
    175c:	77 df       	rcall	.-274    	; 0x164c <udd_ep_abort>
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <__vector_125>:
 * USB bus event interrupt includes :
 * - USB line events SOF, reset, suspend, resume, wakeup
 * - endpoint control errors underflow, overflow, stall
 */
ISR(USB_BUSEVENT_vect)
{
    1764:	1f 92       	push	r1
    1766:	0f 92       	push	r0
    1768:	0f b6       	in	r0, 0x3f	; 63
    176a:	0f 92       	push	r0
    176c:	11 24       	eor	r1, r1
    176e:	08 b6       	in	r0, 0x38	; 56
    1770:	0f 92       	push	r0
    1772:	18 be       	out	0x38, r1	; 56
    1774:	09 b6       	in	r0, 0x39	; 57
    1776:	0f 92       	push	r0
    1778:	19 be       	out	0x39, r1	; 57
    177a:	0b b6       	in	r0, 0x3b	; 59
    177c:	0f 92       	push	r0
    177e:	1b be       	out	0x3b, r1	; 59
    1780:	0f 93       	push	r16
    1782:	2f 93       	push	r18
    1784:	3f 93       	push	r19
    1786:	4f 93       	push	r20
    1788:	5f 93       	push	r21
    178a:	6f 93       	push	r22
    178c:	7f 93       	push	r23
    178e:	8f 93       	push	r24
    1790:	9f 93       	push	r25
    1792:	af 93       	push	r26
    1794:	bf 93       	push	r27
    1796:	ef 93       	push	r30
    1798:	ff 93       	push	r31
	if (udd_is_start_of_frame_event()) {
    179a:	80 91 cb 04 	lds	r24, 0x04CB
    179e:	88 23       	and	r24, r24
    17a0:	34 f4       	brge	.+12     	; 0x17ae <__vector_125+0x4a>
		udd_ack_start_of_frame_event();
    17a2:	80 e8       	ldi	r24, 0x80	; 128
    17a4:	80 93 ca 04 	sts	0x04CA, r24
		udc_sof_notify();
    17a8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <udc_sof_notify>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    17ac:	82 c0       	rjmp	.+260    	; 0x18b2 <__vector_125+0x14e>
}

static bool udd_ctrl_interrupt_error(void)
{
	// Underflow only managed for control endpoint
	if (udd_is_underflow_event()) {
    17ae:	80 91 cb 04 	lds	r24, 0x04CB
    17b2:	82 ff       	sbrs	r24, 2
    17b4:	20 c0       	rjmp	.+64     	; 0x17f6 <__vector_125+0x92>
		udd_ack_underflow_event();
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_in_underflow()) {
    17bc:	80 91 6c 22 	lds	r24, 0x226C
    17c0:	86 ff       	sbrs	r24, 6
    17c2:	77 c0       	rjmp	.+238    	; 0x18b2 <__vector_125+0x14e>
	udd_control_out_clear_NACK0();
}

static void udd_ctrl_underflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    17c4:	80 91 cc 04 	lds	r24, 0x04CC
    17c8:	81 fd       	sbrc	r24, 1
    17ca:	73 c0       	rjmp	.+230    	; 0x18b2 <__vector_125+0x14e>
    17cc:	19 db       	rcall	.-2510   	; 0xe00 <udd_ctrl_interrupt_tc_setup>
    17ce:	81 11       	cpse	r24, r1
    17d0:	70 c0       	rjmp	.+224    	; 0x18b2 <__vector_125+0x14e>
		return; // underflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    17d2:	80 91 55 22 	lds	r24, 0x2255
    17d6:	81 30       	cpi	r24, 0x01	; 1
    17d8:	11 f4       	brne	.+4      	; 0x17de <__vector_125+0x7a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
    17da:	4c da       	rcall	.-2920   	; 0xc74 <udd_ctrl_send_zlp_in>
    17dc:	6a c0       	rjmp	.+212    	; 0x18b2 <__vector_125+0x14e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    17de:	84 30       	cpi	r24, 0x04	; 4
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <__vector_125+0x80>
    17e2:	67 c0       	rjmp	.+206    	; 0x18b2 <__vector_125+0x14e>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data and following status stage
		udd_control_in_enable_stall();
    17e4:	ed e6       	ldi	r30, 0x6D	; 109
    17e6:	f2 e2       	ldi	r31, 0x22	; 34
    17e8:	04 e0       	ldi	r16, 0x04	; 4
    17ea:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    17ec:	e5 e6       	ldi	r30, 0x65	; 101
    17ee:	f2 e2       	ldi	r31, 0x22	; 34
    17f0:	04 e0       	ldi	r16, 0x04	; 4
    17f2:	05 93       	las	Z, r16
    17f4:	5e c0       	rjmp	.+188    	; 0x18b2 <__vector_125+0x14e>
			udd_ctrl_underflow();
		}
		return true;
	}
	// Overflow only managed for control endpoint
	if (udd_is_overflow_event()) {
    17f6:	80 91 cb 04 	lds	r24, 0x04CB
    17fa:	81 ff       	sbrs	r24, 1
    17fc:	55 c0       	rjmp	.+170    	; 0x18a8 <__vector_125+0x144>
		udd_ack_overflow_event();
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	80 93 ca 04 	sts	0x04CA, r24
		if (udd_control_out_overflow()) {
    1804:	80 91 64 22 	lds	r24, 0x2264
    1808:	86 ff       	sbrs	r24, 6
    180a:	53 c0       	rjmp	.+166    	; 0x18b2 <__vector_125+0x14e>
	}
}

static void udd_ctrl_overflow(void)
{
	if (udd_is_tc_event() || udd_ctrl_interrupt_tc_setup()) {
    180c:	80 91 cc 04 	lds	r24, 0x04CC
    1810:	81 fd       	sbrc	r24, 1
    1812:	4f c0       	rjmp	.+158    	; 0x18b2 <__vector_125+0x14e>
    1814:	f5 da       	rcall	.-2582   	; 0xe00 <udd_ctrl_interrupt_tc_setup>
    1816:	81 11       	cpse	r24, r1
    1818:	4c c0       	rjmp	.+152    	; 0x18b2 <__vector_125+0x14e>
		return; // overflow ignored if a transfer complete has been no processed
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    181a:	80 91 55 22 	lds	r24, 0x2255
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	41 f4       	brne	.+16     	; 0x1832 <__vector_125+0xce>
	udd_control_in_clear_NACK0();
}

static void udd_ctrl_send_zlp_out(void)
{
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    1822:	84 e0       	ldi	r24, 0x04	; 4
    1824:	80 93 55 22 	sts	0x2255, r24
	// Valid reception of OUT packet on control endpoint
	udd_control_out_clear_NACK0();
    1828:	e4 e6       	ldi	r30, 0x64	; 100
    182a:	f2 e2       	ldi	r31, 0x22	; 34
    182c:	02 e0       	ldi	r16, 0x02	; 2
    182e:	06 93       	lac	Z, r16
    1830:	40 c0       	rjmp	.+128    	; 0x18b2 <__vector_125+0x14e>
	}
	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
		// Host want to stop IN transaction
		// then stop to wait IN data phase and wait OUT ZLP handshake
		udd_ctrl_send_zlp_out();
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	09 f0       	breq	.+2      	; 0x1838 <__vector_125+0xd4>
    1836:	3d c0       	rjmp	.+122    	; 0x18b2 <__vector_125+0x14e>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data and following status stage
		udd_control_in_enable_stall();
    1838:	ed e6       	ldi	r30, 0x6D	; 109
    183a:	f2 e2       	ldi	r31, 0x22	; 34
    183c:	04 e0       	ldi	r16, 0x04	; 4
    183e:	05 93       	las	Z, r16
		udd_control_out_enable_stall();
    1840:	e5 e6       	ldi	r30, 0x65	; 101
    1842:	f2 e2       	ldi	r31, 0x22	; 34
    1844:	04 e0       	ldi	r16, 0x04	; 4
    1846:	05 93       	las	Z, r16
    1848:	34 c0       	rjmp	.+104    	; 0x18b2 <__vector_125+0x14e>

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
		udd_ack_reset_event();
    184a:	80 e1       	ldi	r24, 0x10	; 16
    184c:	80 93 ca 04 	sts	0x04CA, r24
#if (0!=USB_DEVICE_MAX_EP)
		// Abort all endpoint jobs on going
		uint8_t i;
		for (i = 1; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_abort(i);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	fc de       	rcall	.-520    	; 0x164c <udd_ep_abort>
			udd_ep_abort(i | USB_EP_DIR_IN);
    1854:	81 e8       	ldi	r24, 0x81	; 129
    1856:	fa de       	rcall	.-524    	; 0x164c <udd_ep_abort>
		}
#endif
		udc_reset();
    1858:	0e 94 bb 02 	call	0x576	; 0x576 <udc_reset>

		// Reset USB address to 0
		udd_set_device_address(0);
    185c:	10 92 c3 04 	sts	0x04C3, r1
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    1860:	e8 e5       	ldi	r30, 0x58	; 88
    1862:	f2 e2       	ldi	r31, 0x22	; 34
    1864:	15 86       	std	Z+13, r1	; 0x0d
	udd_endpoint_clear_status(ep_ctrl);
    1866:	96 e0       	ldi	r25, 0x06	; 6
    1868:	94 87       	std	Z+12, r25	; 0x0c
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    186a:	80 e4       	ldi	r24, 0x40	; 64
    186c:	85 87       	std	Z+13, r24	; 0x0d
#endif
	}

	// Enable endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	udd_endpoint_disable(ep_ctrl);
    186e:	15 8a       	std	Z+21, r1	; 0x15
	udd_endpoint_clear_status(ep_ctrl);
    1870:	94 8b       	std	Z+20, r25	; 0x14
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
    1872:	85 8b       	std	Z+21, r24	; 0x15
		udd_set_device_address(0);
		// Alloc and configure control endpoint
		udd_ep_init(0, USB_EP_TYPE_CONTROL, USB_DEVICE_EP_CTRL_SIZE);
		udd_ep_init(0 | USB_EP_DIR_IN, USB_EP_TYPE_CONTROL,
				USB_DEVICE_EP_CTRL_SIZE);
		udd_control_out_set_buf(&udd_ctrl_buffer);
    1874:	89 e4       	ldi	r24, 0x49	; 73
    1876:	92 e2       	ldi	r25, 0x22	; 34
    1878:	80 8b       	std	Z+16, r24	; 0x10
    187a:	91 8b       	std	Z+17, r25	; 0x11
		// Reset endpoint control management
		udd_ctrl_init();
    187c:	c6 d9       	rcall	.-3188   	; 0xc0a <udd_ctrl_init>
		goto udd_interrupt_bus_event_end;
    187e:	19 c0       	rjmp	.+50     	; 0x18b2 <__vector_125+0x14e>
	}

	if (udd_is_suspend_event()) {
    1880:	80 91 cb 04 	lds	r24, 0x04CB
    1884:	86 ff       	sbrs	r24, 6
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <__vector_125+0x130>
		udd_ack_suspend_event();
    1888:	80 e4       	ldi	r24, 0x40	; 64
    188a:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(false); // Enter in SUSPEND mode
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	93 d9       	rcall	.-3290   	; 0xbb8 <udd_sleep_mode>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    1892:	0f c0       	rjmp	.+30     	; 0x18b2 <__vector_125+0x14e>
	}

	if (udd_is_resume_event()) {
    1894:	80 91 cb 04 	lds	r24, 0x04CB
    1898:	85 ff       	sbrs	r24, 5
    189a:	0b c0       	rjmp	.+22     	; 0x18b2 <__vector_125+0x14e>
		udd_ack_resume_event();
    189c:	80 e2       	ldi	r24, 0x20	; 32
    189e:	80 93 ca 04 	sts	0x04CA, r24
		udd_sleep_mode(true); // Enter in power reduction mode
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	89 d9       	rcall	.-3310   	; 0xbb8 <udd_sleep_mode>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_bus_event_end;
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <__vector_125+0x14e>
	}

	if (udd_ctrl_interrupt_error()) {
		goto udd_interrupt_bus_event_end;
	}
	if (udd_is_reset_event()) {
    18a8:	80 91 cb 04 	lds	r24, 0x04CB
    18ac:	84 ff       	sbrs	r24, 4
    18ae:	e8 cf       	rjmp	.-48     	; 0x1880 <__vector_125+0x11c>
    18b0:	cc cf       	rjmp	.-104    	; 0x184a <__vector_125+0xe6>
		goto udd_interrupt_bus_event_end;
	}

udd_interrupt_bus_event_end:
	return;
}
    18b2:	ff 91       	pop	r31
    18b4:	ef 91       	pop	r30
    18b6:	bf 91       	pop	r27
    18b8:	af 91       	pop	r26
    18ba:	9f 91       	pop	r25
    18bc:	8f 91       	pop	r24
    18be:	7f 91       	pop	r23
    18c0:	6f 91       	pop	r22
    18c2:	5f 91       	pop	r21
    18c4:	4f 91       	pop	r20
    18c6:	3f 91       	pop	r19
    18c8:	2f 91       	pop	r18
    18ca:	0f 91       	pop	r16
    18cc:	0f 90       	pop	r0
    18ce:	0b be       	out	0x3b, r0	; 59
    18d0:	0f 90       	pop	r0
    18d2:	09 be       	out	0x39, r0	; 57
    18d4:	0f 90       	pop	r0
    18d6:	08 be       	out	0x38, r0	; 56
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	0f 90       	pop	r0
    18de:	1f 90       	pop	r1
    18e0:	18 95       	reti

000018e2 <__vector_126>:
 * \brief Function called by USB transfer complete interrupt
 *
 * USB transfer complete interrupt includes events about endpoint transfer on all endpoints.
 */
ISR(USB_TRNCOMPL_vect)
{
    18e2:	1f 92       	push	r1
    18e4:	0f 92       	push	r0
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	0f 92       	push	r0
    18ea:	11 24       	eor	r1, r1
    18ec:	08 b6       	in	r0, 0x38	; 56
    18ee:	0f 92       	push	r0
    18f0:	18 be       	out	0x38, r1	; 56
    18f2:	09 b6       	in	r0, 0x39	; 57
    18f4:	0f 92       	push	r0
    18f6:	19 be       	out	0x39, r1	; 57
    18f8:	0a b6       	in	r0, 0x3a	; 58
    18fa:	0f 92       	push	r0
    18fc:	1a be       	out	0x3a, r1	; 58
    18fe:	0b b6       	in	r0, 0x3b	; 59
    1900:	0f 92       	push	r0
    1902:	1b be       	out	0x3b, r1	; 59
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	4f 93       	push	r20
    190e:	5f 93       	push	r21
    1910:	6f 93       	push	r22
    1912:	7f 93       	push	r23
    1914:	8f 93       	push	r24
    1916:	9f 93       	push	r25
    1918:	af 93       	push	r26
    191a:	bf 93       	push	r27
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ef 93       	push	r30
    1922:	ff 93       	push	r31
	int8_t rp;
	UDD_EP_t *ep_ctrl;
	udd_ep_id_t ep;
#endif

	if (!udd_is_tc_event()) {
    1924:	80 91 cc 04 	lds	r24, 0x04CC
    1928:	81 fd       	sbrc	r24, 1
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <__vector_126+0x50>
		// If no other transfer complete
		// then check reception of SETUP packet on control endpoint
		if (udd_ctrl_interrupt_tc_setup()) {
    192c:	69 da       	rcall	.-2862   	; 0xe00 <udd_ctrl_interrupt_tc_setup>
    192e:	81 11       	cpse	r24, r1
    1930:	c1 c0       	rjmp	.+386    	; 0x1ab4 <__vector_126+0x1d2>
			goto udd_interrupt_tc_end;
		}
		Assert(false);
	}
	// Check IN/OUT transfer complete on all endpoints
	udd_ack_tc_event();
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	80 93 cc 04 	sts	0x04CC, r24

#if (0!=USB_DEVICE_MAX_EP)
	//** Decode TC FIFO
	// Compute ep addr
	rp = udd_get_fifo_rp();
    1938:	80 91 c5 04 	lds	r24, 0x04C5
	i_fifo = 2 * (1 + ~rp);
    193c:	81 95       	neg	r24
    193e:	88 0f       	add	r24, r24
	ad = ((uint16_t) udd_sram.ep_ctrl) - i_fifo;
    1940:	e4 e6       	ldi	r30, 0x64	; 100
    1942:	f2 e2       	ldi	r31, 0x22	; 34
    1944:	e8 1b       	sub	r30, r24
    1946:	f1 09       	sbc	r31, r1
	p_ad = (uint16_t *) ad;
	// Compute ep
	ep_index = (((uint16_t) * p_ad - ((uint16_t) udd_sram.ep_ctrl)) >> 3);
    1948:	20 81       	ld	r18, Z
    194a:	31 81       	ldd	r19, Z+1	; 0x01
    194c:	24 56       	subi	r18, 0x64	; 100
    194e:	32 42       	sbci	r19, 0x22	; 34
    1950:	36 95       	lsr	r19
    1952:	27 95       	ror	r18
    1954:	36 95       	lsr	r19
    1956:	27 95       	ror	r18
    1958:	36 95       	lsr	r19
    195a:	27 95       	ror	r18
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
    195c:	82 2f       	mov	r24, r18
    195e:	86 95       	lsr	r24
    1960:	20 fd       	sbrc	r18, 0
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <__vector_126+0x86>
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	01 c0       	rjmp	.+2      	; 0x196a <__vector_126+0x88>
    1968:	90 e8       	ldi	r25, 0x80	; 128
    196a:	89 0f       	add	r24, r25
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    196c:	e8 2f       	mov	r30, r24
    196e:	ef 70       	andi	r30, 0x0F	; 15
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
			((ep & USB_EP_DIR_IN) ? 1 : 0))];
    1976:	28 2f       	mov	r18, r24
    1978:	08 2e       	mov	r0, r24
    197a:	00 0c       	add	r0, r0
    197c:	33 0b       	sbc	r19, r19
    197e:	22 27       	eor	r18, r18
    1980:	33 0f       	add	r19, r19
    1982:	22 1f       	adc	r18, r18
    1984:	33 27       	eor	r19, r19
	udd_endpoint_set_control(ep_ctrl, (uint8_t) type | (uint8_t) size);
}

static UDD_EP_t *udd_ep_get_ctrl(udd_ep_id_t ep)
{
	return &udd_sram.ep_ctrl[(2 * (ep & USB_EP_ADDR_MASK) +
    1986:	e2 0f       	add	r30, r18
    1988:	f3 1f       	adc	r31, r19
	ep = (ep_index / 2) + ((ep_index & 1) ? USB_EP_DIR_IN : 0);
	Assert(USB_DEVICE_MAX_EP >= (ep & USB_EP_ADDR_MASK));

	// Ack IT TC of endpoint
	ep_ctrl = udd_ep_get_ctrl(ep);
	if (!udd_endpoint_transfer_complete(ep_ctrl)) {
    198a:	df 01       	movw	r26, r30
    198c:	aa 0f       	add	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	aa 0f       	add	r26, r26
    1992:	bb 1f       	adc	r27, r27
    1994:	aa 0f       	add	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	a8 5a       	subi	r26, 0xA8	; 168
    199a:	bd 4d       	sbci	r27, 0xDD	; 221
    199c:	1c 96       	adiw	r26, 0x0c	; 12
    199e:	9c 91       	ld	r25, X
    19a0:	95 ff       	sbrs	r25, 5
    19a2:	88 c0       	rjmp	.+272    	; 0x1ab4 <__vector_126+0x1d2>
		return; // Error, TC is generated by Multipacket transfer
	}
	udd_endpoint_ack_transfer_complete(ep_ctrl);
    19a4:	ee 0f       	add	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	ee 0f       	add	r30, r30
    19ae:	ff 1f       	adc	r31, r31
    19b0:	ec 59       	subi	r30, 0x9C	; 156
    19b2:	fd 4d       	sbci	r31, 0xDD	; 221
    19b4:	00 e2       	ldi	r16, 0x20	; 32
    19b6:	06 93       	lac	Z, r16

	// Check status on control endpoint
	if (ep == 0) {
    19b8:	81 11       	cpse	r24, r1
    19ba:	77 c0       	rjmp	.+238    	; 0x1aaa <__vector_126+0x1c8>

static void udd_ctrl_out_received(void)
{
	uint16_t nb_data;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    19bc:	80 91 55 22 	lds	r24, 0x2255
    19c0:	84 30       	cpi	r24, 0x04	; 4
    19c2:	19 f4       	brne	.+6      	; 0x19ca <__vector_126+0xe8>
		// Valid end of setup request
		udd_ctrl_endofrequest();
    19c4:	65 d9       	rcall	.-3382   	; 0xc90 <udd_ctrl_endofrequest>
		// Reinitializes control endpoint management
		udd_ctrl_init();
    19c6:	21 d9       	rcall	.-3518   	; 0xc0a <udd_ctrl_init>
    19c8:	75 c0       	rjmp	.+234    	; 0x1ab4 <__vector_126+0x1d2>
		return;
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_OUT);

	// Read data received during OUT phase
	nb_data = udd_control_out_get_bytecnt();
    19ca:	00 91 66 22 	lds	r16, 0x2266
    19ce:	10 91 67 22 	lds	r17, 0x2267

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    19d2:	80 91 e4 24 	lds	r24, 0x24E4
    19d6:	90 91 e5 24 	lds	r25, 0x24E5
    19da:	c0 91 51 22 	lds	r28, 0x2251
    19de:	d0 91 52 22 	lds	r29, 0x2252
    19e2:	9e 01       	movw	r18, r28
    19e4:	20 0f       	add	r18, r16
    19e6:	31 1f       	adc	r19, r17
    19e8:	82 17       	cp	r24, r18
    19ea:	93 07       	cpc	r25, r19
    19ec:	18 f4       	brcc	.+6      	; 0x19f4 <__vector_126+0x112>
		// Payload buffer too small, ignore data remaining
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    19ee:	8c 01       	movw	r16, r24
    19f0:	0c 1b       	sub	r16, r28
    19f2:	1d 0b       	sbc	r17, r29
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
    19f4:	80 91 e2 24 	lds	r24, 0x24E2
    19f8:	90 91 e3 24 	lds	r25, 0x24E3
    19fc:	a8 01       	movw	r20, r16
    19fe:	69 e4       	ldi	r22, 0x49	; 73
    1a00:	72 e2       	ldi	r23, 0x22	; 34
    1a02:	8c 0f       	add	r24, r28
    1a04:	9d 1f       	adc	r25, r29
    1a06:	7f d5       	rcall	.+2814   	; 0x2506 <memcpy>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
    1a08:	c0 0f       	add	r28, r16
    1a0a:	d1 1f       	adc	r29, r17
    1a0c:	c0 93 51 22 	sts	0x2251, r28
    1a10:	d0 93 52 22 	sts	0x2252, r29

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1a14:	08 30       	cpi	r16, 0x08	; 8
    1a16:	11 05       	cpc	r17, r1
    1a18:	69 f4       	brne	.+26     	; 0x1a34 <__vector_126+0x152>
			<= (udd_ctrl_prev_payload_nb_trans
			+ udd_ctrl_payload_nb_trans))) {
    1a1a:	80 91 53 22 	lds	r24, 0x2253
    1a1e:	90 91 54 22 	lds	r25, 0x2254
    1a22:	8c 0f       	add	r24, r28
    1a24:	9d 1f       	adc	r25, r29

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || (udd_g_ctrlreq.req.wLength
    1a26:	20 91 e0 24 	lds	r18, 0x24E0
    1a2a:	30 91 e1 24 	lds	r19, 0x24E1
    1a2e:	82 17       	cp	r24, r18
    1a30:	93 07       	cpc	r25, r19
    1a32:	80 f0       	brcs	.+32     	; 0x1a54 <__vector_126+0x172>
		// End of reception because it is a short packet
		// or all data are transfered

		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    1a34:	ea ed       	ldi	r30, 0xDA	; 218
    1a36:	f4 e2       	ldi	r31, 0x24	; 36
    1a38:	c2 87       	std	Z+10, r28	; 0x0a
    1a3a:	d3 87       	std	Z+11, r29	; 0x0b
		if (NULL != udd_g_ctrlreq.over_under_run) {
    1a3c:	06 84       	ldd	r0, Z+14	; 0x0e
    1a3e:	f7 85       	ldd	r31, Z+15	; 0x0f
    1a40:	e0 2d       	mov	r30, r0
    1a42:	30 97       	sbiw	r30, 0x00	; 0
    1a44:	29 f0       	breq	.+10     	; 0x1a50 <__vector_126+0x16e>
			if (!udd_g_ctrlreq.over_under_run()) {
    1a46:	19 95       	eicall
    1a48:	81 11       	cpse	r24, r1
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <__vector_126+0x16e>
				// Stall ZLP
				udd_ctrl_stall_data();
    1a4c:	05 d9       	rcall	.-3574   	; 0xc58 <udd_ctrl_stall_data>
    1a4e:	32 c0       	rjmp	.+100    	; 0x1ab4 <__vector_126+0x1d2>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ctrl_send_zlp_in();
    1a50:	11 d9       	rcall	.-3550   	; 0xc74 <udd_ctrl_send_zlp_in>
    1a52:	30 c0       	rjmp	.+96     	; 0x1ab4 <__vector_126+0x1d2>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    1a54:	80 91 e4 24 	lds	r24, 0x24E4
    1a58:	90 91 e5 24 	lds	r25, 0x24E5
    1a5c:	c8 17       	cp	r28, r24
    1a5e:	d9 07       	cpc	r29, r25
    1a60:	f9 f4       	brne	.+62     	; 0x1aa0 <__vector_126+0x1be>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
    1a62:	e0 91 e8 24 	lds	r30, 0x24E8
    1a66:	f0 91 e9 24 	lds	r31, 0x24E9
    1a6a:	30 97       	sbiw	r30, 0x00	; 0
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <__vector_126+0x190>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
    1a6e:	f4 d8       	rcall	.-3608   	; 0xc58 <udd_ctrl_stall_data>
    1a70:	21 c0       	rjmp	.+66     	; 0x1ab4 <__vector_126+0x1d2>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    1a72:	19 95       	eicall
    1a74:	81 11       	cpse	r24, r1
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <__vector_126+0x19a>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
    1a78:	ef d8       	rcall	.-3618   	; 0xc58 <udd_ctrl_stall_data>
    1a7a:	1c c0       	rjmp	.+56     	; 0x1ab4 <__vector_126+0x1d2>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    1a7c:	20 91 53 22 	lds	r18, 0x2253
    1a80:	30 91 54 22 	lds	r19, 0x2254
    1a84:	80 91 51 22 	lds	r24, 0x2251
    1a88:	90 91 52 22 	lds	r25, 0x2252
    1a8c:	82 0f       	add	r24, r18
    1a8e:	93 1f       	adc	r25, r19
    1a90:	80 93 53 22 	sts	0x2253, r24
    1a94:	90 93 54 22 	sts	0x2254, r25
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
    1a98:	10 92 51 22 	sts	0x2251, r1
    1a9c:	10 92 52 22 	sts	0x2252, r1
	}
	// Free buffer of OUT control endpoint to authorize next reception
	udd_control_out_clear_NACK0();
    1aa0:	e4 e6       	ldi	r30, 0x64	; 100
    1aa2:	f2 e2       	ldi	r31, 0x22	; 34
    1aa4:	02 e0       	ldi	r16, 0x02	; 2
    1aa6:	06 93       	lac	Z, r16
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <__vector_126+0x1d2>
	// Check status on control endpoint
	if (ep == 0) {
		udd_ctrl_out_received();
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
	}
	if (ep == (0 | USB_EP_DIR_IN)) {
    1aaa:	80 38       	cpi	r24, 0x80	; 128
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <__vector_126+0x1d0>
		udd_ctrl_in_sent();
    1aae:	f8 d8       	rcall	.-3600   	; 0xca0 <udd_ctrl_in_sent>
		goto udd_interrupt_tc_end; // Interrupt acked by control endpoint managed
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <__vector_126+0x1d2>
	}
	Assert(udd_ep_is_valid(ep));
	// Manage end of transfer on endpoint bulk/interrupt/isochronous
	udd_ep_trans_complet(ep);
    1ab2:	15 da       	rcall	.-3030   	; 0xede <udd_ep_trans_complet>
	}
#endif

udd_interrupt_tc_end:
	return;
}
    1ab4:	ff 91       	pop	r31
    1ab6:	ef 91       	pop	r30
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	bf 91       	pop	r27
    1abe:	af 91       	pop	r26
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	7f 91       	pop	r23
    1ac6:	6f 91       	pop	r22
    1ac8:	5f 91       	pop	r21
    1aca:	4f 91       	pop	r20
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	0f 90       	pop	r0
    1ad6:	0b be       	out	0x3b, r0	; 59
    1ad8:	0f 90       	pop	r0
    1ada:	0a be       	out	0x3a, r0	; 58
    1adc:	0f 90       	pop	r0
    1ade:	09 be       	out	0x39, r0	; 57
    1ae0:	0f 90       	pop	r0
    1ae2:	08 be       	out	0x38, r0	; 56
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	dc 01       	movw	r26, r24
    1af4:	ea 01       	movw	r28, r20
	if (Udd_setup_is_in()) {
    1af6:	90 91 da 24 	lds	r25, 0x24DA
    1afa:	99 23       	and	r25, r25
    1afc:	0c f0       	brlt	.+2      	; 0x1b00 <udi_hid_setup+0x12>
    1afe:	63 c0       	rjmp	.+198    	; 0x1bc6 <udi_hid_setup+0xd8>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1b00:	90 76       	andi	r25, 0x60	; 96
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <udi_hid_setup+0x18>
    1b04:	40 c0       	rjmp	.+128    	; 0x1b86 <udi_hid_setup+0x98>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1b06:	80 91 db 24 	lds	r24, 0x24DB
    1b0a:	86 30       	cpi	r24, 0x06	; 6
    1b0c:	e1 f5       	brne	.+120    	; 0x1b86 <udi_hid_setup+0x98>
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    1b0e:	0e 94 b4 02 	call	0x568	; 0x568 <udc_get_interface_desc>
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    1b12:	dc 01       	movw	r26, r24
    1b14:	1a 96       	adiw	r26, 0x0a	; 10
    1b16:	2c 91       	ld	r18, X
    1b18:	1a 97       	sbiw	r26, 0x0a	; 10
    1b1a:	21 32       	cpi	r18, 0x21	; 33
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <udi_hid_setup+0x32>
    1b1e:	72 c0       	rjmp	.+228    	; 0x1c04 <udi_hid_setup+0x116>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1b20:	20 91 dd 24 	lds	r18, 0x24DD
    1b24:	21 32       	cpi	r18, 0x21	; 33
    1b26:	b1 f4       	brne	.+44     	; 0x1b54 <udi_hid_setup+0x66>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    1b28:	9c 01       	movw	r18, r24
    1b2a:	27 5f       	subi	r18, 0xF7	; 247
    1b2c:	3f 4f       	sbci	r19, 0xFF	; 255
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    1b2e:	20 93 e2 24 	sts	0x24E2, r18
    1b32:	30 93 e3 24 	sts	0x24E3, r19
		udd_g_ctrlreq.payload_size =
    1b36:	ea ed       	ldi	r30, 0xDA	; 218
    1b38:	f4 e2       	ldi	r31, 0x24	; 36
				min(udd_g_ctrlreq.req.wLength,
    1b3a:	19 96       	adiw	r26, 0x09	; 9
    1b3c:	8c 91       	ld	r24, X
    1b3e:	26 81       	ldd	r18, Z+6	; 0x06
    1b40:	37 81       	ldd	r19, Z+7	; 0x07
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	28 17       	cp	r18, r24
    1b46:	39 07       	cpc	r19, r25
    1b48:	08 f4       	brcc	.+2      	; 0x1b4c <udi_hid_setup+0x5e>
    1b4a:	c9 01       	movw	r24, r18
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    1b4c:	82 87       	std	Z+10, r24	; 0x0a
    1b4e:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	65 c0       	rjmp	.+202    	; 0x1c1e <udi_hid_setup+0x130>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    1b54:	fc 01       	movw	r30, r24
    1b56:	37 85       	ldd	r19, Z+15	; 0x0f
    1b58:	23 13       	cpse	r18, r19
    1b5a:	56 c0       	rjmp	.+172    	; 0x1c08 <udi_hid_setup+0x11a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    1b5c:	c0 93 e2 24 	sts	0x24E2, r28
    1b60:	d0 93 e3 24 	sts	0x24E3, r29
		udd_g_ctrlreq.payload_size =
    1b64:	ea ed       	ldi	r30, 0xDA	; 218
    1b66:	f4 e2       	ldi	r31, 0x24	; 36
				min(udd_g_ctrlreq.req.wLength,
    1b68:	dc 01       	movw	r26, r24
    1b6a:	50 96       	adiw	r26, 0x10	; 16
    1b6c:	2d 91       	ld	r18, X+
    1b6e:	3c 91       	ld	r19, X
    1b70:	51 97       	sbiw	r26, 0x11	; 17
    1b72:	86 81       	ldd	r24, Z+6	; 0x06
    1b74:	97 81       	ldd	r25, Z+7	; 0x07
    1b76:	28 17       	cp	r18, r24
    1b78:	39 07       	cpc	r19, r25
    1b7a:	08 f4       	brcc	.+2      	; 0x1b7e <udi_hid_setup+0x90>
    1b7c:	c9 01       	movw	r24, r18
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    1b7e:	82 87       	std	Z+10, r24	; 0x0a
    1b80:	93 87       	std	Z+11, r25	; 0x0b
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	4c c0       	rjmp	.+152    	; 0x1c1e <udi_hid_setup+0x130>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1b86:	90 32       	cpi	r25, 0x20	; 32
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <udi_hid_setup+0x9e>
    1b8a:	40 c0       	rjmp	.+128    	; 0x1c0c <udi_hid_setup+0x11e>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    1b8c:	80 91 db 24 	lds	r24, 0x24DB
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	39 f0       	breq	.+14     	; 0x1ba2 <udi_hid_setup+0xb4>
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	71 f0       	breq	.+28     	; 0x1bb4 <udi_hid_setup+0xc6>
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	d1 f5       	brne	.+116    	; 0x1c10 <udi_hid_setup+0x122>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    1b9c:	f9 01       	movw	r30, r18
    1b9e:	19 95       	eicall
    1ba0:	3e c0       	rjmp	.+124    	; 0x1c1e <udi_hid_setup+0x130>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    1ba2:	ea ed       	ldi	r30, 0xDA	; 218
    1ba4:	f4 e2       	ldi	r31, 0x24	; 36
    1ba6:	a0 87       	std	Z+8, r26	; 0x08
    1ba8:	b1 87       	std	Z+9, r27	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	82 87       	std	Z+10, r24	; 0x0a
    1bb0:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1bb2:	35 c0       	rjmp	.+106    	; 0x1c1e <udi_hid_setup+0x130>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    1bb4:	ea ed       	ldi	r30, 0xDA	; 218
    1bb6:	f4 e2       	ldi	r31, 0x24	; 36
    1bb8:	60 87       	std	Z+8, r22	; 0x08
    1bba:	71 87       	std	Z+9, r23	; 0x09
				udd_g_ctrlreq.payload_size = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	82 87       	std	Z+10, r24	; 0x0a
    1bc2:	93 87       	std	Z+11, r25	; 0x0b
				return true;
    1bc4:	2c c0       	rjmp	.+88     	; 0x1c1e <udi_hid_setup+0x130>
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    1bc6:	90 76       	andi	r25, 0x60	; 96
    1bc8:	90 32       	cpi	r25, 0x20	; 32
    1bca:	21 f5       	brne	.+72     	; 0x1c14 <udi_hid_setup+0x126>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    1bcc:	80 91 db 24 	lds	r24, 0x24DB
    1bd0:	8a 30       	cpi	r24, 0x0A	; 10
    1bd2:	39 f0       	breq	.+14     	; 0x1be2 <udi_hid_setup+0xf4>
    1bd4:	8b 30       	cpi	r24, 0x0B	; 11
    1bd6:	51 f0       	breq	.+20     	; 0x1bec <udi_hid_setup+0xfe>
    1bd8:	89 30       	cpi	r24, 0x09	; 9
    1bda:	f1 f4       	brne	.+60     	; 0x1c18 <udi_hid_setup+0x12a>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    1bdc:	f9 01       	movw	r30, r18
    1bde:	19 95       	eicall
    1be0:	1e c0       	rjmp	.+60     	; 0x1c1e <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    1be2:	80 91 dd 24 	lds	r24, 0x24DD
    1be6:	8c 93       	st	X, r24
				return true;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	19 c0       	rjmp	.+50     	; 0x1c1e <udi_hid_setup+0x130>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    1bec:	80 91 e0 24 	lds	r24, 0x24E0
    1bf0:	90 91 e1 24 	lds	r25, 0x24E1
    1bf4:	89 2b       	or	r24, r25
    1bf6:	91 f4       	brne	.+36     	; 0x1c1c <udi_hid_setup+0x12e>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
    1bf8:	80 91 dc 24 	lds	r24, 0x24DC
    1bfc:	db 01       	movw	r26, r22
    1bfe:	8c 93       	st	X, r24
				return true;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	0d c0       	rjmp	.+26     	; 0x1c1e <udi_hid_setup+0x130>
	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
		return false;
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	0b c0       	rjmp	.+22     	; 0x1c1e <udi_hid_setup+0x130>
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
	}
	return false;
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	09 c0       	rjmp	.+18     	; 0x1c1e <udi_hid_setup+0x130>
				*protocol = udd_g_ctrlreq.req.wValue;
				return true;
			}
		}
	}
	return false;	// Request not supported
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	07 c0       	rjmp	.+14     	; 0x1c1e <udi_hid_setup+0x130>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	05 c0       	rjmp	.+10     	; 0x1c1e <udi_hid_setup+0x130>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	03 c0       	rjmp	.+6      	; 0x1c1e <udi_hid_setup+0x130>
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <udi_hid_setup+0x130>
				*rate = udd_g_ctrlreq.req.wValue >> 8;
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
					return false;
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
				return true;
			}
		}
	}
	return false;	// Request not supported
}
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

00001c24 <sysclk_init>:
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <sysclk_init+0x6>
    1c2a:	1f 92       	push	r1
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	80 93 70 00 	sts	0x0070, r24
    1c36:	80 93 71 00 	sts	0x0071, r24
    1c3a:	80 93 72 00 	sts	0x0072, r24
    1c3e:	80 93 73 00 	sts	0x0073, r24
    1c42:	80 93 74 00 	sts	0x0074, r24
    1c46:	80 93 75 00 	sts	0x0075, r24
    1c4a:	80 93 76 00 	sts	0x0076, r24
    1c4e:	6c e1       	ldi	r22, 0x1C	; 28
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	82 e0       	ldi	r24, 0x02	; 2
    1c54:	a7 d0       	rcall	.+334    	; 0x1da4 <nvm_read_byte>
    1c56:	8a 83       	std	Y+2, r24	; 0x02
    1c58:	6d e1       	ldi	r22, 0x1D	; 29
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	a2 d0       	rcall	.+324    	; 0x1da4 <nvm_read_byte>
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	21 f4       	brne	.+8      	; 0x1c72 <sysclk_init+0x4e>
    1c6a:	80 e4       	ldi	r24, 0x40	; 64
    1c6c:	93 e2       	ldi	r25, 0x23	; 35
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	e0 e6       	ldi	r30, 0x60	; 96
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	82 83       	std	Z+2, r24	; 0x02
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	83 83       	std	Z+3, r24	; 0x03
    1c84:	80 91 51 00 	lds	r24, 0x0051
    1c88:	84 fd       	sbrc	r24, 4
    1c8a:	37 c0       	rjmp	.+110    	; 0x1cfa <sysclk_init+0xd6>
    1c8c:	80 91 51 00 	lds	r24, 0x0051
    1c90:	81 fd       	sbrc	r24, 1
    1c92:	26 c0       	rjmp	.+76     	; 0x1ce0 <sysclk_init+0xbc>
    1c94:	9f b7       	in	r25, 0x3f	; 63
    1c96:	f8 94       	cli
    1c98:	e0 e5       	ldi	r30, 0x50	; 80
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	82 60       	ori	r24, 0x02	; 2
    1ca0:	80 83       	st	Z, r24
    1ca2:	9f bf       	out	0x3f, r25	; 63
    1ca4:	81 81       	ldd	r24, Z+1	; 0x01
    1ca6:	81 ff       	sbrs	r24, 1
    1ca8:	fd cf       	rjmp	.-6      	; 0x1ca4 <sysclk_init+0x80>
    1caa:	9f b7       	in	r25, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	a0 e5       	ldi	r26, 0x50	; 80
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	16 96       	adiw	r26, 0x06	; 6
    1cb4:	8c 91       	ld	r24, X
    1cb6:	16 97       	sbiw	r26, 0x06	; 6
    1cb8:	89 7f       	andi	r24, 0xF9	; 249
    1cba:	16 96       	adiw	r26, 0x06	; 6
    1cbc:	8c 93       	st	X, r24
    1cbe:	16 97       	sbiw	r26, 0x06	; 6
    1cc0:	e0 e6       	ldi	r30, 0x60	; 96
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 e8       	ldi	r24, 0x80	; 128
    1cc6:	85 83       	std	Z+5, r24	; 0x05
    1cc8:	8b eb       	ldi	r24, 0xBB	; 187
    1cca:	86 83       	std	Z+6, r24	; 0x06
    1ccc:	16 96       	adiw	r26, 0x06	; 6
    1cce:	8c 91       	ld	r24, X
    1cd0:	16 97       	sbiw	r26, 0x06	; 6
    1cd2:	84 60       	ori	r24, 0x04	; 4
    1cd4:	16 96       	adiw	r26, 0x06	; 6
    1cd6:	8c 93       	st	X, r24
    1cd8:	80 81       	ld	r24, Z
    1cda:	81 60       	ori	r24, 0x01	; 1
    1cdc:	80 83       	st	Z, r24
    1cde:	9f bf       	out	0x3f, r25	; 63
    1ce0:	9f b7       	in	r25, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	e0 e5       	ldi	r30, 0x50	; 80
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	82 e8       	ldi	r24, 0x82	; 130
    1cea:	85 83       	std	Z+5, r24	; 0x05
    1cec:	80 81       	ld	r24, Z
    1cee:	80 61       	ori	r24, 0x10	; 16
    1cf0:	80 83       	st	Z, r24
    1cf2:	9f bf       	out	0x3f, r25	; 63
    1cf4:	81 81       	ldd	r24, Z+1	; 0x01
    1cf6:	84 ff       	sbrs	r24, 4
    1cf8:	fd cf       	rjmp	.-6      	; 0x1cf4 <sysclk_init+0xd0>
    1cfa:	64 e0       	ldi	r22, 0x04	; 4
    1cfc:	80 e4       	ldi	r24, 0x40	; 64
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	5b d0       	rcall	.+182    	; 0x1db8 <ccp_write_io>
    1d02:	9f b7       	in	r25, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	e0 e5       	ldi	r30, 0x50	; 80
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	8e 7f       	andi	r24, 0xFE	; 254
    1d0e:	80 83       	st	Z, r24
    1d10:	9f bf       	out	0x3f, r25	; 63
    1d12:	24 96       	adiw	r28, 0x04	; 4
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <sysclk_enable_module>:
    1d1e:	9f b7       	in	r25, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	e8 2f       	mov	r30, r24
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	e0 59       	subi	r30, 0x90	; 144
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	60 95       	com	r22
    1d2c:	80 81       	ld	r24, Z
    1d2e:	68 23       	and	r22, r24
    1d30:	60 83       	st	Z, r22
    1d32:	9f bf       	out	0x3f, r25	; 63
    1d34:	08 95       	ret

00001d36 <sysclk_enable_usb>:

	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
    1d36:	86 30       	cpi	r24, 0x06	; 6
    1d38:	11 f0       	breq	.+4      	; 0x1d3e <sysclk_enable_usb+0x8>
		prescaler = CLK_USBPSDIV_8_gc;
	}
	else {
		prescaler = 0;
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <sysclk_enable_usb+0xa>
	/*
	 * Enable or disable prescaler depending on if the USB frequency is 6
	 * MHz or 48 MHz. Only 6 MHz USB frequency requires prescaling.
	 */
	if (frequency == 6) {
		prescaler = CLK_USBPSDIV_8_gc;
    1d3e:	68 e1       	ldi	r22, 0x18	; 24

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1d40:	80 91 51 00 	lds	r24, 0x0051
	/*
	 * Switch to the system clock selected by the user.
	 */
	switch (CONFIG_USBCLK_SOURCE) {
	case USBCLK_SRC_RCOSC:
		if (!osc_is_ready(OSC_ID_RC32MHZ)) {
    1d44:	81 fd       	sbrc	r24, 1
    1d46:	26 c0       	rjmp	.+76     	; 0x1d94 <sysclk_enable_usb+0x5e>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1d48:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1d4a:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    1d4c:	e0 e5       	ldi	r30, 0x50	; 80
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	82 60       	ori	r24, 0x02	; 2
    1d54:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d56:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    1d58:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    1d5a:	81 ff       	sbrs	r24, 1
    1d5c:	fd cf       	rjmp	.-6      	; 0x1d58 <sysclk_enable_usb+0x22>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    1d5e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    1d60:	f8 94       	cli
# if !XMEGA_E
				|| (ref_id == OSC_ID_USBSOF)
#endif
				);

		OSC.DFLLCTRL &= ~(OSC_RC32MCREF_gm);
    1d62:	a0 e5       	ldi	r26, 0x50	; 80
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	16 96       	adiw	r26, 0x06	; 6
    1d68:	8c 91       	ld	r24, X
    1d6a:	16 97       	sbiw	r26, 0x06	; 6
    1d6c:	89 7f       	andi	r24, 0xF9	; 249
    1d6e:	16 96       	adiw	r26, 0x06	; 6
    1d70:	8c 93       	st	X, r24
    1d72:	16 97       	sbiw	r26, 0x06	; 6
		else if (ref_id == OSC_ID_USBSOF) {
			/*
			 * Calibrate 32MRC at 48MHz using USB SOF
			 * 48MHz / 1kHz = 0xBB80
			 */
			DFLLRC32M.COMP1 = 0x80;
    1d74:	e0 e6       	ldi	r30, 0x60	; 96
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 e8       	ldi	r24, 0x80	; 128
    1d7a:	85 83       	std	Z+5, r24	; 0x05
			DFLLRC32M.COMP2 = 0xBB;
    1d7c:	8b eb       	ldi	r24, 0xBB	; 187
    1d7e:	86 83       	std	Z+6, r24	; 0x06
			OSC.DFLLCTRL |= OSC_RC32MCREF_USBSOF_gc;
    1d80:	16 96       	adiw	r26, 0x06	; 6
    1d82:	8c 91       	ld	r24, X
    1d84:	16 97       	sbiw	r26, 0x06	; 6
    1d86:	84 60       	ori	r24, 0x04	; 4
    1d88:	16 96       	adiw	r26, 0x06	; 6
    1d8a:	8c 93       	st	X, r24
			OSC.DFLLCTRL &= ~(OSC_RC32MCREF_bm);
# endif
		}
#endif

		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    1d8c:	80 81       	ld	r24, Z
    1d8e:	81 60       	ori	r24, 0x01	; 1
    1d90:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1d92:	9f bf       	out	0x3f, r25	; 63
			}
			osc_enable_autocalibration(OSC_ID_RC32MHZ,
					CONFIG_OSC_AUTOCAL_RC32MHZ_REF_OSC);
#endif
		}
		ccp_write_io((uint8_t *)&CLK.USBCTRL, (prescaler)
    1d94:	63 60       	ori	r22, 0x03	; 3
    1d96:	84 e4       	ldi	r24, 0x44	; 68
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e d0       	rcall	.+28     	; 0x1db8 <ccp_write_io>
	default:
		Assert(false);
		break;
	}

	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_USB);
    1d9c:	60 e4       	ldi	r22, 0x40	; 64
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	be cf       	rjmp	.-132    	; 0x1d1e <sysclk_enable_module>
    1da2:	08 95       	ret

00001da4 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    1da4:	40 91 ca 01 	lds	r20, 0x01CA
	mov ZL, r22               ; Load byte index into low byte of Z.
    1da8:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    1daa:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    1dac:	80 93 ca 01 	sts	0x01CA, r24
	lpm r24, Z                ; Perform an LPM to read out byte
    1db0:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    1db2:	40 93 ca 01 	sts	0x01CA, r20
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    1db6:	08 95       	ret

00001db8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1db8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1dba:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1dbc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1dbe:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1dc0:	60 83       	st	Z, r22
	ret                             // Return to caller
    1dc2:	08 95       	ret

00001dc4 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1dc4:	08 95       	ret

00001dc6 <_write_pixel_color>:
static void _write_pixel_color(
				Pixel_Buffer_t* buffer, 
				int8_t color, 
				int8_t col, int8_t row, 
				int8_t col_bit, 
				uint8_t brightness){
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	cf 93       	push	r28
    1dce:	fc 01       	movw	r30, r24
	for(int8_t cur_level= 0;cur_level<N_BRIGHT_LEVELS;cur_level++){
		if(brightness > cur_level){
			set_bit((*buffer)[row][col/8][cur_level][color], col_bit);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <_write_pixel_color+0x14>
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	0a 95       	dec	r16
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <_write_pixel_color+0x10>
    1dde:	c8 2f       	mov	r28, r24
		}else{
			clear_bit((*buffer)[row][col/8][cur_level][color], col_bit);
    1de0:	38 2f       	mov	r19, r24
    1de2:	30 95       	com	r19
    1de4:	a2 2f       	mov	r26, r18
    1de6:	aa 0f       	add	r26, r26
    1de8:	bb 0b       	sbc	r27, r27
    1dea:	cd 01       	movw	r24, r26
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	a8 0f       	add	r26, r24
    1dfa:	b9 1f       	adc	r27, r25
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	86 0f       	add	r24, r22
    1e00:	91 1d       	adc	r25, r1
    1e02:	67 fd       	sbrc	r22, 7
    1e04:	9a 95       	dec	r25
    1e06:	bc 01       	movw	r22, r24
				int8_t col, int8_t row, 
				int8_t col_bit, 
				uint8_t brightness){
	for(int8_t cur_level= 0;cur_level<N_BRIGHT_LEVELS;cur_level++){
		if(brightness > cur_level){
			set_bit((*buffer)[row][col/8][cur_level][color], col_bit);
    1e08:	94 2f       	mov	r25, r20
    1e0a:	44 23       	and	r20, r20
    1e0c:	14 f4       	brge	.+4      	; 0x1e12 <_write_pixel_color+0x4c>
    1e0e:	97 e0       	ldi	r25, 0x07	; 7
    1e10:	94 0f       	add	r25, r20
    1e12:	95 95       	asr	r25
    1e14:	95 95       	asr	r25
    1e16:	95 95       	asr	r25
    1e18:	49 2f       	mov	r20, r25
    1e1a:	99 0f       	add	r25, r25
    1e1c:	55 0b       	sbc	r21, r21
    1e1e:	ca 01       	movw	r24, r20
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	48 0f       	add	r20, r24
    1e2e:	59 1f       	adc	r21, r25
    1e30:	46 0f       	add	r20, r22
    1e32:	57 1f       	adc	r21, r23
    1e34:	e4 0f       	add	r30, r20
    1e36:	f5 1f       	adc	r31, r21
		}else{
			clear_bit((*buffer)[row][col/8][cur_level][color], col_bit);
    1e38:	df 01       	movw	r26, r30
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
				int8_t color, 
				int8_t col, int8_t row, 
				int8_t col_bit, 
				uint8_t brightness){
	for(int8_t cur_level= 0;cur_level<N_BRIGHT_LEVELS;cur_level++){
		if(brightness > cur_level){
    1e3e:	f1 2c       	mov	r15, r1
    1e40:	8e 15       	cp	r24, r14
    1e42:	9f 05       	cpc	r25, r15
    1e44:	24 f4       	brge	.+8      	; 0x1e4e <_write_pixel_color+0x88>
			set_bit((*buffer)[row][col/8][cur_level][color], col_bit);
    1e46:	20 81       	ld	r18, Z
    1e48:	2c 2b       	or	r18, r28
    1e4a:	20 83       	st	Z, r18
    1e4c:	03 c0       	rjmp	.+6      	; 0x1e54 <_write_pixel_color+0x8e>
		}else{
			clear_bit((*buffer)[row][col/8][cur_level][color], col_bit);
    1e4e:	2c 91       	ld	r18, X
    1e50:	23 23       	and	r18, r19
    1e52:	2c 93       	st	X, r18
    1e54:	01 96       	adiw	r24, 0x01	; 1
    1e56:	33 96       	adiw	r30, 0x03	; 3
    1e58:	13 96       	adiw	r26, 0x03	; 3
				Pixel_Buffer_t* buffer, 
				int8_t color, 
				int8_t col, int8_t row, 
				int8_t col_bit, 
				uint8_t brightness){
	for(int8_t cur_level= 0;cur_level<N_BRIGHT_LEVELS;cur_level++){
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	91 05       	cpc	r25, r1
    1e5e:	81 f7       	brne	.-32     	; 0x1e40 <_write_pixel_color+0x7a>
			set_bit((*buffer)[row][col/8][cur_level][color], col_bit);
		}else{
			clear_bit((*buffer)[row][col/8][cur_level][color], col_bit);
		}
	}
}
    1e60:	cf 91       	pop	r28
    1e62:	0f 91       	pop	r16
    1e64:	ff 90       	pop	r15
    1e66:	ef 90       	pop	r14
    1e68:	08 95       	ret

00001e6a <led_matrix_transfer_row>:
	ioport_set_pin_level(STROBE_PIN, IOPORT_PIN_LEVEL_HIGH);
	delay_us(2);
	ioport_set_pin_level(STROBE_PIN, IOPORT_PIN_LEVEL_LOW);
}

static void led_matrix_transfer_row(int8_t row_counter){
    1e6a:	3f 92       	push	r3
    1e6c:	4f 92       	push	r4
    1e6e:	5f 92       	push	r5
    1e70:	6f 92       	push	r6
    1e72:	7f 92       	push	r7
    1e74:	8f 92       	push	r8
    1e76:	9f 92       	push	r9
    1e78:	af 92       	push	r10
    1e7a:	bf 92       	push	r11
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	0f 2e       	mov	r0, r31
    1e8e:	f6 ee       	ldi	r31, 0xE6	; 230
    1e90:	8f 2e       	mov	r8, r31
    1e92:	f0 e2       	ldi	r31, 0x20	; 32
    1e94:	9f 2e       	mov	r9, r31
    1e96:	f0 2d       	mov	r31, r0
    1e98:	c0 e0       	ldi	r28, 0x00	; 0
    1e9a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t * data;
	for(int8_t bright_level=0; bright_level<N_BRIGHT_LEVELS; bright_level++){
		for(int8_t col_counter=N_COLS/8-1; col_counter>=0; col_counter--){
			data = (uint8_t *)(*cur_pixel_buffer)[row_counter][col_counter][bright_level];		
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 0b       	sbc	r25, r25
    1ea0:	2c 01       	movw	r4, r24
    1ea2:	44 0c       	add	r4, r4
    1ea4:	55 1c       	adc	r5, r5
    1ea6:	44 0c       	add	r4, r4
    1ea8:	55 1c       	adc	r5, r5
    1eaa:	44 0c       	add	r4, r4
    1eac:	55 1c       	adc	r5, r5
    1eae:	48 0e       	add	r4, r24
    1eb0:	59 1e       	adc	r5, r25
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1eb2:	0f 2e       	mov	r0, r31
    1eb4:	f0 e6       	ldi	r31, 0x60	; 96
    1eb6:	6f 2e       	mov	r6, r31
    1eb8:	f6 e0       	ldi	r31, 0x06	; 6
    1eba:	7f 2e       	mov	r7, r31
    1ebc:	f0 2d       	mov	r31, r0
    1ebe:	33 24       	eor	r3, r3
    1ec0:	33 94       	inc	r3
    1ec2:	09 c0       	rjmp	.+18     	; 0x1ed6 <led_matrix_transfer_row+0x6c>
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	a1 09       	sbc	r26, r1
    1ec8:	b1 09       	sbc	r27, r1
    1eca:	e1 f7       	brne	.-8      	; 0x1ec4 <led_matrix_transfer_row+0x5a>
    1ecc:	21 96       	adiw	r28, 0x01	; 1
	ioport_set_pin_level(STROBE_PIN, IOPORT_PIN_LEVEL_LOW);
}

static void led_matrix_transfer_row(int8_t row_counter){
	uint8_t * data;
	for(int8_t bright_level=0; bright_level<N_BRIGHT_LEVELS; bright_level++){
    1ece:	c3 30       	cpi	r28, 0x03	; 3
    1ed0:	d1 05       	cpc	r29, r1
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <led_matrix_transfer_row+0x6c>
    1ed4:	58 c0       	rjmp	.+176    	; 0x1f86 <led_matrix_transfer_row+0x11c>
		for(int8_t col_counter=N_COLS/8-1; col_counter>=0; col_counter--){
			data = (uint8_t *)(*cur_pixel_buffer)[row_counter][col_counter][bright_level];		
    1ed6:	8e 01       	movw	r16, r28
    1ed8:	00 0f       	add	r16, r16
    1eda:	11 1f       	adc	r17, r17
    1edc:	0c 0f       	add	r16, r28
    1ede:	1d 1f       	adc	r17, r29
    1ee0:	04 0d       	add	r16, r4
    1ee2:	15 1d       	adc	r17, r5
    1ee4:	c8 01       	movw	r24, r16
    1ee6:	09 96       	adiw	r24, 0x09	; 9
    1ee8:	60 91 da 20 	lds	r22, 0x20DA
    1eec:	70 91 db 20 	lds	r23, 0x20DB
    1ef0:	68 0f       	add	r22, r24
    1ef2:	79 1f       	adc	r23, r25
			spi_write_packet(
    1ef4:	43 e0       	ldi	r20, 0x03	; 3
    1ef6:	50 e0       	ldi	r21, 0x00	; 0
    1ef8:	80 ec       	ldi	r24, 0xC0	; 192
    1efa:	98 e0       	ldi	r25, 0x08	; 8
    1efc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_write_packet>

static void led_matrix_transfer_row(int8_t row_counter){
	uint8_t * data;
	for(int8_t bright_level=0; bright_level<N_BRIGHT_LEVELS; bright_level++){
		for(int8_t col_counter=N_COLS/8-1; col_counter>=0; col_counter--){
			data = (uint8_t *)(*cur_pixel_buffer)[row_counter][col_counter][bright_level];		
    1f00:	60 91 da 20 	lds	r22, 0x20DA
    1f04:	70 91 db 20 	lds	r23, 0x20DB
    1f08:	60 0f       	add	r22, r16
    1f0a:	71 1f       	adc	r23, r17
			spi_write_packet(
    1f0c:	43 e0       	ldi	r20, 0x03	; 3
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	80 ec       	ldi	r24, 0xC0	; 192
    1f12:	98 e0       	ldi	r25, 0x08	; 8
    1f14:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_write_packet>
    1f18:	f3 01       	movw	r30, r6
    1f1a:	35 82       	std	Z+5, r3	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1f1c:	36 82       	std	Z+6, r3	; 0x06
					data,
					N_COLORS);							
		}
		led_matrix_cycle_strobe();
		// brightness delay here
		delay_us(bright_delay_usecs[bright_level]);
    1f1e:	f4 01       	movw	r30, r8
    1f20:	80 81       	ld	r24, Z
    1f22:	31 81       	ldd	r19, Z+1	; 0x01
    1f24:	f2 e0       	ldi	r31, 0x02	; 2
    1f26:	8f 0e       	add	r8, r31
    1f28:	91 1c       	adc	r9, r1
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	93 2f       	mov	r25, r19
    1f2e:	99 0f       	add	r25, r25
    1f30:	99 0b       	sbc	r25, r25
    1f32:	a1 2c       	mov	r10, r1
    1f34:	0f 2e       	mov	r0, r31
    1f36:	f6 e3       	ldi	r31, 0x36	; 54
    1f38:	bf 2e       	mov	r11, r31
    1f3a:	f0 2d       	mov	r31, r0
    1f3c:	0f 2e       	mov	r0, r31
    1f3e:	fe e6       	ldi	r31, 0x6E	; 110
    1f40:	cf 2e       	mov	r12, r31
    1f42:	f0 2d       	mov	r31, r0
    1f44:	d3 2c       	mov	r13, r3
    1f46:	e1 2c       	mov	r14, r1
    1f48:	f1 2c       	mov	r15, r1
    1f4a:	00 e0       	ldi	r16, 0x00	; 0
    1f4c:	10 e0       	ldi	r17, 0x00	; 0
    1f4e:	49 2f       	mov	r20, r25
    1f50:	59 2f       	mov	r21, r25
    1f52:	69 2f       	mov	r22, r25
    1f54:	79 2f       	mov	r23, r25
    1f56:	89 2f       	mov	r24, r25
    1f58:	76 d2       	rcall	.+1260   	; 0x2446 <__muldi3>
    1f5a:	21 5c       	subi	r18, 0xC1	; 193
    1f5c:	3d 4b       	sbci	r19, 0xBD	; 189
    1f5e:	40 4f       	sbci	r20, 0xF0	; 240
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	6f 4f       	sbci	r22, 0xFF	; 255
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	8f 4f       	sbci	r24, 0xFF	; 255
    1f68:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6a:	8f d1       	rcall	.+798    	; 0x228a <__floatundisf>
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3b e1       	ldi	r19, 0x1B	; 27
    1f70:	47 eb       	ldi	r20, 0xB7	; 183
    1f72:	5a e4       	ldi	r21, 0x4A	; 74
    1f74:	e8 d0       	rcall	.+464    	; 0x2146 <__divsf3>
    1f76:	54 d1       	rcall	.+680    	; 0x2220 <__fixunssfdi>
    1f78:	f2 2f       	mov	r31, r18
    1f7a:	e3 2f       	mov	r30, r19
    1f7c:	8f 2f       	mov	r24, r31
    1f7e:	9e 2f       	mov	r25, r30
    1f80:	a4 2f       	mov	r26, r20
    1f82:	b5 2f       	mov	r27, r21
    1f84:	9f cf       	rjmp	.-194    	; 0x1ec4 <led_matrix_transfer_row+0x5a>
	}
}
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	df 90       	pop	r13
    1f94:	cf 90       	pop	r12
    1f96:	bf 90       	pop	r11
    1f98:	af 90       	pop	r10
    1f9a:	9f 90       	pop	r9
    1f9c:	8f 90       	pop	r8
    1f9e:	7f 90       	pop	r7
    1fa0:	6f 90       	pop	r6
    1fa2:	5f 90       	pop	r5
    1fa4:	4f 90       	pop	r4
    1fa6:	3f 90       	pop	r3
    1fa8:	08 95       	ret

00001faa <hid_cb_enable>:



bool hid_cb_enable(){
	
	hid_enabled = true;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	80 93 d9 24 	sts	0x24D9, r24
	return true;
}
    1fb0:	08 95       	ret

00001fb2 <hid_cb_disable>:

void hid_cb_disable(){
	hid_enabled = false;
    1fb2:	10 92 d9 24 	sts	0x24D9, r1
    1fb6:	08 95       	ret

00001fb8 <hid_cb_report_out>:
// 145
// 288

void hid_cb_report_out(uint8_t* report){
	size_t half_buffer = sizeof(Pixel_Buffer_t)/2;
	if(report[0] == 0){
    1fb8:	fc 01       	movw	r30, r24
    1fba:	20 81       	ld	r18, Z
    1fbc:	21 11       	cpse	r18, r1
    1fbe:	0b c0       	rjmp	.+22     	; 0x1fd6 <hid_cb_report_out+0x1e>
		memcpy(other_pixel_buffer, report+1, half_buffer);
    1fc0:	a0 91 d8 20 	lds	r26, 0x20D8
    1fc4:	b0 91 d9 20 	lds	r27, 0x20D9
    1fc8:	31 96       	adiw	r30, 0x01	; 1
    1fca:	80 e9       	ldi	r24, 0x90	; 144
    1fcc:	01 90       	ld	r0, Z+
    1fce:	0d 92       	st	X+, r0
    1fd0:	8a 95       	dec	r24
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <hid_cb_report_out+0x14>
    1fd4:	08 95       	ret
	}else if(report[0] == 1){
    1fd6:	21 30       	cpi	r18, 0x01	; 1
    1fd8:	d1 f4       	brne	.+52     	; 0x200e <hid_cb_report_out+0x56>
		memcpy(((uint8_t*)other_pixel_buffer)+half_buffer, report+1, half_buffer);
    1fda:	20 91 d8 20 	lds	r18, 0x20D8
    1fde:	30 91 d9 20 	lds	r19, 0x20D9
    1fe2:	d9 01       	movw	r26, r18
    1fe4:	a0 57       	subi	r26, 0x70	; 112
    1fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe8:	fc 01       	movw	r30, r24
    1fea:	31 96       	adiw	r30, 0x01	; 1
    1fec:	80 e9       	ldi	r24, 0x90	; 144
    1fee:	01 90       	ld	r0, Z+
    1ff0:	0d 92       	st	X+, r0
    1ff2:	8a 95       	dec	r24
    1ff4:	e1 f7       	brne	.-8      	; 0x1fee <hid_cb_report_out+0x36>
		Pixel_Buffer_t*tmp = (Pixel_Buffer_t*) cur_pixel_buffer;
    1ff6:	80 91 da 20 	lds	r24, 0x20DA
    1ffa:	90 91 db 20 	lds	r25, 0x20DB
		cur_pixel_buffer = other_pixel_buffer;
    1ffe:	20 93 da 20 	sts	0x20DA, r18
    2002:	30 93 db 20 	sts	0x20DB, r19
		other_pixel_buffer = (volatile Pixel_Buffer_t*)tmp;
    2006:	80 93 d8 20 	sts	0x20D8, r24
    200a:	90 93 d9 20 	sts	0x20D9, r25
    200e:	08 95       	ret

00002010 <main>:
	udc_start();
}



int main (void){
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	1f 92       	push	r1
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62

	sysclk_init();
    201a:	04 de       	rcall	.-1016   	; 0x1c24 <sysclk_init>
	irq_initialize_vectors();
    201c:	87 e0       	ldi	r24, 0x07	; 7
    201e:	80 93 a2 00 	sts	0x00A2, r24
	cpu_irq_enable();
    2022:	78 94       	sei
	//}
	
}

static void usb_init(void){
	udc_start();
    2024:	0e 94 b9 02 	call	0x572	; 0x572 <udc_start>

	sysclk_init();
	irq_initialize_vectors();
	cpu_irq_enable();
	usb_init();
	board_init();
    2028:	cd de       	rcall	.-614    	; 0x1dc4 <board_init>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    202a:	80 e1       	ldi	r24, 0x10	; 16
    202c:	80 93 01 06 	sts	0x0601, r24
    2030:	e0 e6       	ldi	r30, 0x60	; 96
    2032:	f6 e0       	ldi	r31, 0x06	; 6
    2034:	92 e0       	ldi	r25, 0x02	; 2
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	94 e0       	ldi	r25, 0x04	; 4
    203a:	91 83       	std	Z+1, r25	; 0x01
    203c:	a0 e4       	ldi	r26, 0x40	; 64
    203e:	b6 e0       	ldi	r27, 0x06	; 6
    2040:	90 e8       	ldi	r25, 0x80	; 128
    2042:	11 96       	adiw	r26, 0x01	; 1
    2044:	9c 93       	st	X, r25
    2046:	11 97       	sbiw	r26, 0x01	; 1
    2048:	90 e2       	ldi	r25, 0x20	; 32
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	9c 93       	st	X, r25
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	8c 93       	st	X, r24
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_dir(STROBE_PIN, IOPORT_DIR_OUTPUT);
}

static void led_matrix_init_module(void){
	struct spi_device spi_conf;
	spi_master_init(&LED_MATRIX_SPI);
    2058:	80 ec       	ldi	r24, 0xC0	; 192
    205a:	98 e0       	ldi	r25, 0x08	; 8
    205c:	0e 94 2c 01 	call	0x258	; 0x258 <spi_master_init>
	spi_master_setup_device(&LED_MATRIX_SPI, &spi_conf, SPI_MODE_0, LED_MATRIX_BAUD, 0);
    2060:	c1 2c       	mov	r12, r1
    2062:	d1 2c       	mov	r13, r1
    2064:	76 01       	movw	r14, r12
    2066:	00 e4       	ldi	r16, 0x40	; 64
    2068:	12 e4       	ldi	r17, 0x42	; 66
    206a:	2f e0       	ldi	r18, 0x0F	; 15
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	be 01       	movw	r22, r28
    2072:	6f 5f       	subi	r22, 0xFF	; 255
    2074:	7f 4f       	sbci	r23, 0xFF	; 255
    2076:	80 ec       	ldi	r24, 0xC0	; 192
    2078:	98 e0       	ldi	r25, 0x08	; 8
    207a:	0e 94 45 01 	call	0x28a	; 0x28a <spi_master_setup_device>
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
    207e:	e0 ec       	ldi	r30, 0xC0	; 192
    2080:	f8 e0       	ldi	r31, 0x08	; 8
    2082:	80 81       	ld	r24, Z
    2084:	80 64       	ori	r24, 0x40	; 64
    2086:	80 83       	st	Z, r24
	//ioport_set_pin_level(LED0, IOPORT_PIN_LEVEL_HIGH);
	
	led_matrix_init_pins();
	led_matrix_init_module();

	pixel_buffer_clear((Pixel_Buffer_t*) cur_pixel_buffer, 0,0,0);
    2088:	c0 90 da 20 	lds	r12, 0x20DA
    208c:	d0 90 db 20 	lds	r13, 0x20DB
}

static void pixel_buffer_clear(
				Pixel_Buffer_t*buffer, 
				int8_t r, int8_t g, int8_t b){
	for(int8_t row=0; row<N_ROWS; row++){
    2090:	10 e0       	ldi	r17, 0x00	; 0
    2092:	24 c0       	rjmp	.+72     	; 0x20dc <main+0xcc>
				int8_t col, int8_t row,
				int8_t r, int8_t g, int8_t b){
	int8_t r_int = row / 8;
	int8_t r_mod = row % 8;
	row = row_map[r_mod] + r_int*8;
	int8_t col_bit = col_map[col%8];
    2094:	ef 2d       	mov	r30, r15
    2096:	e7 78       	andi	r30, 0x87	; 135
    2098:	1c f4       	brge	.+6      	; 0x20a0 <main+0x90>
    209a:	e1 50       	subi	r30, 0x01	; 1
    209c:	e8 6f       	ori	r30, 0xF8	; 248
    209e:	ef 5f       	subi	r30, 0xFF	; 255
    20a0:	0e 2e       	mov	r0, r30
    20a2:	00 0c       	add	r0, r0
    20a4:	ff 0b       	sbc	r31, r31
    20a6:	e4 51       	subi	r30, 0x14	; 20
    20a8:	ff 4d       	sbci	r31, 0xDF	; 223
    20aa:	a0 80       	ld	r10, Z
	_write_pixel_color(buffer, RED, col, row, col_bit, r);
    20ac:	e1 2c       	mov	r14, r1
    20ae:	0a 2d       	mov	r16, r10
    20b0:	2b 2d       	mov	r18, r11
    20b2:	4f 2d       	mov	r20, r15
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	c6 01       	movw	r24, r12
    20b8:	86 de       	rcall	.-756    	; 0x1dc6 <_write_pixel_color>
	_write_pixel_color(buffer, GREEN, col, row, col_bit, g);
    20ba:	2b 2d       	mov	r18, r11
    20bc:	4f 2d       	mov	r20, r15
    20be:	62 e0       	ldi	r22, 0x02	; 2
    20c0:	c6 01       	movw	r24, r12
    20c2:	81 de       	rcall	.-766    	; 0x1dc6 <_write_pixel_color>
	_write_pixel_color(buffer, BLUE, col, row, col_bit, b);
    20c4:	2b 2d       	mov	r18, r11
    20c6:	4f 2d       	mov	r20, r15
    20c8:	60 e0       	ldi	r22, 0x00	; 0
    20ca:	c6 01       	movw	r24, r12
    20cc:	7c de       	rcall	.-776    	; 0x1dc6 <_write_pixel_color>
    20ce:	f3 94       	inc	r15

static void pixel_buffer_clear(
				Pixel_Buffer_t*buffer, 
				int8_t r, int8_t g, int8_t b){
	for(int8_t row=0; row<N_ROWS; row++){
		for(int8_t col=0; col<N_COLS; col++){
    20d0:	80 e1       	ldi	r24, 0x10	; 16
    20d2:	f8 12       	cpse	r15, r24
    20d4:	df cf       	rjmp	.-66     	; 0x2094 <main+0x84>
    20d6:	1f 5f       	subi	r17, 0xFF	; 255
}

static void pixel_buffer_clear(
				Pixel_Buffer_t*buffer, 
				int8_t r, int8_t g, int8_t b){
	for(int8_t row=0; row<N_ROWS; row++){
    20d8:	10 31       	cpi	r17, 0x10	; 16
    20da:	b9 f0       	breq	.+46     	; 0x210a <main+0xfa>
static void pixel_buffer_write_pixel(
				Pixel_Buffer_t*buffer,
				int8_t col, int8_t row,
				int8_t r, int8_t g, int8_t b){
	int8_t r_int = row / 8;
	int8_t r_mod = row % 8;
    20dc:	e1 2f       	mov	r30, r17
    20de:	e7 78       	andi	r30, 0x87	; 135
    20e0:	1c f4       	brge	.+6      	; 0x20e8 <main+0xd8>
    20e2:	e1 50       	subi	r30, 0x01	; 1
    20e4:	e8 6f       	ori	r30, 0xF8	; 248
    20e6:	ef 5f       	subi	r30, 0xFF	; 255
	row = row_map[r_mod] + r_int*8;
    20e8:	0e 2e       	mov	r0, r30
    20ea:	00 0c       	add	r0, r0
    20ec:	ff 0b       	sbc	r31, r31

static void pixel_buffer_write_pixel(
				Pixel_Buffer_t*buffer,
				int8_t col, int8_t row,
				int8_t r, int8_t g, int8_t b){
	int8_t r_int = row / 8;
    20ee:	81 2f       	mov	r24, r17
    20f0:	11 23       	and	r17, r17
    20f2:	14 f4       	brge	.+4      	; 0x20f8 <main+0xe8>
    20f4:	87 e0       	ldi	r24, 0x07	; 7
    20f6:	81 0f       	add	r24, r17
	int8_t r_mod = row % 8;
	row = row_map[r_mod] + r_int*8;
    20f8:	98 2f       	mov	r25, r24
    20fa:	98 7f       	andi	r25, 0xF8	; 248
    20fc:	f1 2c       	mov	r15, r1
    20fe:	ec 50       	subi	r30, 0x0C	; 12
    2100:	ff 4d       	sbci	r31, 0xDF	; 223
    2102:	80 81       	ld	r24, Z
    2104:	b9 2e       	mov	r11, r25
    2106:	b8 0e       	add	r11, r24
    2108:	c5 cf       	rjmp	.-118    	; 0x2094 <main+0x84>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    210a:	0f 2e       	mov	r0, r31
    210c:	f0 e6       	ldi	r31, 0x60	; 96
    210e:	ef 2e       	mov	r14, r31
    2110:	f6 e0       	ldi	r31, 0x06	; 6
    2112:	ff 2e       	mov	r15, r31
    2114:	f0 2d       	mov	r31, r0
    2116:	68 94       	set
    2118:	cc 24       	eor	r12, r12
    211a:	c2 f8       	bld	r12, 2
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    211c:	68 94       	set
    211e:	dd 24       	eor	r13, r13
    2120:	d1 f8       	bld	r13, 1
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2122:	f7 01       	movw	r30, r14
    2124:	c6 82       	std	Z+6, r12	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    2126:	d5 82       	std	Z+5, r13	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2128:	d6 82       	std	Z+6, r13	; 0x06
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    212a:	c5 82       	std	Z+5, r12	; 0x05
	//delay_us(20);
	led_matrix_cycle_row_clock();
	ioport_set_pin_level(ROW_DATA_PIN, IOPORT_PIN_LEVEL_HIGH);
	
	int8_t row_counter = 0;
	led_matrix_transfer_row(row_counter);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	9d de       	rcall	.-710    	; 0x1e6a <led_matrix_transfer_row>
	for(row_counter=1; row_counter<N_ROWS; row_counter++){
    2130:	11 e0       	ldi	r17, 0x01	; 1
    2132:	0d 2d       	mov	r16, r13
    2134:	f7 01       	movw	r30, r14
    2136:	05 83       	std	Z+5, r16	; 0x05
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    2138:	06 83       	std	Z+6, r16	; 0x06
		led_matrix_cycle_row_clock();
		led_matrix_transfer_row(row_counter);
    213a:	81 2f       	mov	r24, r17
    213c:	96 de       	rcall	.-724    	; 0x1e6a <led_matrix_transfer_row>
    213e:	1f 5f       	subi	r17, 0xFF	; 255
	led_matrix_cycle_row_clock();
	ioport_set_pin_level(ROW_DATA_PIN, IOPORT_PIN_LEVEL_HIGH);
	
	int8_t row_counter = 0;
	led_matrix_transfer_row(row_counter);
	for(row_counter=1; row_counter<N_ROWS; row_counter++){
    2140:	10 31       	cpi	r17, 0x10	; 16
    2142:	c1 f7       	brne	.-16     	; 0x2134 <main+0x124>
    2144:	ee cf       	rjmp	.-36     	; 0x2122 <main+0x112>

00002146 <__divsf3>:
    2146:	0c d0       	rcall	.+24     	; 0x2160 <__divsf3x>
    2148:	05 c1       	rjmp	.+522    	; 0x2354 <__fp_round>
    214a:	fd d0       	rcall	.+506    	; 0x2346 <__fp_pscB>
    214c:	40 f0       	brcs	.+16     	; 0x215e <__divsf3+0x18>
    214e:	f4 d0       	rcall	.+488    	; 0x2338 <__fp_pscA>
    2150:	30 f0       	brcs	.+12     	; 0x215e <__divsf3+0x18>
    2152:	21 f4       	brne	.+8      	; 0x215c <__divsf3+0x16>
    2154:	5f 3f       	cpi	r21, 0xFF	; 255
    2156:	19 f0       	breq	.+6      	; 0x215e <__divsf3+0x18>
    2158:	d6 c0       	rjmp	.+428    	; 0x2306 <__fp_inf>
    215a:	51 11       	cpse	r21, r1
    215c:	2f c1       	rjmp	.+606    	; 0x23bc <__fp_szero>
    215e:	d9 c0       	rjmp	.+434    	; 0x2312 <__fp_nan>

00002160 <__divsf3x>:
    2160:	0a d1       	rcall	.+532    	; 0x2376 <__fp_split3>
    2162:	98 f3       	brcs	.-26     	; 0x214a <__divsf3+0x4>

00002164 <__divsf3_pse>:
    2164:	99 23       	and	r25, r25
    2166:	c9 f3       	breq	.-14     	; 0x215a <__divsf3+0x14>
    2168:	55 23       	and	r21, r21
    216a:	b1 f3       	breq	.-20     	; 0x2158 <__divsf3+0x12>
    216c:	95 1b       	sub	r25, r21
    216e:	55 0b       	sbc	r21, r21
    2170:	bb 27       	eor	r27, r27
    2172:	aa 27       	eor	r26, r26
    2174:	62 17       	cp	r22, r18
    2176:	73 07       	cpc	r23, r19
    2178:	84 07       	cpc	r24, r20
    217a:	38 f0       	brcs	.+14     	; 0x218a <__divsf3_pse+0x26>
    217c:	9f 5f       	subi	r25, 0xFF	; 255
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	44 1f       	adc	r20, r20
    2186:	aa 1f       	adc	r26, r26
    2188:	a9 f3       	breq	.-22     	; 0x2174 <__divsf3_pse+0x10>
    218a:	33 d0       	rcall	.+102    	; 0x21f2 <__divsf3_pse+0x8e>
    218c:	0e 2e       	mov	r0, r30
    218e:	3a f0       	brmi	.+14     	; 0x219e <__divsf3_pse+0x3a>
    2190:	e0 e8       	ldi	r30, 0x80	; 128
    2192:	30 d0       	rcall	.+96     	; 0x21f4 <__divsf3_pse+0x90>
    2194:	91 50       	subi	r25, 0x01	; 1
    2196:	50 40       	sbci	r21, 0x00	; 0
    2198:	e6 95       	lsr	r30
    219a:	00 1c       	adc	r0, r0
    219c:	ca f7       	brpl	.-14     	; 0x2190 <__divsf3_pse+0x2c>
    219e:	29 d0       	rcall	.+82     	; 0x21f2 <__divsf3_pse+0x8e>
    21a0:	fe 2f       	mov	r31, r30
    21a2:	27 d0       	rcall	.+78     	; 0x21f2 <__divsf3_pse+0x8e>
    21a4:	66 0f       	add	r22, r22
    21a6:	77 1f       	adc	r23, r23
    21a8:	88 1f       	adc	r24, r24
    21aa:	bb 1f       	adc	r27, r27
    21ac:	26 17       	cp	r18, r22
    21ae:	37 07       	cpc	r19, r23
    21b0:	48 07       	cpc	r20, r24
    21b2:	ab 07       	cpc	r26, r27
    21b4:	b0 e8       	ldi	r27, 0x80	; 128
    21b6:	09 f0       	breq	.+2      	; 0x21ba <__divsf3_pse+0x56>
    21b8:	bb 0b       	sbc	r27, r27
    21ba:	80 2d       	mov	r24, r0
    21bc:	bf 01       	movw	r22, r30
    21be:	ff 27       	eor	r31, r31
    21c0:	93 58       	subi	r25, 0x83	; 131
    21c2:	5f 4f       	sbci	r21, 0xFF	; 255
    21c4:	2a f0       	brmi	.+10     	; 0x21d0 <__divsf3_pse+0x6c>
    21c6:	9e 3f       	cpi	r25, 0xFE	; 254
    21c8:	51 05       	cpc	r21, r1
    21ca:	68 f0       	brcs	.+26     	; 0x21e6 <__divsf3_pse+0x82>
    21cc:	9c c0       	rjmp	.+312    	; 0x2306 <__fp_inf>
    21ce:	f6 c0       	rjmp	.+492    	; 0x23bc <__fp_szero>
    21d0:	5f 3f       	cpi	r21, 0xFF	; 255
    21d2:	ec f3       	brlt	.-6      	; 0x21ce <__divsf3_pse+0x6a>
    21d4:	98 3e       	cpi	r25, 0xE8	; 232
    21d6:	dc f3       	brlt	.-10     	; 0x21ce <__divsf3_pse+0x6a>
    21d8:	86 95       	lsr	r24
    21da:	77 95       	ror	r23
    21dc:	67 95       	ror	r22
    21de:	b7 95       	ror	r27
    21e0:	f7 95       	ror	r31
    21e2:	9f 5f       	subi	r25, 0xFF	; 255
    21e4:	c9 f7       	brne	.-14     	; 0x21d8 <__divsf3_pse+0x74>
    21e6:	88 0f       	add	r24, r24
    21e8:	91 1d       	adc	r25, r1
    21ea:	96 95       	lsr	r25
    21ec:	87 95       	ror	r24
    21ee:	97 f9       	bld	r25, 7
    21f0:	08 95       	ret
    21f2:	e1 e0       	ldi	r30, 0x01	; 1
    21f4:	66 0f       	add	r22, r22
    21f6:	77 1f       	adc	r23, r23
    21f8:	88 1f       	adc	r24, r24
    21fa:	bb 1f       	adc	r27, r27
    21fc:	62 17       	cp	r22, r18
    21fe:	73 07       	cpc	r23, r19
    2200:	84 07       	cpc	r24, r20
    2202:	ba 07       	cpc	r27, r26
    2204:	20 f0       	brcs	.+8      	; 0x220e <__divsf3_pse+0xaa>
    2206:	62 1b       	sub	r22, r18
    2208:	73 0b       	sbc	r23, r19
    220a:	84 0b       	sbc	r24, r20
    220c:	ba 0b       	sbc	r27, r26
    220e:	ee 1f       	adc	r30, r30
    2210:	88 f7       	brcc	.-30     	; 0x21f4 <__divsf3_pse+0x90>
    2212:	e0 95       	com	r30
    2214:	08 95       	ret

00002216 <__fixsfdi>:
    2216:	be e3       	ldi	r27, 0x3E	; 62
    2218:	04 d0       	rcall	.+8      	; 0x2222 <__fixunssfdi+0x2>
    221a:	08 f4       	brcc	.+2      	; 0x221e <__fixsfdi+0x8>
    221c:	90 e8       	ldi	r25, 0x80	; 128
    221e:	08 95       	ret

00002220 <__fixunssfdi>:
    2220:	bf e3       	ldi	r27, 0x3F	; 63
    2222:	22 27       	eor	r18, r18
    2224:	33 27       	eor	r19, r19
    2226:	a9 01       	movw	r20, r18
    2228:	ae d0       	rcall	.+348    	; 0x2386 <__fp_splitA>
    222a:	58 f1       	brcs	.+86     	; 0x2282 <__fixunssfdi+0x62>
    222c:	9f 57       	subi	r25, 0x7F	; 127
    222e:	40 f1       	brcs	.+80     	; 0x2280 <__fixunssfdi+0x60>
    2230:	b9 17       	cp	r27, r25
    2232:	38 f1       	brcs	.+78     	; 0x2282 <__fixunssfdi+0x62>
    2234:	bf e3       	ldi	r27, 0x3F	; 63
    2236:	b9 1b       	sub	r27, r25
    2238:	99 27       	eor	r25, r25
    223a:	b8 50       	subi	r27, 0x08	; 8
    223c:	3a f4       	brpl	.+14     	; 0x224c <__fixunssfdi+0x2c>
    223e:	66 0f       	add	r22, r22
    2240:	77 1f       	adc	r23, r23
    2242:	88 1f       	adc	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	b3 95       	inc	r27
    2248:	d2 f3       	brmi	.-12     	; 0x223e <__fixunssfdi+0x1e>
    224a:	16 c0       	rjmp	.+44     	; 0x2278 <__fixunssfdi+0x58>
    224c:	b8 50       	subi	r27, 0x08	; 8
    224e:	4a f0       	brmi	.+18     	; 0x2262 <__fixunssfdi+0x42>
    2250:	23 2f       	mov	r18, r19
    2252:	34 2f       	mov	r19, r20
    2254:	45 2f       	mov	r20, r21
    2256:	56 2f       	mov	r21, r22
    2258:	67 2f       	mov	r22, r23
    225a:	78 2f       	mov	r23, r24
    225c:	88 27       	eor	r24, r24
    225e:	b8 50       	subi	r27, 0x08	; 8
    2260:	ba f7       	brpl	.-18     	; 0x2250 <__fixunssfdi+0x30>
    2262:	b8 5f       	subi	r27, 0xF8	; 248
    2264:	49 f0       	breq	.+18     	; 0x2278 <__fixunssfdi+0x58>
    2266:	86 95       	lsr	r24
    2268:	77 95       	ror	r23
    226a:	67 95       	ror	r22
    226c:	57 95       	ror	r21
    226e:	47 95       	ror	r20
    2270:	37 95       	ror	r19
    2272:	27 95       	ror	r18
    2274:	ba 95       	dec	r27
    2276:	b9 f7       	brne	.-18     	; 0x2266 <__fixunssfdi+0x46>
    2278:	0e f4       	brtc	.+2      	; 0x227c <__fixunssfdi+0x5c>
    227a:	4e d0       	rcall	.+156    	; 0x2318 <__fp_negdi>
    227c:	88 94       	clc
    227e:	08 95       	ret
    2280:	88 94       	clc
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	cb 01       	movw	r24, r22
    2288:	08 95       	ret

0000228a <__floatundisf>:
    228a:	e8 94       	clt

0000228c <__fp_di2sf>:
    228c:	f9 2f       	mov	r31, r25
    228e:	96 eb       	ldi	r25, 0xB6	; 182
    2290:	ff 23       	and	r31, r31
    2292:	81 f0       	breq	.+32     	; 0x22b4 <__fp_di2sf+0x28>
    2294:	12 16       	cp	r1, r18
    2296:	13 06       	cpc	r1, r19
    2298:	14 06       	cpc	r1, r20
    229a:	44 0b       	sbc	r20, r20
    229c:	93 95       	inc	r25
    229e:	f6 95       	lsr	r31
    22a0:	87 95       	ror	r24
    22a2:	77 95       	ror	r23
    22a4:	67 95       	ror	r22
    22a6:	57 95       	ror	r21
    22a8:	40 40       	sbci	r20, 0x00	; 0
    22aa:	ff 23       	and	r31, r31
    22ac:	b9 f7       	brne	.-18     	; 0x229c <__fp_di2sf+0x10>
    22ae:	1b c0       	rjmp	.+54     	; 0x22e6 <__fp_di2sf+0x5a>
    22b0:	99 27       	eor	r25, r25
    22b2:	08 95       	ret
    22b4:	88 23       	and	r24, r24
    22b6:	51 f4       	brne	.+20     	; 0x22cc <__fp_di2sf+0x40>
    22b8:	98 50       	subi	r25, 0x08	; 8
    22ba:	d2 f7       	brpl	.-12     	; 0x22b0 <__fp_di2sf+0x24>
    22bc:	87 2b       	or	r24, r23
    22be:	76 2f       	mov	r23, r22
    22c0:	65 2f       	mov	r22, r21
    22c2:	54 2f       	mov	r21, r20
    22c4:	43 2f       	mov	r20, r19
    22c6:	32 2f       	mov	r19, r18
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	b1 f3       	breq	.-20     	; 0x22b8 <__fp_di2sf+0x2c>
    22cc:	12 16       	cp	r1, r18
    22ce:	13 06       	cpc	r1, r19
    22d0:	14 06       	cpc	r1, r20
    22d2:	44 0b       	sbc	r20, r20
    22d4:	88 23       	and	r24, r24
    22d6:	3a f0       	brmi	.+14     	; 0x22e6 <__fp_di2sf+0x5a>
    22d8:	9a 95       	dec	r25
    22da:	44 0f       	add	r20, r20
    22dc:	55 1f       	adc	r21, r21
    22de:	66 1f       	adc	r22, r22
    22e0:	77 1f       	adc	r23, r23
    22e2:	88 1f       	adc	r24, r24
    22e4:	ca f7       	brpl	.-14     	; 0x22d8 <__fp_di2sf+0x4c>
    22e6:	55 23       	and	r21, r21
    22e8:	4a f4       	brpl	.+18     	; 0x22fc <__fp_di2sf+0x70>
    22ea:	44 0f       	add	r20, r20
    22ec:	55 1f       	adc	r21, r21
    22ee:	11 f4       	brne	.+4      	; 0x22f4 <__fp_di2sf+0x68>
    22f0:	60 ff       	sbrs	r22, 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <__fp_di2sf+0x70>
    22f4:	6f 5f       	subi	r22, 0xFF	; 255
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	8f 4f       	sbci	r24, 0xFF	; 255
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	88 0f       	add	r24, r24
    22fe:	96 95       	lsr	r25
    2300:	87 95       	ror	r24
    2302:	97 f9       	bld	r25, 7
    2304:	08 95       	ret

00002306 <__fp_inf>:
    2306:	97 f9       	bld	r25, 7
    2308:	9f 67       	ori	r25, 0x7F	; 127
    230a:	80 e8       	ldi	r24, 0x80	; 128
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	08 95       	ret

00002312 <__fp_nan>:
    2312:	9f ef       	ldi	r25, 0xFF	; 255
    2314:	80 ec       	ldi	r24, 0xC0	; 192
    2316:	08 95       	ret

00002318 <__fp_negdi>:
    2318:	90 95       	com	r25
    231a:	80 95       	com	r24
    231c:	70 95       	com	r23
    231e:	60 95       	com	r22
    2320:	50 95       	com	r21
    2322:	40 95       	com	r20
    2324:	30 95       	com	r19
    2326:	21 95       	neg	r18
    2328:	3f 4f       	sbci	r19, 0xFF	; 255
    232a:	4f 4f       	sbci	r20, 0xFF	; 255
    232c:	5f 4f       	sbci	r21, 0xFF	; 255
    232e:	6f 4f       	sbci	r22, 0xFF	; 255
    2330:	7f 4f       	sbci	r23, 0xFF	; 255
    2332:	8f 4f       	sbci	r24, 0xFF	; 255
    2334:	9f 4f       	sbci	r25, 0xFF	; 255
    2336:	08 95       	ret

00002338 <__fp_pscA>:
    2338:	00 24       	eor	r0, r0
    233a:	0a 94       	dec	r0
    233c:	16 16       	cp	r1, r22
    233e:	17 06       	cpc	r1, r23
    2340:	18 06       	cpc	r1, r24
    2342:	09 06       	cpc	r0, r25
    2344:	08 95       	ret

00002346 <__fp_pscB>:
    2346:	00 24       	eor	r0, r0
    2348:	0a 94       	dec	r0
    234a:	12 16       	cp	r1, r18
    234c:	13 06       	cpc	r1, r19
    234e:	14 06       	cpc	r1, r20
    2350:	05 06       	cpc	r0, r21
    2352:	08 95       	ret

00002354 <__fp_round>:
    2354:	09 2e       	mov	r0, r25
    2356:	03 94       	inc	r0
    2358:	00 0c       	add	r0, r0
    235a:	11 f4       	brne	.+4      	; 0x2360 <__fp_round+0xc>
    235c:	88 23       	and	r24, r24
    235e:	52 f0       	brmi	.+20     	; 0x2374 <__fp_round+0x20>
    2360:	bb 0f       	add	r27, r27
    2362:	40 f4       	brcc	.+16     	; 0x2374 <__fp_round+0x20>
    2364:	bf 2b       	or	r27, r31
    2366:	11 f4       	brne	.+4      	; 0x236c <__fp_round+0x18>
    2368:	60 ff       	sbrs	r22, 0
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <__fp_round+0x20>
    236c:	6f 5f       	subi	r22, 0xFF	; 255
    236e:	7f 4f       	sbci	r23, 0xFF	; 255
    2370:	8f 4f       	sbci	r24, 0xFF	; 255
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	08 95       	ret

00002376 <__fp_split3>:
    2376:	57 fd       	sbrc	r21, 7
    2378:	90 58       	subi	r25, 0x80	; 128
    237a:	44 0f       	add	r20, r20
    237c:	55 1f       	adc	r21, r21
    237e:	59 f0       	breq	.+22     	; 0x2396 <__fp_splitA+0x10>
    2380:	5f 3f       	cpi	r21, 0xFF	; 255
    2382:	71 f0       	breq	.+28     	; 0x23a0 <__fp_splitA+0x1a>
    2384:	47 95       	ror	r20

00002386 <__fp_splitA>:
    2386:	88 0f       	add	r24, r24
    2388:	97 fb       	bst	r25, 7
    238a:	99 1f       	adc	r25, r25
    238c:	61 f0       	breq	.+24     	; 0x23a6 <__fp_splitA+0x20>
    238e:	9f 3f       	cpi	r25, 0xFF	; 255
    2390:	79 f0       	breq	.+30     	; 0x23b0 <__fp_splitA+0x2a>
    2392:	87 95       	ror	r24
    2394:	08 95       	ret
    2396:	12 16       	cp	r1, r18
    2398:	13 06       	cpc	r1, r19
    239a:	14 06       	cpc	r1, r20
    239c:	55 1f       	adc	r21, r21
    239e:	f2 cf       	rjmp	.-28     	; 0x2384 <__fp_split3+0xe>
    23a0:	46 95       	lsr	r20
    23a2:	f1 df       	rcall	.-30     	; 0x2386 <__fp_splitA>
    23a4:	08 c0       	rjmp	.+16     	; 0x23b6 <__fp_splitA+0x30>
    23a6:	16 16       	cp	r1, r22
    23a8:	17 06       	cpc	r1, r23
    23aa:	18 06       	cpc	r1, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	f1 cf       	rjmp	.-30     	; 0x2392 <__fp_splitA+0xc>
    23b0:	86 95       	lsr	r24
    23b2:	71 05       	cpc	r23, r1
    23b4:	61 05       	cpc	r22, r1
    23b6:	08 94       	sec
    23b8:	08 95       	ret

000023ba <__fp_zero>:
    23ba:	e8 94       	clt

000023bc <__fp_szero>:
    23bc:	bb 27       	eor	r27, r27
    23be:	66 27       	eor	r22, r22
    23c0:	77 27       	eor	r23, r23
    23c2:	cb 01       	movw	r24, r22
    23c4:	97 f9       	bld	r25, 7
    23c6:	08 95       	ret

000023c8 <__udivmodhi4>:
    23c8:	aa 1b       	sub	r26, r26
    23ca:	bb 1b       	sub	r27, r27
    23cc:	51 e1       	ldi	r21, 0x11	; 17
    23ce:	07 c0       	rjmp	.+14     	; 0x23de <__udivmodhi4_ep>

000023d0 <__udivmodhi4_loop>:
    23d0:	aa 1f       	adc	r26, r26
    23d2:	bb 1f       	adc	r27, r27
    23d4:	a6 17       	cp	r26, r22
    23d6:	b7 07       	cpc	r27, r23
    23d8:	10 f0       	brcs	.+4      	; 0x23de <__udivmodhi4_ep>
    23da:	a6 1b       	sub	r26, r22
    23dc:	b7 0b       	sbc	r27, r23

000023de <__udivmodhi4_ep>:
    23de:	88 1f       	adc	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	5a 95       	dec	r21
    23e4:	a9 f7       	brne	.-22     	; 0x23d0 <__udivmodhi4_loop>
    23e6:	80 95       	com	r24
    23e8:	90 95       	com	r25
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	08 95       	ret

000023f0 <__udivmodsi4>:
    23f0:	a1 e2       	ldi	r26, 0x21	; 33
    23f2:	1a 2e       	mov	r1, r26
    23f4:	aa 1b       	sub	r26, r26
    23f6:	bb 1b       	sub	r27, r27
    23f8:	fd 01       	movw	r30, r26
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__udivmodsi4_ep>

000023fc <__udivmodsi4_loop>:
    23fc:	aa 1f       	adc	r26, r26
    23fe:	bb 1f       	adc	r27, r27
    2400:	ee 1f       	adc	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	a2 17       	cp	r26, r18
    2406:	b3 07       	cpc	r27, r19
    2408:	e4 07       	cpc	r30, r20
    240a:	f5 07       	cpc	r31, r21
    240c:	20 f0       	brcs	.+8      	; 0x2416 <__udivmodsi4_ep>
    240e:	a2 1b       	sub	r26, r18
    2410:	b3 0b       	sbc	r27, r19
    2412:	e4 0b       	sbc	r30, r20
    2414:	f5 0b       	sbc	r31, r21

00002416 <__udivmodsi4_ep>:
    2416:	66 1f       	adc	r22, r22
    2418:	77 1f       	adc	r23, r23
    241a:	88 1f       	adc	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	1a 94       	dec	r1
    2420:	69 f7       	brne	.-38     	; 0x23fc <__udivmodsi4_loop>
    2422:	60 95       	com	r22
    2424:	70 95       	com	r23
    2426:	80 95       	com	r24
    2428:	90 95       	com	r25
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	bd 01       	movw	r22, r26
    2430:	cf 01       	movw	r24, r30
    2432:	08 95       	ret

00002434 <__tablejump2__>:
    2434:	ee 0f       	add	r30, r30
    2436:	ff 1f       	adc	r31, r31
    2438:	88 1f       	adc	r24, r24
    243a:	8b bf       	out	0x3b, r24	; 59
    243c:	07 90       	elpm	r0, Z+
    243e:	f6 91       	elpm	r31, Z
    2440:	e0 2d       	mov	r30, r0
    2442:	1b be       	out	0x3b, r1	; 59
    2444:	19 94       	eijmp

00002446 <__muldi3>:
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	1f 93       	push	r17
    244c:	0f 93       	push	r16
    244e:	9a 9d       	mul	r25, r10
    2450:	f0 2d       	mov	r31, r0
    2452:	21 9f       	mul	r18, r17
    2454:	f0 0d       	add	r31, r0
    2456:	8b 9d       	mul	r24, r11
    2458:	f0 0d       	add	r31, r0
    245a:	8a 9d       	mul	r24, r10
    245c:	e0 2d       	mov	r30, r0
    245e:	f1 0d       	add	r31, r1
    2460:	03 9f       	mul	r16, r19
    2462:	f0 0d       	add	r31, r0
    2464:	02 9f       	mul	r16, r18
    2466:	e0 0d       	add	r30, r0
    2468:	f1 1d       	adc	r31, r1
    246a:	4e 9d       	mul	r20, r14
    246c:	e0 0d       	add	r30, r0
    246e:	f1 1d       	adc	r31, r1
    2470:	5e 9d       	mul	r21, r14
    2472:	f0 0d       	add	r31, r0
    2474:	4f 9d       	mul	r20, r15
    2476:	f0 0d       	add	r31, r0
    2478:	7f 93       	push	r23
    247a:	6f 93       	push	r22
    247c:	bf 92       	push	r11
    247e:	af 92       	push	r10
    2480:	5f 93       	push	r21
    2482:	4f 93       	push	r20
    2484:	d5 01       	movw	r26, r10
    2486:	30 d0       	rcall	.+96     	; 0x24e8 <__umulhisi3>
    2488:	8b 01       	movw	r16, r22
    248a:	ac 01       	movw	r20, r24
    248c:	d7 01       	movw	r26, r14
    248e:	2c d0       	rcall	.+88     	; 0x24e8 <__umulhisi3>
    2490:	eb 01       	movw	r28, r22
    2492:	e8 0f       	add	r30, r24
    2494:	f9 1f       	adc	r31, r25
    2496:	d6 01       	movw	r26, r12
    2498:	1f d0       	rcall	.+62     	; 0x24d8 <__muldi3_6>
    249a:	2f 91       	pop	r18
    249c:	3f 91       	pop	r19
    249e:	d6 01       	movw	r26, r12
    24a0:	23 d0       	rcall	.+70     	; 0x24e8 <__umulhisi3>
    24a2:	c6 0f       	add	r28, r22
    24a4:	d7 1f       	adc	r29, r23
    24a6:	e8 1f       	adc	r30, r24
    24a8:	f9 1f       	adc	r31, r25
    24aa:	af 91       	pop	r26
    24ac:	bf 91       	pop	r27
    24ae:	14 d0       	rcall	.+40     	; 0x24d8 <__muldi3_6>
    24b0:	2f 91       	pop	r18
    24b2:	3f 91       	pop	r19
    24b4:	19 d0       	rcall	.+50     	; 0x24e8 <__umulhisi3>
    24b6:	c6 0f       	add	r28, r22
    24b8:	d7 1f       	adc	r29, r23
    24ba:	e8 1f       	adc	r30, r24
    24bc:	f9 1f       	adc	r31, r25
    24be:	d6 01       	movw	r26, r12
    24c0:	13 d0       	rcall	.+38     	; 0x24e8 <__umulhisi3>
    24c2:	e6 0f       	add	r30, r22
    24c4:	f7 1f       	adc	r31, r23
    24c6:	98 01       	movw	r18, r16
    24c8:	be 01       	movw	r22, r28
    24ca:	cf 01       	movw	r24, r30
    24cc:	11 24       	eor	r1, r1
    24ce:	0f 91       	pop	r16
    24d0:	1f 91       	pop	r17
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <__muldi3_6>:
    24d8:	07 d0       	rcall	.+14     	; 0x24e8 <__umulhisi3>
    24da:	46 0f       	add	r20, r22
    24dc:	57 1f       	adc	r21, r23
    24de:	c8 1f       	adc	r28, r24
    24e0:	d9 1f       	adc	r29, r25
    24e2:	08 f4       	brcc	.+2      	; 0x24e6 <__muldi3_6+0xe>
    24e4:	31 96       	adiw	r30, 0x01	; 1
    24e6:	08 95       	ret

000024e8 <__umulhisi3>:
    24e8:	a2 9f       	mul	r26, r18
    24ea:	b0 01       	movw	r22, r0
    24ec:	b3 9f       	mul	r27, r19
    24ee:	c0 01       	movw	r24, r0
    24f0:	a3 9f       	mul	r26, r19
    24f2:	70 0d       	add	r23, r0
    24f4:	81 1d       	adc	r24, r1
    24f6:	11 24       	eor	r1, r1
    24f8:	91 1d       	adc	r25, r1
    24fa:	b2 9f       	mul	r27, r18
    24fc:	70 0d       	add	r23, r0
    24fe:	81 1d       	adc	r24, r1
    2500:	11 24       	eor	r1, r1
    2502:	91 1d       	adc	r25, r1
    2504:	08 95       	ret

00002506 <memcpy>:
    2506:	fb 01       	movw	r30, r22
    2508:	dc 01       	movw	r26, r24
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <memcpy+0xa>
    250c:	01 90       	ld	r0, Z+
    250e:	0d 92       	st	X+, r0
    2510:	41 50       	subi	r20, 0x01	; 1
    2512:	50 40       	sbci	r21, 0x00	; 0
    2514:	d8 f7       	brcc	.-10     	; 0x250c <memcpy+0x6>
    2516:	08 95       	ret

00002518 <_exit>:
    2518:	f8 94       	cli

0000251a <__stop_program>:
    251a:	ff cf       	rjmp	.-2      	; 0x251a <__stop_program>
